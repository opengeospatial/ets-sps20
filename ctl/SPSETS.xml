<?xml version="1.0" encoding="utf-8"?>
<ctl:package 
	xmlns="http://www.w3.org/1999/xhtml" 
	xmlns:ctl="http://www.occamlab.com/ctl" 
	xmlns:parsers="http://www.occamlab.com/te/parsers" 
	xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
	xmlns:spsTesting="https://cite.opengeospatial.org/spsTesting"
	xmlns:xlink="http://www.w3.org/1999/xlink" 
	xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
	xmlns:sml="http://www.opengis.net/sensorML/1.0"
	xmlns:sml1="http://www.opengis.net/sensorML/1.0.1"
	xmlns:tml="http://www.opengis.net/tml" 
	xmlns:spsFunctions="https://cite.opengeospatial.org/sps-1.0/src/ctl/functions.xml"
	xmlns:owsTests="https://www.cite.opengeospatial.org/ows-1.0/tests"
	xmlns:sps="http://www.opengis.net/sps/2.0" 
	xmlns:swe="http://www.opengis.net/swe/2.0"
	xmlns:gml="http://www.opengis.net/gml/3.2" 
	xmlns:ows="http://www.opengis.net/ows/1.1"
	xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
	xmlns:swes="http://www.opengis.net/swes/2.0"

>
	<!-- 未使用的命名空間 Those namespaces whick are not used in this document
		xmlns:ocp="http://www.occamlab.com/te/parsers" 
		xmlns:tep="http://teamengine.sourceforge.net/parsers" 
		xmlns:saxon="http://saxon.sf.net/" 
		xmlns:xi="http://www.w3.org/2001/XInclude" 
		xmlns:db5="http://docbook.org/ns/docbook" 
		xmlns:xp20="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.Xpath20"
	-->
	<!-- 一些命名空間升級由SPS 1.0到SPS 2.0   Some xml namespace changed from SPS 1.0 to SPS 2.0
		xmlns:sps="http://www.opengis.net/sps/1.0"  =>	xmlns:sps="http://www.opengis.net/sps/2.0"
		xmlns:swe="http://www.opengis.net/swe/1.0"	=>	http://www.opengis.net/swe/2.0
		xmlns:gml="http://www.opengis.net/gml" 		=>	http://www.opengis.net/gml/3.2
		xmlns:ows="http://www.opengis.net/ows"		=>	http://www.opengis.net/ows/1.1
	-->
	<ctl:suite name="sps:suite">
		<!--NOTE: Don't forget to update the TARGET_NAMESPACE_URI and docs/SPS%202.0%20ATS.html placeholder values-->
		<ctl:title>SPS 2.0 Compliance Test Suite</ctl:title>
		<ctl:description>Verifies that an SPS 2.0 implementation complies with the SPS 2.0 specification.</ctl:description>
		<ctl:link>docs/sps/2.0/</ctl:link>
		<ctl:starting-test>sps:Main</ctl:starting-test>
	</ctl:suite>

	<ctl:test name="sps:Main">
		<ctl:assertion>The IUT satisfies all applicable assertions.</ctl:assertion>
		<ctl:code>
			<!--
			1.)  Prompt the user to provide the url for an SPS implementation.
			2.)  Send a request to the provided url to determine if there is a response
			3.)  If there is a response, then begin executing tests, else fail.
			TODO:  Add notes section
			-->
			<ctl:message>****************************************************</ctl:message>
			<ctl:message>*Testing started at:  <xsl:value-of select="current-dateTime()" />*</ctl:message>
			<ctl:message>****************************************************</ctl:message>
			<xsl:variable name="form-values">
				<ctl:form height="640" width="800">
					<body>
						<h2>Compliance Test Suite for Sensor Planning Service (SPS) 2.0</h2>
						<p>
						Please provide a URL from which a Capabilities document can 
						be retrieved. Modify the URL template below to specify the 
						location of an OGC SPS 2.0 implementation to be tested.
						</p>
						<blockquote>
							<table border="1" padding="4" bgcolor="#99ccff">
							<tr>
								<td align="left" width="80px"><b>Service URL:</b></td>                        
								<td align="center">
									<input name="service-url" size="128" 
									type="text" 
									value="http://140.134.48.12/sps/SPS.ashx"/>
								</td>
							</tr>
							</table>
						</blockquote>
						<p>Please select how tho send request.</p>
						<blockquote>
							<table border="1" padding="4" bgcolor="#00ffff" align="center">
								<tr>
									<td><input type="radio" name="request-via" checked="true" value="GET">HTTP Get</input></td>
									<td><input type="radio" name="request-via" value="POST">HTTP Post</input></td>
									<td><input type="radio" name="request-via" value="SOAP">SOAP Binding</input></td>
								</tr>				
							</table>						
						</blockquote>
						<input type="submit" value="Start"/>
					</body>
				</ctl:form>
			</xsl:variable>

			<!-- Get user input:  Get the value of the SPS URL that the user supplies -->
			<xsl:variable name="sps.service.get.url" select="$form-values/values/value[@key='service-url']"/>
			<ctl:message>Executing tests on the SPS implementation found at the following URL:  <xsl:value-of select="$sps.service.get.url" /></ctl:message>
			<xsl:variable name="request-via" select="$form-values/values/value[@key='request-via']"/>
			<!--Call each test passing the capabilities URL as the parameter-->
			<!-- check Encoding-Start -->
			<xsl:variable name="request1_org">
				<xsl:if test="($request-via eq 'GET')">
					<ctl:request>
						<ctl:url>
						<xsl:value-of select="$sps.service.get.url"/>
						</ctl:url>
						<ctl:method>get</ctl:method>
						<ctl:param name="request">GetCapabilities</ctl:param>
					</ctl:request>
				</xsl:if>
				<xsl:if test="($request-via eq 'POST')">
					<ctl:request>
						<ctl:url>
							<xsl:value-of select="$sps.service.get.url" />
						</ctl:url>
						<ctl:method>post</ctl:method>
						<ctl:body>
							<sps:GetCapabilities service="SPS"
								xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" 
								xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" 
								xmlns:sps="http://www.opengis.net/sps/2.0" 
								xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"></sps:GetCapabilities>
						</ctl:body>
					</ctl:request>
				</xsl:if>
				<xsl:if test="($request-via eq 'SOAP')">
					<ctl:soap-request version="1.2" charset="UTF-8">
						<ctl:url>
							<xsl:value-of select="$sps.service.get.url"/>
						</ctl:url> 
						<ctl:body>
							<sps:GetCapabilities service="SPS"
								xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" 
								xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" 
								xmlns:sps="http://www.opengis.net/sps/2.0" 
								xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"></sps:GetCapabilities>
						</ctl:body>
						<ctl:call-function name="spsFunctions:validateGetCapabilitiesResponseSOAP" />
					</ctl:soap-request>
				</xsl:if>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="not($request1_org/*)">
					<ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:variable name="PostEncoding" select="$request1_org//ows:OperationsMetadata/ows:Constraint//ows:Value" />
					<xsl:variable name="PostEncodingIsSOAP"><xsl:if test="$PostEncoding=string('SOAP')">true</xsl:if></xsl:variable>
					
					<xsl:variable name="GetCapabilities_GET" select="count($request1_org//ows:Operation[@name='GetCapabilities']//ows:Get) > 0" />
					
					<xsl:variable name="serviceURL">
						<xsl:if test="$GetCapabilities_GET">
							<xsl:value-of select="$request1_org//ows:Operation[@name='GetCapabilities']//ows:Get/@xlink:href"/>
						</xsl:if>
						<xsl:if test="not($GetCapabilities_GET)">
							<xsl:value-of select="$request1_org//ows:Operation[@name='GetCapabilities']//ows:Post/@xlink:href"/>
						</xsl:if>
					</xsl:variable>
					
					<xsl:variable name="DescribeSensor_URL" select="$request1_org//ows:Operation[@name='DescribeSensor']//ows:Post/@xlink:href" />
					
					<xsl:variable name="DescribeTasking_URL" select="$request1_org//ows:Operation[@name='DescribeTasking']//ows:Post/@xlink:href" />
					
					<xsl:variable name="Submit_URL" select="$request1_org//ows:Operation[@name='Submit']//ows:Post/@xlink:href" />
					
					<xsl:variable name="GetStatus_URL" select="$request1_org//ows:Operation[@name='GetStatus']//ows:Post/@xlink:href" />
					
					<xsl:variable name="GetTask_URL" select="$request1_org//ows:Operation[@name='GetTask']//ows:Post/@xlink:href" />
					
					<xsl:variable name="DescribeResultAccess_URL" select="$request1_org//ows:Operation[@name='DescribeResultAccess']//ows:Post/@xlink:href" />
					<!-- check Encoding-End -->

					<ctl:call-test name="sps:ows-main">
						<ctl:with-param name="serviceURL" select="$serviceURL" />
						<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
						<ctl:with-param name="GetCapabilities_GET" select="$GetCapabilities_GET" />
					</ctl:call-test>
					<ctl:call-test name="sps:general-main">
						<ctl:with-param name="serviceURL" select="$Submit_URL" /><!-- Use Submit_Url to test general-->
						<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
						<ctl:with-param name="GetCapabilities_GET" select="$GetCapabilities_GET" />
					</ctl:call-test>
					<ctl:call-test name="sps:core-main">
						<ctl:with-param name="serviceURL" select="$serviceURL" />
						<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
						<ctl:with-param name="GetCapabilities_GET" select="$GetCapabilities_GET" />
						<ctl:with-param name="DescribeSensor_URL" select="$DescribeSensor_URL" />
						<ctl:with-param name="DescribeTasking_URL" select="$DescribeTasking_URL" />
						<ctl:with-param name="Submit_URL" select="$Submit_URL" />
						<ctl:with-param name="GetStatus_URL" select="$GetStatus_URL" />
						<ctl:with-param name="GetTask_URL" select="$GetTask_URL" />
						<ctl:with-param name="DescribeResultAccess_URL" select="$DescribeResultAccess_URL" />
					</ctl:call-test>
				</xsl:otherwise>
			</xsl:choose>
			<ctl:message>******************************************************</ctl:message>
			<ctl:message>*Testing completed at:  <xsl:value-of select="current-dateTime()" />*</ctl:message>
			<ctl:message>******************************************************</ctl:message>
		</ctl:code>
	</ctl:test>

	<ctl:package> <!-- sps:ows-main -->
		<ctl:test name="sps:ows-main">
			<ctl:param name="serviceURL" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:param name="GetCapabilities_GET" />
			<ctl:assertion>All assertions for "ows" conformance are satisfied.</ctl:assertion>
			<ctl:comment>Test driver for the ows module.</ctl:comment>
			<ctl:link title="1. OWS">docs/SPS%202.0%20ATS.html#ows</ctl:link>
			<ctl:code>
				<ctl:message>*****************************</ctl:message>
				<ctl:message>*Running OWS Common Tests...*</ctl:message>
				<ctl:message>*****************************</ctl:message>
				<ctl:call-test name="owsTests:ows-main">
					<ctl:with-param name="serviceURL" select="$serviceURL"/>
					<ctl:with-param name="serviceType" select="string('SPS')"/>
					<ctl:with-param name="serviceVersion" select="string('2.0.0')" />
					<ctl:with-param name="capabilitiesRootElementName" select="string('Capabilities')" />
					<ctl:with-param name="capabilitiesResponseSchemaLocation">
						<ctl:call-function name="spsFunctions:getSchemaLocation">
							<ctl:with-param name="schemaName" select="string('spsGetCapabilities.xsd')" />
						</ctl:call-function>
					</ctl:with-param>
					<ctl:with-param name="capabilitiesResponseSchemaType" select="string('resource')" />
					<ctl:with-param name="capabilitiesResponseContentType" select="string('text/xml')" />
					<ctl:with-param name="exceptionReportSchemaLocation">
						<ctl:call-function name="spsFunctions:getSchemaLocation">
							<ctl:with-param name="schemaName" select="string('owsExceptionReport.xsd')" />
						</ctl:call-function>
					</ctl:with-param>
					<ctl:with-param name="exceptionReportSchemaType" select="string('resource')" />
					<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
					<ctl:with-param name="GetCapabilities_GET" select="$GetCapabilities_GET" />
				</ctl:call-test>
			</ctl:code>
		</ctl:test>
	</ctl:package>

	<ctl:package> <!-- sps:general-main-->
		<ctl:test name="sps:general-main">
			<ctl:param name="serviceURL" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:param name="GetCapabilities_GET" />
			<ctl:assertion>All assertions for "general" conformance are satisfied.</ctl:assertion>
			<ctl:comment>Test driver for the general module.</ctl:comment>
			<ctl:link title="2. General">docs/SPS%202.0%20ATS.html#general</ctl:link>
			<ctl:code>
				<ctl:message>******************************</ctl:message>
				<ctl:message>*Running General SPS Tests...*</ctl:message>
				<ctl:message>******************************</ctl:message>
				<ctl:call-test name="sps:general-SPS.General-InvalidRequest.1">
					<ctl:with-param name="serviceURL" select="$serviceURL" />
					<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
					<ctl:with-param name="GetCapabilities_GET" select="$GetCapabilities_GET" />
				</ctl:call-test>
				<ctl:message>**********************************************************************</ctl:message>
				<ctl:call-test name="sps:general-SPS.General-ValidResponse.1">
					<ctl:with-param name="responseDocument" select="$serviceURL" />
					<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
					<ctl:with-param name="GetCapabilities_GET" select="$GetCapabilities_GET" />
				</ctl:call-test>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:general-SPS.General-InvalidRequest.1">
			<ctl:param name="serviceURL" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:param name="GetCapabilities_GET" />
			<ctl:assertion>Sending a request that is non-conformant to a schema associated with an SPS operation causes the server to return a valid error report message with an exceptionCode value of InvalidRequest.</ctl:assertion>
			<ctl:comment>Send several test documents that are invalid according to the schemas associated with some of the SPS operations (i.e. the mandatory operations). Pass if the service returns a valid exception message with an exceptionCode value of InvalidRequest; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that an invalid request produces an appropriate response from the server.">docs/SPS%202.0%20ATS.html#SPS.General-InvalidRequest</ctl:link>
			<ctl:code>
				<!--PUT TEST CODE HERE-->
				<!--
				1.)  Issue several invalid request documents to the service.
				2.)  Validate the response against the ExceptionReport schema.
				3.)  If the response validates, then check that the exceptionCode value is "InvalidRequest"
				-->
				<ctl:message>Issuing an invalid request to:  <xsl:value-of select="$serviceURL" /></ctl:message>
				<xsl:if test="$PostEncodingIsSOAP=string('true')">
					<ctl:message>Skip "InvalidRequest" Exception Test because CTL cannot send InvalidRequest body with soap-binding.</ctl:message>
				</xsl:if>
				<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
					<xsl:variable name="invalidRequestResponse">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$serviceURL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<![CDATA[invalid request]]>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateExceptionReport" />
						</ctl:request>
					</xsl:variable>
					<!-- We Cannot send InvalidRequest body because soap-request don't allow it. -->
					<xsl:choose>
						<xsl:when test="not($invalidRequestResponse/*)">
							<ctl:message>FAILURE:  The server did not return a response to an invalid request, or the response from the server was not a valid exception report.  The response from the server was:  "<xsl:value-of select="$invalidRequestResponse/*" />"</ctl:message>
							<ctl:fail />
						</xsl:when>
						<xsl:otherwise>
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($invalidRequestResponse)" /></ctl:message>
							<ctl:message>Checking the validity of the response to an invalid request.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="spsFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$invalidRequestResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidRequest')" />
									<ctl:with-param name="locatorToCheck" select="string('*')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The response to an invalid request was expected to be an exception report with an exceptionCode of "InvalidRequest" and a locator value containing the validation issue.  The returned exception report was:  "<xsl:value-of select="$invalidRequestResponse/*" />"</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:if>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:general-SPS.General-ValidResponse.1">
			<ctl:param name="responseDocument" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:param name="GetCapabilities_GET" />
			<ctl:assertion>A response is a valid response for the SPS.  This general assertion should be tested by all other tests.</ctl:assertion>
			<ctl:comment>Tested through other tests.</ctl:comment>
			<ctl:link title="Verify that a response entity is schema-valid">docs/SPS%202.0%20ATS.html#SPS.General-ValidResponse</ctl:link>
			<ctl:code>
				<ctl:message>This general assertion is tested by all other tests, so there is nothing specific to test now.</ctl:message>
			</ctl:code>
		</ctl:test>
	</ctl:package>

	<ctl:package><!-- sps:core-main -->
		<ctl:test name="sps:core-main">
			<ctl:param name="serviceURL" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:param name="GetCapabilities_GET" />
			<ctl:param name="DescribeSensor_URL" />
			<ctl:param name="DescribeTasking_URL" />
			<ctl:param name="Submit_URL" />
			<ctl:param name="GetStatus_URL" />
			<ctl:param name="GetTask_URL" />
			<ctl:param name="DescribeResultAccess_URL" />
			<ctl:assertion>All assertions for "core" conformance are satisfied.</ctl:assertion>
			<ctl:comment>Test driver for the core module.</ctl:comment>
			<ctl:link title="3. Core">docs/SPS%202.0%20ATS.html#core</ctl:link>
			<ctl:code>
				<ctl:message>Issuing a valid GetCapabilities request to <xsl:value-of select="$serviceURL" /></ctl:message>
				<xsl:variable name="getCapabilitiesResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$serviceURL"/>
							</ctl:url>
							<ctl:body>
								<sps:GetCapabilities service="SPS"
									xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" 
									xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" 
									xmlns:sps="http://www.opengis.net/sps/2.0" 
									xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"></sps:GetCapabilities>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateGetCapabilitiesResponseSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<xsl:if test="$GetCapabilities_GET">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="request">GetCapabilities</ctl:param>
								<ctl:param name="service">SPS</ctl:param>
								<ctl:call-function name="spsFunctions:validateGetCapabilitiesResponse" />
							</ctl:request>
						</xsl:if>
						<xsl:if test="not($GetCapabilities_GET)">
							<ctl:request>
							<ctl:url>
								<xsl:value-of select="$serviceURL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:GetCapabilities service="SPS"
									xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" 
									xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" 
									xmlns:sps="http://www.opengis.net/sps/2.0" 
									xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"></sps:GetCapabilities>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateGetCapabilitiesResponse" />
						</ctl:request>
						</xsl:if>
					</xsl:if>
				</xsl:variable>
				<ctl:message>The server responded to a valid GetCapabilities request with the following message:  <xsl:value-of select="$getCapabilitiesResponse/*" /></ctl:message>
				<xsl:choose>
					<xsl:when test="not($getCapabilitiesResponse/*)">
					<ctl:message>FAILURE:  The server did not return a response to a valid GetCapabilities request, or the response was not a valid SPS Capabilities document.</ctl:message>
					<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						
						<!-- Execute GetCapabilities tests -->
						<ctl:call-test name="sps:core-SPS.GetCapabilities">
							<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
							<ctl:with-param name="serviceURL" select="$serviceURL" />
							<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
							<ctl:with-param name="GetCapabilities_GET" select="$GetCapabilities_GET" />
						</ctl:call-test>

						<!-- Get the DescribeSensor URL & Execute DescribeSensor tests-->
						<ctl:call-test name="sps:core-SPS.DescribeSensor">
							<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
							<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
							<ctl:with-param name="DescribeSensor_URL" select="$DescribeSensor_URL" />
						</ctl:call-test>

						<!--Get the DescribeTasking URL & Execute DescribeTasking tests-->
						<ctl:call-test name="sps:core-SPS.DescribeTasking">
							<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
							<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
							<ctl:with-param name="DescribeTasking_URL" select="$DescribeTasking_URL" />
						</ctl:call-test>

						<!--Get the Submit URL & Execute Submit tests -->
						<ctl:call-test name="sps:core-SPS.Submit">
							<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
							<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
							<ctl:with-param name="DescribeTasking_URL" select="$DescribeTasking_URL" />
							<ctl:with-param name="Submit_URL" select="$Submit_URL" />
							<ctl:with-param name="GetStatus_URL" select="$GetStatus_URL" />
							<ctl:with-param name="GetTask_URL" select="$GetTask_URL" />
							<ctl:with-param name="DescribeResultAccess_URL" select="$DescribeResultAccess_URL" />
						</ctl:call-test>
						
						<!-- Get the GetStatus URL & Execute GetStatus test -->
						<ctl:call-test name="sps:core-SPS.GetStatus">
							<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
							<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
							<ctl:with-param name="DescribeTasking_URL" select="$DescribeTasking_URL" />
							<ctl:with-param name="Submit_URL" select="$Submit_URL" />
							<ctl:with-param name="GetStatus_URL" select="$GetStatus_URL" />
						</ctl:call-test>
						
						
						<!-- Get the GetTask URL & Execute GetTask test -->
						<ctl:call-test name="sps:core-SPS.GetTask">
							<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
							<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
							<ctl:with-param name="DescribeTasking_URL" select="$DescribeTasking_URL" />
							<ctl:with-param name="Submit_URL" select="$Submit_URL" />
							<ctl:with-param name="GetTask_URL" select="$GetTask_URL" />
						</ctl:call-test>
						
						
						<!--Get the DescribeResultAccess URL & Execute DescribeResultAccess tests -->
						<ctl:call-test name="sps:core-SPS.DescribeResultAccess">
							<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
							<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
							<ctl:with-param name="DescribeResultAccess_URL" select="$DescribeResultAccess_URL" />
						</ctl:call-test>
						
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
	</ctl:package>

	<ctl:package><!--GetCapabilities tests-->
		<ctl:test name="sps:core-SPS.GetCapabilities">
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="serviceURL" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:param name="GetCapabilities_GET" />
			<ctl:assertion>Execute GetCapabilities Test.</ctl:assertion>
			<ctl:comment>Pass if all the subtest not fail; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that the server handles missing parameters correctly.">docs/SPS%202.0%20ATS.html#SPS.GetCapabilities</ctl:link>
			<ctl:code>
				<ctl:message>***********************************************</ctl:message>
				<ctl:message>*Running SPS specific GetCapabilities tests...*</ctl:message>
				<ctl:message>***********************************************</ctl:message>
				<xsl:if test="not($PostEncodingIsSOAP=string('true')) and ($GetCapabilities_GET)">
					<!-- Check request no request (HTTP Get Only)-->
					<ctl:call-test name="sps:core-SPS.GetCapabilities-KVPRequestParameterHandling.1">
						<ctl:with-param name="serviceURL" select="$serviceURL" />
					</ctl:call-test>
					<ctl:message>**********************************************************************</ctl:message>
				</xsl:if>
				<!-- Check request with invalid service -->
				<ctl:call-test name="sps:core-SPS.GetCapabilities-KVPRequestServiceParameterHandling.1">
					<ctl:with-param name="serviceURL" select="$serviceURL" />
					<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
					<ctl:with-param name="GetCapabilities_GET" select="$GetCapabilities_GET" />
				</ctl:call-test>
				<ctl:message>**********************************************************************</ctl:message>
				<!-- Check request with invalid request -->
				<ctl:call-test name="sps:core-SPS.GetCapabilities-KVPRequestRequestParameterHandling.1">
					<ctl:with-param name="serviceURL" select="$serviceURL" />
					<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
					<ctl:with-param name="GetCapabilities_GET" select="$GetCapabilities_GET" />
				</ctl:call-test>
				<ctl:message>**********************************************************************</ctl:message>
				<!--Check for mandatory operations-->
				<ctl:call-test name="sps:core-SPS.GetCapabilities-ResponseOperationMetadataMandatoryOperations.1">
					<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
				</ctl:call-test>
				<ctl:message>**********************************************************************</ctl:message>
				<!--Check for optional operations-->
				<ctl:call-test name="sps:core-SPS.GetCapabilities-ResponseOperationMetadataOptionalOperations.1">
					<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
				</ctl:call-test>
				<ctl:message>**********************************************************************</ctl:message>
				<!--Check for valid SPSContent elements-->
				<ctl:call-test name="sps:core-SPS.GetCapabilities-ResponseSPSContect.1">
					<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
				</ctl:call-test>
				<ctl:message>**********************************************************************</ctl:message>
				<!--Check for valid SensorOffering elements-->
				<ctl:call-test name="sps:core-SPS.GetCapabilities-ResponseContentsSensorOfferings.1">
					<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
				</ctl:call-test>
				<ctl:message>**********************************************************************</ctl:message>
				<!--Check for HTTP POST 如果getCapabilities有支援Post的話 service和version省略沒有關係 有的話有固定值-->
				<xsl:if test="exists($getCapabilitiesResponse//ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:DCP/ows:HTTP/ows:Post/@xlink:href)">
					<!-- 0.1. request no service 
					<ctl:call-test name="sps:core-SPS.GetCapabilities-PostRequestNoService.1">
						<ctl:with-param name="serviceURL" select="$serviceURL" />
						<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
					</ctl:call-test>
					-->
					<!-- 0.2. request null service -->
					<ctl:call-test name="sps:core-SPS.GetCapabilities-PostRequestNullService.1">
						<ctl:with-param name="serviceURL" select="$serviceURL" />
						<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
					</ctl:call-test>
					<!-- 0.3. request invalid service -->
					<ctl:call-test name="sps:core-SPS.GetCapabilities-PostRequestInvalidService.1">
						<ctl:with-param name="serviceURL" select="$serviceURL" />
						<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
					</ctl:call-test>
					<!-- 0.4. request no acceptVersions
					<ctl:call-test name="sps:core-SPS.GetCapabilities-PostRequestNoVersion.1">
						<ctl:with-param name="serviceURL" select="$serviceURL" />
						<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
					</ctl:call-test>
					-->
					<!-- 0.5. request null acceptVersions ==>schema error ,so Skip this test
					<ctl:call-test name="sps:core-SPS.GetCapabilities-PostRequestNullVersion.1">
						<ctl:with-param name="serviceURL" select="$serviceURL" />
						<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
					</ctl:call-test>
					-->
					<!-- 0.6. request invalid acceptVersions -->
					<ctl:call-test name="sps:core-SPS.GetCapabilities-PostRequestInvalidVersion.1">
						<ctl:with-param name="serviceURL" select="$serviceURL" />
						<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
					</ctl:call-test>
					<!-- 1.	  request normal -->
					<ctl:call-test name="sps:core-SPS.GetCapabilities-PostRequestNormal">
						<ctl:with-param name="serviceURL" select="$serviceURL" />
						<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
					</ctl:call-test>
				</xsl:if>
				
				<ctl:message>**********************************************************************</ctl:message>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.GetCapabilities-KVPRequestParameterHandling.1">
			<ctl:param name="serviceURL" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>The server returns a valid error report message with an exception code of MissingParameterValue when mandatory parameters are missing from the request.</ctl:assertion>
			<ctl:comment>Pass if the exception report is valid and the exceptionCode parameter contains MissingParameterValue; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that the server handles missing parameters correctly.">docs/SPS%202.0%20ATS.html#SPS.GetCapabilities-KVPRequestParameterHandling</ctl:link>
			<ctl:code>
				<!--GetCapabilities request with no request parameter-->
				<xsl:variable name="requestNoRequest">
					<ctl:request>
						<ctl:url>
							<xsl:value-of select="$serviceURL" />
						</ctl:url>
						<ctl:method>get</ctl:method>
						<ctl:call-function name="spsFunctions:validateExceptionReport" />
					</ctl:request>
				</xsl:variable>
				<!--Check the responses to each of the above requests to ensure that they are valid-->
				<ctl:message>The server returned the following response:  <xsl:value-of select="$requestNoRequest/*" /></ctl:message>
				<ctl:message><xsl:text disable-output-escaping="yes">{$requestNoRequest}</xsl:text></ctl:message>
				<xsl:choose>
					<xsl:when test="not($requestNoRequest/*)"><!-- not($requestNoServiceNoRequest/*) or not($requestNoService/*) or -->
						<ctl:message>FAILURE:  The server did not return responses to the GetCapabilities requests in this test, or the responses to these requests were not valid exceptions.</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$requestNoRequest/*">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($requestNoRequest)" /></ctl:message>
							<ctl:message>Checking the validity of the response to a GetCapabilities request with no request parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="spsFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$requestNoRequest" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('Request')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetCapabilities request with no request parameter specified.  The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "REQUEST".  "<xsl:value-of select="$requestNoRequest" />" was returned instead.</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.GetCapabilities-KVPRequestServiceParameterHandling.1">
			<ctl:param name="serviceURL" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:param name="GetCapabilities_GET" />
			<ctl:assertion>The server returns a valid error report message with an exception code of InvalidParameterValue when the service key value is not SPS. </ctl:assertion>
			<ctl:comment>Pass if the exception report is valid and the exceptionCode parameter contains InvalidParameterValue; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that the server handles invalid service key values correctly.">docs/SPS%202.0%20ATS.html#SPS.GetCapabilities-KVPRequestServiceParameterHandling</ctl:link>
			<ctl:code>
				<!--
				1.)  HTTP GET request with a service parameter that contains a value other than SPS
				-->
				<xsl:variable name="invalidServiceParameterValue" select="string('kaldsfjlksdajf')" />
				<ctl:message>Issuing a GetCapabilities request with an invalid service value of "<xsl:value-of select="$invalidServiceParameterValue" />"</ctl:message>
				<xsl:variable name="requestInvalidServiceKeyValue">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$serviceURL"/>
							</ctl:url>
							<ctl:body>
								<sps:GetCapabilities service="$invalidServiceParameterValue"
									xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" 
									xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" 
									xmlns:sps="http://www.opengis.net/sps/2.0" 
									xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"></sps:GetCapabilities>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateExceptionReportSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<xsl:if test="$GetCapabilities_GET">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="request">GetCapabilities</ctl:param>
								<ctl:param name="service"><xsl:value-of select="$invalidServiceParameterValue" /></ctl:param>
								<ctl:call-function name="spsFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:if>
						<xsl:if test="not($GetCapabilities_GET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sps:GetCapabilities service="$invalidServiceParameterValue"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" 
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" 
										xmlns:sps="http://www.opengis.net/sps/2.0" 
										xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"></sps:GetCapabilities>
								</ctl:body>
								<ctl:call-function name="spsFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:if>
					</xsl:if>
				</xsl:variable>
				<ctl:message>The server returned the following response:  <xsl:value-of select="$requestInvalidServiceKeyValue/*" /></ctl:message>
				<xsl:choose>
					<xsl:when test="not($requestInvalidServiceKeyValue/*)">
						<ctl:message>FAILURE:  The server did not return or a response, or the response was not a valid exception report.</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$PostEncodingIsSOAP=string('true')">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($requestInvalidServiceKeyValue)" /></ctl:message>
						</xsl:if>
						<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($requestInvalidServiceKeyValue)" /></ctl:message>
						</xsl:if>
						<ctl:message>Checking the validity of the response to a GetCapabilities request with an invalid service value.</ctl:message>
						<xsl:variable name="isCorrect">
							<ctl:call-function name="spsFunctions:checkExceptionReport">
								<ctl:with-param name="exceptionReport" select="$requestInvalidServiceKeyValue" />
								<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
								<ctl:with-param name="locatorToCheck" select="string('service')" />
								<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
							</ctl:call-function>
						</xsl:variable>
						<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
						<xsl:if test="not(xsd:boolean($isCorrect))">
							<ctl:message>FAILURE:  The response to a GetCapabilities request with an invalid service parameter (<xsl:value-of select="$invalidServiceParameterValue" />) does not match the expected response.  The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator value of "SERVICE".</ctl:message>
							<ctl:fail />
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.GetCapabilities-KVPRequestRequestParameterHandling.1">
			<ctl:param name="serviceURL" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:param name="GetCapabilities_GET" />
			<ctl:assertion>The server returns a valid error report message with an exception code of InvalidParameterValue or OperationNotSupported when the request key value is not GetCapabilities. </ctl:assertion>
			<ctl:comment>Pass if the exception report is valid and the exceptionCode parameter contains InvalidParameterValue or OperationNotSupported; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that the server handles invalid request key values correctly.">docs/SPS%202.0%20ATS.html#SPS.GetCapabilities-KVPRequestRequestParameterHandling</ctl:link>
			<ctl:code>
				<!--PUT TEST CODE HERE-->
				<!--
				1.)  HTTP GET request with a request parameter that contains a value other than GetCapabilities
				-->
				<xsl:variable name="invalidRequestParameterValue" select="string('lkasjflksadjflkjasdf')" />
				<ctl:message>Issuing a GetCapabilities request with an invalid request value of "<xsl:value-of select="$invalidRequestParameterValue" />"</ctl:message>
				<xsl:variable name="requestInvalidRequestKeyValue">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$serviceURL"/>
							</ctl:url>
							<ctl:body>
								<lkasjflksadjflkjasdf service="SPS" version="2.0.0"
									xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" 
									xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" 
									xmlns:sps="http://www.opengis.net/sps/2.0" 
									xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"></lkasjflksadjflkjasdf>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateExceptionReportSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<xsl:if test="$GetCapabilities_GET">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="request"><xsl:value-of select="$invalidRequestParameterValue" /></ctl:param>
								<ctl:param name="service">SPS</ctl:param>
								<ctl:param name="version">2.0.0</ctl:param>
								<ctl:call-function name="spsFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:if>
						<xsl:if test="not($GetCapabilities_GET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<lkasjflksadjflkjasdf service="SPS" version="2.0.0"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" 
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" 
										xmlns:sps="http://www.opengis.net/sps/2.0" 
										xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"></lkasjflksadjflkjasdf>
								</ctl:body>
								<ctl:call-function name="spsFunctions:validateExceptionReport" />
							</ctl:request>
						</xsl:if>
					</xsl:if>
				</xsl:variable>
				<ctl:message>The server returned the following response:  <xsl:value-of select="$requestInvalidRequestKeyValue/*" /></ctl:message>
				<xsl:choose>
					<xsl:when test="not($requestInvalidRequestKeyValue/*)">
						<ctl:message>FAILURE:  The server did not return or a response, or the response was not a valid exception report.</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$PostEncodingIsSOAP=string('true')">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($requestInvalidRequestKeyValue)" /></ctl:message>
						</xsl:if>
						<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($requestInvalidRequestKeyValue)" /></ctl:message>
						</xsl:if>
						<ctl:message>Checking the validity of the response to a GetCapabilities request with an invalid request value.</ctl:message>
						<xsl:variable name="isCorrect1">
							<ctl:call-function name="spsFunctions:checkExceptionReport">
								<ctl:with-param name="exceptionReport" select="$requestInvalidRequestKeyValue" />
								<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
								<ctl:with-param name="locatorToCheck" select="string('Request')" />
								<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
							</ctl:call-function>
						</xsl:variable>
						<xsl:variable name="isCorrect2">
							<ctl:call-function name="spsFunctions:checkExceptionReport">
								<ctl:with-param name="exceptionReport" select="$requestInvalidRequestKeyValue" />
								<ctl:with-param name="exceptionCodeToCheck" select="string('OperationNotSupported')" />
								<ctl:with-param name="locatorToCheck" select="$invalidRequestParameterValue" />
								<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
							</ctl:call-function>
						</xsl:variable>
						<xsl:variable name="isCorrect" select="$isCorrect1 or $isCorrect2" />
						<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
						<xsl:if test="not(xsd:boolean($isCorrect))">
							<ctl:message>FAILURE:  The response to a GetCapabilities request with an invalid request parameter (<xsl:value-of select="$invalidRequestParameterValue" />) does not match the expected response.  The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" or "OperationNotSupported".</ctl:message>
							<ctl:fail />
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.GetCapabilities-ResponseOperationMetadataMandatoryOperations.1">
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:assertion>The OperationsMetadata section lists the mandatory operations of the SPS.</ctl:assertion>
			<ctl:comment>Pass if the service lists the GetCapabilities, DescribeSensor, DescribeTasking, Submit, GetStatus, GetTask and DescribeResultAccess operations with the proper bindings in the OperationsMetadata section; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that the OperationsMetadata section advertises the mandatory operations of the SPS.">docs/SPS%202.0%20ATS.html#SPS.GetCapabilities-ResponseOperationMetadataMandatoryOperations</ctl:link>
			<ctl:code>
				<ctl:message>$getCapabilitiesResponse:<xsl:value-of select="$getCapabilitiesResponse" /></ctl:message>
				<!--Check for a GetCapabilities operation-->
				<xsl:variable name="getCapabilitiesElement" select="$getCapabilitiesResponse//ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']" />
				<xsl:variable name="getCapabilitiesGetHref">
					<xsl:value-of select="$getCapabilitiesElement/ows:DCP/ows:HTTP/ows:Get/@xlink:href" />
				</xsl:variable>
				<ctl:message>Checking for a GetCapabilities operation...</ctl:message>
				<xsl:if test="not($getCapabilitiesElement/*)">
					<ctl:message>FAILURE:  The GetCapabilities operation is a mandatory operation.  Therefore, it must be listed in the OperationsMetadata section of the GetCapabilities document.</ctl:message>
					<ctl:fail />
				</xsl:if>
				<!--  HTTP GET is not required
				<xsl:if test="not($getCapabilitiesGetHref) or string-length(normalize-space($getCapabilitiesGetHref))=0">
					<ctl:message>FAILURE:  The GetCapabilities operation is a mandatory operation.  Therefore, a URL must be supplied for the HTTP GET binding for this operation.  No URL was supplied for this binding.</ctl:message>
					<ctl:fail />
				</xsl:if>
				-->
				<!--Check for a DescribeSensor operation--> 
				<xsl:variable name="describeSensorElement" select="$getCapabilitiesResponse//ows:OperationsMetadata/ows:Operation[@name='DescribeSensor']" />
				<xsl:variable name="describeSensorPostHref">
					<xsl:value-of select="$describeSensorElement/ows:DCP/ows:HTTP/ows:Post/@xlink:href" />
				</xsl:variable>
				<ctl:message>Checking for a DescribeSensor operation...</ctl:message>
				<xsl:if test="not($describeSensorElement/*)">
					<ctl:message>FAILURE:  The DescribeSensor operation is a mandatory operation.  Therefore, it must be listed in the OperationsMetadata section of the GetCapabilities document.</ctl:message>
					<ctl:fail />
				</xsl:if>
				<xsl:if test="not($describeSensorPostHref) or string-length(normalize-space($describeSensorPostHref))=0">
					<ctl:message>FAILURE:  The DescribeSensor operation is a mandatory operation.  Therefore, a URL must be supplied for the HTTP POST binding for this operation.  No URL was supplied for this binding.</ctl:message>
					<ctl:fail />
				</xsl:if>

				<!--Check for a DescribeTasking operation-->
				<xsl:variable name="describeTaskingElement" select="$getCapabilitiesResponse//ows:OperationsMetadata/ows:Operation[@name='DescribeTasking']" />
				<xsl:variable name="describeTaskingPostHref">
					<xsl:value-of select="$describeTaskingElement/ows:DCP/ows:HTTP/ows:Post/@xlink:href" />
				</xsl:variable>
				<ctl:message>Checking for a DescribeTasking operation...</ctl:message>
				<xsl:if test="not($describeTaskingElement/*)">
					<ctl:message>FAILURE:  The DescribeTasking operation is a mandatory operation.  Therefore, it must be listed in the OperationsMetadata section of the GetCapabilities document.</ctl:message>
					<ctl:fail />
				</xsl:if>
				<xsl:if test="not($describeTaskingPostHref) or string-length(normalize-space($describeTaskingPostHref))=0">
					<ctl:message>FAILURE:  The DescribeTasking operation is a mandatory operation.  Therefore, a URL must be supplied for the HTTP POST binding for this operation.  No URL was supplied for this binding.</ctl:message>
					<ctl:fail />
				</xsl:if>

				<!--Check for a Submit operation-->
				<xsl:variable name="submitElement" select="$getCapabilitiesResponse//ows:OperationsMetadata/ows:Operation[@name='Submit']" />
				<xsl:variable name="submitPostHref">
					<xsl:value-of select="$submitElement/ows:DCP/ows:HTTP/ows:Post/@xlink:href" />
				</xsl:variable>
				<ctl:message>Checking for a Submit operation...</ctl:message>
				<xsl:if test="not($submitElement/*)">
					<ctl:message>FAILURE:  The Submit operation is a mandatory operation.  Therefore, it must be listed in the OperationsMetadata section of the GetCapabilities document.</ctl:message>
					<ctl:fail />
				</xsl:if>
				<xsl:if test="not($submitPostHref) or string-length(normalize-space($submitPostHref))=0">
					<ctl:message>FAILURE:  The Submit operation is a mandatory operation.  Therefore, a URL must be supplied for the HTTP POST binding for this operation.  No URL was supplied for this binding.</ctl:message>
					<ctl:fail />
				</xsl:if>

				<!--Check for a GetStatus operation-->
				<xsl:variable name="getStatusElement" select="$getCapabilitiesResponse//ows:OperationsMetadata/ows:Operation[@name='GetStatus']" />
				<xsl:variable name="getStatusPostHref">
					<xsl:value-of select="$getStatusElement/ows:DCP/ows:HTTP/ows:Post/@xlink:href" />
				</xsl:variable>
				<ctl:message>Checking for a GetStatus operation...</ctl:message>
				<xsl:if test="not($getStatusElement/*)">
					<ctl:message>FAILURE:  The GetStatus operation is a mandatory operation.  Therefore, it must be listed in the OperationsMetadata section of the GetCapabilities document.</ctl:message>
					<ctl:fail />
				</xsl:if>
				<xsl:if test="not($getStatusPostHref) or string-length(normalize-space($getStatusPostHref))=0">
					<ctl:message>FAILURE:  The GetStatus operation is a mandatory operation.  Therefore, a URL must be supplied for the HTTP POST binding for this operation.  No URL was supplied for this binding.</ctl:message>
					<ctl:fail />
				</xsl:if>

				<!--Check for a GetTask operation-->
				<xsl:variable name="getTaskElement" select="$getCapabilitiesResponse//ows:OperationsMetadata/ows:Operation[@name='GetTask']" />
				<xsl:variable name="getTaskPostHref">
					<xsl:value-of select="$getTaskElement/ows:DCP/ows:HTTP/ows:Post/@xlink:href" />
				</xsl:variable>
				<ctl:message>Checking for a GetTask operation...</ctl:message>
				<xsl:if test="not($getTaskElement/*)">
					<ctl:message>FAILURE:  The GetTask operation is a mandatory operation.  Therefore, it must be listed in the OperationsMetadata section of the GetCapabilities document.</ctl:message>
					<ctl:fail />
				</xsl:if>
				<xsl:if test="not($getTaskPostHref) or string-length(normalize-space($getTaskPostHref))=0">
					<ctl:message>FAILURE:  The GetTask operation is a mandatory operation.  Therefore, a URL must be supplied for the HTTP POST binding for this operation.  No URL was supplied for this binding.</ctl:message>
					<ctl:fail />
				</xsl:if>

				<!--Check for a DescribeResultAccess operation-->
				<xsl:variable name="describeResultAccessElement" select="$getCapabilitiesResponse//ows:OperationsMetadata/ows:Operation[@name='DescribeResultAccess']" />
				<xsl:variable name="describeResultAccessPostHref">
					<xsl:value-of select="$describeResultAccessElement/ows:DCP/ows:HTTP/ows:Post/@xlink:href" />
				</xsl:variable>
				<ctl:message>Checking for a DescribeResultAccess operation...</ctl:message>                
				<xsl:if test="not($describeResultAccessElement/*)">
					<ctl:message>FAILURE:  The DescribeResultAccess operation is a mandatory operation.  Therefore, it must be listed in the OperationsMetadata section of the GetCapabilities document.</ctl:message>
					<ctl:fail />
				</xsl:if>
				<xsl:if test="not($describeResultAccessPostHref) or string-length(normalize-space($describeResultAccessPostHref))=0">
					<ctl:message>FAILURE:  The DescribeResultAccess operation is a mandatory operation.  Therefore, a URL must be supplied for the HTTP POST binding for this operation.  No URL was supplied for this binding.</ctl:message>
					<ctl:fail />
				</xsl:if>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.GetCapabilities-ResponseOperationMetadataOptionalOperations.1">
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:assertion>Any non-mandatory operations advertised in the OperationsMetadata section have valid SPS method names.</ctl:assertion>
			<ctl:comment>Pass if the service lists operations in addition to the mandatory operations, and each of the advertised operations has a valid SPS operation name; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that any non-mandatory operations listed in the OperationsMetadata section are valid SPS operation names.  This is still up for debate and will probably not be part of the final tests.">docs/SPS%202.0%20ATS.html#SPS.GetCapabilities-ResponseOperationMetadataOptionalOperations</ctl:link>
			<ctl:code>
				<!--PUT TEST CODE HERE-->
				<!--
				1.)  Using the GetCapabilities response from above, check to see if the additional methods listed in the OperationsMetadata section are valid SPS method names.
				-->
				<xsl:variable name="spsOperations">
					<spsTesting:SPSOperations>
						<spsTesting:Operation>GetCapabilities</spsTesting:Operation>
						<spsTesting:Operation>DescribeSensor</spsTesting:Operation>
						<spsTesting:Operation>DescribeTasking</spsTesting:Operation>
						<spsTesting:Operation>Submit</spsTesting:Operation>
						<spsTesting:Operation>GetStatus</spsTesting:Operation>
						<spsTesting:Operation>GetTask</spsTesting:Operation>
						<spsTesting:Operation>DescribeResultAccess</spsTesting:Operation>
						<spsTesting:Operation>Reserve</spsTesting:Operation>
						<spsTesting:Operation>Confirm</spsTesting:Operation>
						<spsTesting:Operation>GetFeasibility</spsTesting:Operation>
						<spsTesting:Operation>Update</spsTesting:Operation>
						<spsTesting:Operation>Cancel</spsTesting:Operation>
						<spsTesting:Operation>UpdateSensorDescription</spsTesting:Operation>
					</spsTesting:SPSOperations>
				</xsl:variable>
				<xsl:variable name="spsOperationsSet" select="$spsOperations//spsTesting:Operation" />
				<ctl:message>Verifying that the provided operations have valid SPS operation names.</ctl:message>
				<xsl:for-each select="$getCapabilitiesResponse//ows:OperationsMetadata/ows:Operation/@name">
					<ctl:message>Checking "<xsl:value-of select="." />" for validity.</ctl:message>
					<xsl:choose>
						<xsl:when test="empty(index-of($spsOperationsSet,.))">
							<ctl:message>FAILURE:  The "<xsl:value-of select="." />" operation is not listed in the SPS specification.</ctl:message>
							<ctl:fail />
						</xsl:when>
						<xsl:otherwise>
							<ctl:message><xsl:value-of select="." /> is a valid SPS operation name.</ctl:message>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:for-each>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.GetCapabilities-ResponseSPSContect.1">
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:assertion>There must be a minStatusTime in SPSContect tag, and there are one or more supportedEncoding which value is designated .</ctl:assertion>
			<ctl:comment>Pass if 1.SPSContent has just one sub-element "minStatusTime" 2.SPSContent has one or more sub-element "supportedEncoding" 3.sub-element "supportedEncoding" have only three Specified choice.</ctl:comment>
			<ctl:link title="SPSContect."></ctl:link>
			<ctl:code>
				<xsl:variable name="SPSContent" select="$getCapabilitiesResponse//sps:contents/sps:SPSContents" />
				<xsl:variable name="Count_minStatusTime" select="count($SPSContent/sps:minStatusTime)" />
				<xsl:if test="(Count_minStatusTime=0) or (Count_minStatusTime>1)">
					<ctl:message>FAILURE:  There can be only one minStatusTime element.</ctl:message>
					<ctl:fail />
				</xsl:if>
				<xsl:variable name="Count_supportedEncoding" select="count($SPSContent/sps:supportedEncoding)" />
				<xsl:choose>
					<xsl:when test="Count_supportedEncoding=0">
						<ctl:message>FAILURE:  At least one supportedEncoding element in SPSContent.</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<xsl:variable name="supportedEncodingValues">
							<spsTesting:supportedEncoding>
								<spsTesting:Value>http://www.opengis.net/swe/2.0/TextEncoding</spsTesting:Value>
								<spsTesting:Value>http://www.opengis.net/swe/2.0/XMLEncoding</spsTesting:Value>
								<spsTesting:Value>http://www.opengis.net/swe/2.0/BinaryEncoding</spsTesting:Value>
							</spsTesting:supportedEncoding>
						</xsl:variable>			
						<xsl:variable name="supportedEncodingset" select="$supportedEncodingValues//spsTesting:Value" />
						<xsl:for-each select="$getCapabilitiesResponse//sps:contents/sps:SPSContents/sps:supportedEncoding">
							<xsl:if test="empty(index-of($supportedEncodingset,.))">
								<ctl:message>FAILURE:  The value of supportedEncoding "<xsl:value-of select="." />" is not allow.</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:for-each>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.GetCapabilities-ResponseContentsSensorOfferings.1">
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:assertion>Each SensorOffering sub-element (procedure, procedureDescriptionFormat, observableProperty, and observableArea) has a value. There are one byPoint or one byPolygon in observableArea.</ctl:assertion>
			<ctl:comment>Pass if each sub-element of a SensorOffering element has a value; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that each SensorOffering has appropriate values for its sub-elements.">docs/SPS%202.0%20ATS.html#SPS.GetCapabilities-ResponseContentsSensorOfferings</ctl:link>
			<ctl:code>
				<!-- 檢查是否在 sps:SPSContents 下是否有 observableProperty 和 observableProperty 標籤 -->
				<xsl:variable name="procedureDescriptionFormat_UpLevel"><xsl:if test="$getCapabilitiesResponse//sps:contents/sps:SPSContents/swes:procedureDescriptionFormat">true</xsl:if></xsl:variable>
				<xsl:variable name="observableProperty_UpLevel"><xsl:if test="$getCapabilitiesResponse//sps:contents/sps:SPSContents/swes:observableProperty">true</xsl:if></xsl:variable>
				<xsl:for-each select="$getCapabilitiesResponse//sps:contents/sps:SPSContents/swes:offering/sps:SensorOffering">
					<xsl:variable name="procedureDescriptionFormat" select="swes:procedureDescriptionFormat" />
					<xsl:variable name="observableProperty" select="swes:observableProperty" />
					<xsl:variable name="procedure" select="swes:procedure" />
					<xsl:variable name="observableArea" select="sps:observableArea" />
					<xsl:choose>
						<xsl:when test="not($procedureDescriptionFormat) and ($procedureDescriptionFormat_UpLevel='') ">
							<ctl:message>FAILURE:  The procedureDescriptionFormat value for SensorOffering is null.</ctl:message>
							<ctl:fail />
						</xsl:when>
						<xsl:when test="not($observableProperty) and ($observableProperty_UpLevel='') ">
							<ctl:message>FAILURE:  The procedureDescriptionFormat value for SensorOffering is null.</ctl:message>
							<ctl:fail />
						</xsl:when>
						<xsl:when test="not($procedure)">
							<ctl:message>FAILURE:  The AreaOfService value for SensorOffering is null.</ctl:message>
							<ctl:fail />
						</xsl:when>
						<xsl:when test="not($observableArea/*)">
							<ctl:message>FAILURE:  The observableArea value for SensorOffering is null.</ctl:message>
							<ctl:fail />
						</xsl:when>
						<xsl:otherwise>
							<ctl:message>Checking observableArea value for validity...</ctl:message>
							<xsl:variable name="Count_byPoint" select="count($observableArea/sps:byPoint)" />
							<xsl:variable name="Count_byPolygon" select="count($observableArea/sps:byPolygon)" />
							<xsl:choose>
								<xsl:when test="(Count_byPoint+Count_byPolygon)= 0">
									<ctl:message>FAILURE:  There are at least one PointOrPolygon in observableArea. "sps:byPoint" or "sps:byPolygon" choose one.</ctl:message>
									<ctl:fail />
								</xsl:when>
								<xsl:when test="(Count_byPoint+Count_byPolygon) >= 2">
									<ctl:message>FAILURE: The PointOrPolygon in observableArea can only have one. "sps:byPoint" or "sps:byPolygon" choose one.</ctl:message>
									<ctl:fail />
								</xsl:when>
								<xsl:otherwise>
									<ctl:message>OK: The validity of SensorOffering in contents is ok.</ctl:message>
								</xsl:otherwise>
								<!--
									<xsl:when test="$areaOfService/ows:WGS84BoundingBox">
										<ctl:message>ows:WGS84BoundingBox element found.  Performing ows:WGS84BoundingBox related tests.</ctl:message>
										<xsl:variable name="wgs84BoundingBox" select="$areaOfService/ows:WGS84BoundingBox" />
										<ctl:message>Checking "<xsl:value-of select="spsFunctions:printBoundingBox($wgs84BoundingBox)" />" for validity...</ctl:message>
										<xsl:variable name="isWGS84BoundingBoxValid">
											<ctl:call-function name="spsFunctions:checkWGS84BoundingBox">
												<ctl:with-param name="wgs84BoundingBoxToCheck" select="$wgs84BoundingBox" />
											</ctl:call-function>
										</xsl:variable>
										<ctl:message>The ows:WGS84BoundingBox validity check returned:  <xsl:value-of select="$isWGS84BoundingBoxValid" /></ctl:message>
										<xsl:if test="not(xsd:boolean($isWGS84BoundingBoxValid))">
											<ctl:message>FAILURE:  The WGS84BoundingBox provided in the AreaOfService element for sensorID "<xsl:value-of select="$sensorID" />" is not a valid WGS84BoundingBox.</ctl:message>
											<ctl:fail />
										</xsl:if>
									</xsl:when>
									<xsl:when test="$areaOfService/ows:BoundingBox">
										<ctl:message>ows:BoundingBox element found.  Performing ows:BoundingBox related tests.</ctl:message>
										<xsl:variable name="boundingBox" select="$areaOfService/ows:BoundingBox" />
										<ctl:message>Checking "<xsl:value-of select="spsFunctions:printBoundingBox($boundingBox)" />" for validity...</ctl:message>
										<xsl:variable name="isBoundingBoxValid">
											<ctl:call-function name="spsFunctions:checkBoundingBox">
												<ctl:with-param name="boundingBoxToCheck" select="$boundingBox" />
											</ctl:call-function>
										</xsl:variable>
										<ctl:message>The ows:BoundingBox validity check returned:  <xsl:value-of select="$isBoundingBoxValid" /></ctl:message>
										<xsl:if test="not(xsd:boolean($isBoundingBoxValid))">
											<ctl:message>FAILURE:  The BoundingBox provided in the AreaOfService element for sensorID "<xsl:value-of select="$sensorID" />" is not a valid BoundingBox.</ctl:message>
											<ctl:fail />
										</xsl:if>
									</xsl:when>
									<xsl:when test="$areaOfService/gml:Polygon">
										<ctl:message>gml:Polygon element found.  Performing gml:Polygon related tests.</ctl:message>
										<xsl:for-each select="$areaOfService/gml:Polygon//gml:pos">
											<xsl:variable name="pos" select="." />
											<ctl:message>Checking "<xsl:value-of select="$pos" />" for validity...</ctl:message>
											<xsl:variable name="isPosValid">
												<ctl:call-function name="spsFunctions:checkPosition">
													<ctl:with-param name="positionToCheck" select="$pos" />
												</ctl:call-function>
											</xsl:variable>
											<ctl:message>The validity check for <xsl:value-of select="$pos" /> returned:  <xsl:value-of select="$isPosValid" /></ctl:message>
											<xsl:if test="not(xsd:boolean($isPosValid))">
												<ctl:message>FAILURE:  The gml:pos element provided in the AreaOfService element for sensorID "<xsl:value-of select="$sensorID" />" is not in a valid format.</ctl:message>
												<ctl:fail />
											</xsl:if>
										</xsl:for-each>
									</xsl:when>
									<xsl:when test="$areaOfService/gml:pos">
										<ctl:message>gml:pos element found.  Performing gml:pos related tests.</ctl:message>
										<xsl:variable name="pos" select="$areaOfService/gml:pos" />
										<ctl:message>Checking "<xsl:value-of select="$pos" />" for validity...</ctl:message>
										<xsl:variable name="isPosValid">
											<ctl:call-function name="spsFunctions:checkPosition">
												<ctl:with-param name="positionToCheck" select="$pos" />
											</ctl:call-function>
										</xsl:variable>
										<ctl:message>The gml:pos validity check returned:  <xsl:value-of select="$isPosValid" /></ctl:message>
										<xsl:if test="not(xsd:boolean($isPosValid))">
											<ctl:message>FAILURE:  The gml:pos element provided in the AreaOfService element for sensorID "<xsl:value-of select="$sensorID" />" is not in a valid format.</ctl:message>
											<ctl:fail />
										</xsl:if>
									</xsl:when>
									<xsl:otherwise>
										<ctl:message>gml:Solid element found.  Performing gml:Solid related tests.This is a gml:Solid; only check gml:pos elements for validity.</ctl:message>
										<xsl:for-each select="$areaOfService/gml:Solid//gml:pos">
											<xsl:variable name="pos" select="." />
											<ctl:message>Checking "<xsl:value-of select="$pos" />" for validity...</ctl:message>
											<xsl:variable name="isPosValid">
												<ctl:call-function name="spsFunctions:checkPosition">
													<ctl:with-param name="positionToCheck" select="$pos" />
												</ctl:call-function>
											</xsl:variable>
											<ctl:message>The validity check for <xsl:value-of select="$pos" /> returned:  <xsl:value-of select="$isPosValid" /></ctl:message>
											<xsl:if test="not(xsd:boolean($isPosValid))">
												<ctl:message>FAILURE:  The gml:pos element provided in the AreaOfService element for sensorID "<xsl:value-of select="$sensorID" />" is not in a valid format.</ctl:message>
												<ctl:fail />
											</xsl:if>
										</xsl:for-each>
									</xsl:otherwise>
								-->
							</xsl:choose>
						</xsl:otherwise>
					</xsl:choose>
					<!--Check Phenomenon (for an empty string or an invalid URN?)
					<ctl:message>Checking Phenomenon <xsl:value-of select="$phenomenon" /> for validity...</ctl:message>
					<xsl:if test="string-length($phenomenon)=0 or not(xsd:boolean(spsFunctions:validateURN($phenomenon)))">
						<ctl:message>FAILURE:  The Phenomenon value for SensorOffering with SensorID <xsl:value-of select="$sensorID" /> is null or is not a valid URN.</ctl:message>
						<ctl:fail />
					</xsl:if>-->
					<!--Check SensorDefinition (for an empty string)
					<ctl:message>Checking SensorDefinition <xsl:value-of select="$sensorDefinition" /> for validity...</ctl:message>
					<xsl:if test="string-length($sensorDefinition)=0">
						<ctl:message>FAILURE:  The SensorDefinition value for SensorOffering with SensorID <xsl:value-of select="$sensorID" /> is null.</ctl:message>
						<ctl:fail />
					</xsl:if>-->
					<!--Check SensorID (for an empty string or an invalid URN?)
					<ctl:message>Checking SensorID <xsl:value-of select="$sensorID" /> for validity...</ctl:message>
					<xsl:if test="string-length($sensorID)=0 or not(xsd:boolean(spsFunctions:validateGenericURN($sensorID)))">
						<ctl:message>FAILURE:  A SensorID value is null or is not a valid URN.</ctl:message>
						<ctl:fail />
					</xsl:if>-->
				</xsl:for-each>
			</ctl:code>
		</ctl:test>

		<ctl:test name="sps:core-SPS.GetCapabilities-PostRequestNoService.1"><!-- no use -->
			<ctl:param name="serviceURL" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>Send a request without parameter "service",and the response must be a valid exception with code "MissingParameterValue" and locator "service". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "service"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="getCapabilitiesResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$serviceURL"/>
							</ctl:url> 
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:GetCapabilities
									xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" 
									xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" 
									xmlns:sps="http://www.opengis.net/sps/2.0" 
									xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"></sps:GetCapabilities>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateExceptionReportSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$serviceURL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:GetCapabilities
									xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" 
									xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" 
									xmlns:sps="http://www.opengis.net/sps/2.0" 
									xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"></sps:GetCapabilities>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateExceptionReport" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getCapabilitiesResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetCapabilities response schema for "SPS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<!-- 只檢查是否有回應 以及首個元素tag是否正確 -->
						<xsl:variable name="ResponseRoot" select="local-name-from-QName(node-name($getCapabilitiesResponse/*[1]))" />
						<xsl:variable name="TargetRoot" select="string('Capabilities')" />
						<xsl:if test="not($ResponseRoot=$TargetRoot)">
							<ctl:message>The root of response "<xsl:value-of select="$ResponseRoot" />" doesn't match the expected root "<xsl:value-of select="$TargetRoot" />".</ctl:message>
							<ctl:fail/>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.GetCapabilities-PostRequestNullService.1">
			<ctl:param name="serviceURL" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>Send a request with null parameter "service",and the response must be a valid exception with code "MissingParameterValue" and locator "service". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "service"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="getCapabilitiesResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$serviceURL"/>
							</ctl:url> 
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:GetCapabilities service=""
									xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" 
									xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" 
									xmlns:sps="http://www.opengis.net/sps/2.0" 
									xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"></sps:GetCapabilities>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateExceptionReportSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$serviceURL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:GetCapabilities service=""
									xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" 
									xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" 
									xmlns:sps="http://www.opengis.net/sps/2.0" 
									xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"></sps:GetCapabilities>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateExceptionReport" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getCapabilitiesResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetCapabilities response schema for "SPS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$getCapabilitiesResponse/*">
							<xsl:if test="$PostEncodingIsSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($getCapabilitiesResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($getCapabilitiesResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetCapabilities request with null service parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="spsFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$getCapabilitiesResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('service')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetCapabilities request with null service parameter specified.</ctl:message>  
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "service".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.GetCapabilities-PostRequestInvalidService.1">
			<ctl:param name="serviceURL" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>Send a request with invalid parameter "service",and the response must be a valid exception with code "InvalidParameterValue" and locator "service". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "service"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="getCapabilitiesResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$serviceURL"/>
							</ctl:url> 
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:GetCapabilities service="999"
									xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" 
									xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" 
									xmlns:sps="http://www.opengis.net/sps/2.0" 
									xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"></sps:GetCapabilities>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateExceptionReportSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$serviceURL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:GetCapabilities service="999"
									xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" 
									xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" 
									xmlns:sps="http://www.opengis.net/sps/2.0" 
									xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"></sps:GetCapabilities>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateExceptionReport" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getCapabilitiesResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetCapabilities response schema for "SPS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$getCapabilitiesResponse/*">
							<xsl:if test="$PostEncodingIsSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($getCapabilitiesResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($getCapabilitiesResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetCapabilities request with invalid service parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="spsFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$getCapabilitiesResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('service')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetCapabilities request with invalid service parameter specified. </ctl:message> 
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "service".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.GetCapabilities-PostRequestNoVersion.1"><!-- no use -->
			<ctl:param name="serviceURL" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>Send a request without parameter "acceptVersions",and the response must be a valid exception with code "MissingParameterValue" and locator "acceptVersions". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "acceptVersions"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="getCapabilitiesResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$serviceURL"/>
							</ctl:url> 
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:GetCapabilities
									xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" 
									xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" 
									xmlns:sps="http://www.opengis.net/sps/2.0" 
									xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"></sps:GetCapabilities>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateExceptionReportSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$serviceURL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:GetCapabilities
									xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" 
									xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" 
									xmlns:sps="http://www.opengis.net/sps/2.0" 
									xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"></sps:GetCapabilities>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateExceptionReport" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getCapabilitiesResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetCapabilities response schema for "SPS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<!-- 只檢查是否有回應 以及首個元素tag是否正確 -->
						<xsl:variable name="ResponseRoot" select="local-name-from-QName(node-name($getCapabilitiesResponse/*[1]))" />
						<xsl:variable name="TargetRoot" select="string('Capabilities')" />
						<xsl:if test="not($ResponseRoot=$TargetRoot)">
							<ctl:message>The root of response "<xsl:value-of select="$ResponseRoot" />" doesn't match the expected root "<xsl:value-of select="$TargetRoot" />".</ctl:message>
							<ctl:fail/>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.GetCapabilities-PostRequestNullVersion.1"><!-- Schema Error ...So Skip this test -->
			<ctl:param name="serviceURL" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>Send a request with null element "acceptVersions",and the response must be a valid exception with code "MissingParameterValue" and locator "acceptVersions". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "acceptVersions"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="getCapabilitiesResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$serviceURL"/>
							</ctl:url> 
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:GetCapabilities
									xmlns:ows="http://www.opengis.net/ows/1.1"
									xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" 
									xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" 
									xmlns:sps="http://www.opengis.net/sps/2.0" 
									xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<ows:AcceptVersions>
										<ows:Version></ows:Version>
									</ows:AcceptVersions>
								</sps:GetCapabilities>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateExceptionReportSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$serviceURL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:GetCapabilities 
									xmlns:ows="http://www.opengis.net/ows/1.1"
									xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" 
									xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" 
									xmlns:sps="http://www.opengis.net/sps/2.0" 
									xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<ows:AcceptVersions>
										<ows:Version></ows:Version>
									</ows:AcceptVersions>
								</sps:GetCapabilities>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateExceptionReport" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getCapabilitiesResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetCapabilities response schema for "SPS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$getCapabilitiesResponse/*">
							<xsl:if test="$PostEncodingIsSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($getCapabilitiesResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($getCapabilitiesResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetCapabilities request with invalid acceptVersions parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="spsFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$getCapabilitiesResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('acceptVersions')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetCapabilities request with null acceptVersions parameter specified.</ctl:message>  
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "acceptVersions".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.GetCapabilities-PostRequestInvalidVersion.1">
			<ctl:param name="serviceURL" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>Send a request with invalid parameter "acceptVersions",and the response must be a valid exception with code "VersionNegotiationFailed" and omit the locator parameter. </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "VersionNegotiationFailed" and no locator parameter; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="getCapabilitiesResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$serviceURL"/>
							</ctl:url> 
							<ctl:body>
								<sps:GetCapabilities 
									xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" 
									xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" 
									xmlns:sps="http://www.opengis.net/sps/2.0" 
									xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<ows:AcceptVersions>
										<ows:Version>999.999.999</ows:Version>
									</ows:AcceptVersions>
								</sps:GetCapabilities>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateExceptionReportSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$serviceURL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:GetCapabilities
									xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" 
									xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" 
									xmlns:sps="http://www.opengis.net/sps/2.0" 
									xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<ows:AcceptVersions>
										<ows:Version>999.999.999</ows:Version>
									</ows:AcceptVersions>
								</sps:GetCapabilities>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateExceptionReport" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getCapabilitiesResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetCapabilities response schema for "SPS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$getCapabilitiesResponse/*">
							<xsl:if test="$PostEncodingIsSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($getCapabilitiesResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($getCapabilitiesResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a GetCapabilities request with invalid acceptVersions parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="spsFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$getCapabilitiesResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('VersionNegotiationFailed')" />
									<ctl:with-param name="locatorToCheck" select="string('*')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a GetCapabilities request with invalid acceptVersions parameter specified. </ctl:message> 
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "VersionNegotiationFailed" and omit the locator parameter.</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.GetCapabilities-PostRequestNormal">
			<ctl:param name="serviceURL" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>Send a valid request ,and the response must be a valid Capabilities response. </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid Capabilities response; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<xsl:variable name="getCapabilitiesResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$serviceURL"/>
							</ctl:url>
							<ctl:body>
								<sps:GetCapabilities service="SPS"
									xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" 
									xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" 
									xmlns:sps="http://www.opengis.net/sps/2.0" 
									xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<ows:AcceptVersions>
										<ows:Version>2.0.0</ows:Version>
									</ows:AcceptVersions>
								</sps:GetCapabilities>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateGetCapabilitiesResponseSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$serviceURL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:GetCapabilities service="SPS"
									xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" 
									xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" 
									xmlns:sps="http://www.opengis.net/sps/2.0" 
									xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<ows:AcceptVersions>
										<ows:Version>2.0.0</ows:Version>
									</ows:AcceptVersions>
								</sps:GetCapabilities>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateGetCapabilitiesResponse" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($getCapabilitiesResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetCapabilities response schema for "SPS".</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<!-- 只檢查是否有回應 以及首個元素tag是否正確 -->
						<xsl:variable name="ResponseRoot" select="local-name-from-QName(node-name($getCapabilitiesResponse/*[1]))" />
						<xsl:variable name="TargetRoot" select="string('Capabilities')" />
						<xsl:if test="not($ResponseRoot=$TargetRoot)">
							<ctl:message>The root of response "<xsl:value-of select="$ResponseRoot" />" doesn't match the expected root "<xsl:value-of select="$TargetRoot" />".</ctl:message>
							<ctl:fail/>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
	</ctl:package>

	<ctl:package><!--DescribeSensor tests -->
		<ctl:test name="sps:core-SPS.DescribeSensor">
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:param name="DescribeSensor_URL" />
			<ctl:assertion>Execute DescribeSensor Test.</ctl:assertion>
			<ctl:comment>Pass if all the subtest not fail; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that the server handles missing parameters correctly.">docs/SPS%202.0%20ATS.html#SPS.DescribeSensor</ctl:link>
			<ctl:code>
				<ctl:message>DescribeSensor URL:  <xsl:value-of select="$DescribeSensor_URL" /></ctl:message>
				<xsl:if test="string-length(normalize-space($DescribeSensor_URL))>0">
					<ctl:message>*********************************</ctl:message>
					<ctl:message>*Running DescribeSensor tests...*</ctl:message>
					<ctl:message>*********************************</ctl:message>
					<!-- 0.1 request no service -->
					<ctl:call-test name="sps:core-SPS.DescribeSensor-RequestNoService.1">
						<ctl:with-param name="DescribeSensor_URL" select="$DescribeSensor_URL" />
						<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
						<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
					</ctl:call-test>
					<ctl:message>**********************************************************************</ctl:message>
					<!-- 0.2 request null service -->
					<ctl:call-test name="sps:core-SPS.DescribeSensor-RequestNullService.1">
						<ctl:with-param name="DescribeSensor_URL" select="$DescribeSensor_URL" />
						<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
						<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
					</ctl:call-test>
					<ctl:message>**********************************************************************</ctl:message>
					<!-- 0.3 request invalid service -->
					<ctl:call-test name="sps:core-SPS.DescribeSensor-RequestInvalidService.1">
						<ctl:with-param name="DescribeSensor_URL" select="$DescribeSensor_URL" />
						<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
						<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
					</ctl:call-test>
					<ctl:message>**********************************************************************</ctl:message>
					<!-- 0.4 request no version -->
					<ctl:call-test name="sps:core-SPS.DescribeSensor-RequestNoVersion.1">
						<ctl:with-param name="DescribeSensor_URL" select="$DescribeSensor_URL" />
						<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
						<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
					</ctl:call-test>
					<ctl:message>**********************************************************************</ctl:message>
					<!-- 0.5 request null version -->
					<ctl:call-test name="sps:core-SPS.DescribeSensor-RequestNullVersion.1">
						<ctl:with-param name="DescribeSensor_URL" select="$DescribeSensor_URL" />
						<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
						<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
					</ctl:call-test>
					<ctl:message>**********************************************************************</ctl:message>
					<!-- 0.6 request invalid version -->
					<ctl:call-test name="sps:core-SPS.DescribeSensor-RequestInvalidVersion.1">
						<ctl:with-param name="DescribeSensor_URL" select="$DescribeSensor_URL" />
						<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
						<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
					</ctl:call-test>
					<ctl:message>**********************************************************************</ctl:message>
					<!-- 1.1 request no procedure Skip this test because of error schema.
					<ctl:call-test name="sps:core-SPS.DescribeSensor-RequestNoProcedure.1">
						<ctl:with-param name="DescribeSensor_URL" select="$DescribeSensor_URL" />
						<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
						<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
					</ctl:call-test>-->
					<ctl:message>**********************************************************************</ctl:message>
					<!-- 1.2 request null procedure -->
					<ctl:call-test name="sps:core-SPS.DescribeSensor-RequestNullProcedure.1">
						<ctl:with-param name="DescribeSensor_URL" select="$DescribeSensor_URL" />
						<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
						<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
					</ctl:call-test>
					<ctl:message>**********************************************************************</ctl:message>
					<!-- 1.3 request invalid procedure -->
					<ctl:call-test name="sps:core-SPS.DescribeSensor-RequestInvalidProcedure.1">
						<ctl:with-param name="DescribeSensor_URL" select="$DescribeSensor_URL" />
						<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
						<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
					</ctl:call-test>
					<ctl:message>**********************************************************************</ctl:message>
					<!-- 2.1 request no procedureDescriptionFormat Skip this test because of error schema 
					<ctl:call-test name="sps:core-SPS.DescribeSensor-RequestNoProcedureDescriptionFormat.1">
						<ctl:with-param name="DescribeSensor_URL" select="$DescribeSensor_URL" />
						<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
						<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
					</ctl:call-test>-->
					<ctl:message>**********************************************************************</ctl:message>
					<!-- 2.2 request null procedureDescriptionFormat -->
					<ctl:call-test name="sps:core-SPS.DescribeSensor-RequestNullProcedureDescriptionFormat.1">
						<ctl:with-param name="DescribeSensor_URL" select="$DescribeSensor_URL" />
						<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
						<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
					</ctl:call-test>
					<ctl:message>**********************************************************************</ctl:message>
					<!-- 2.3 request invalid procedureDescriptionFormat -->
					<ctl:call-test name="sps:core-SPS.DescribeSensor-RequestInvalidProcedureDescriptionFormat.1">
						<ctl:with-param name="DescribeSensor_URL" select="$DescribeSensor_URL" />
						<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
						<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
					</ctl:call-test>
					<ctl:message>**********************************************************************</ctl:message>
					<!-- 3.1 request invalid validTime Skip this test because of error schema 
					<ctl:call-test name="sps:core-SPS.DescribeSensor-RequestInvalidValidTime.1">
						<ctl:with-param name="DescribeSensor_URL" select="$DescribeSensor_URL" />
						<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
						<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
					</ctl:call-test>-->
					<ctl:message>**********************************************************************</ctl:message>
					<!-- n.response -->
					<ctl:call-test name="sps:core-SPS.DescribeSensor-RequestValidRequest.1">
						<ctl:with-param name="DescribeSensor_URL" select="$DescribeSensor_URL" />
						<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
						<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
					</ctl:call-test>
				</xsl:if>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.DescribeSensor-RequestNoService.1">
			<ctl:param name="DescribeSensor_URL" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>Send a request without parameter "service",and the response must be a valid exception with code "InvalidRequest" and locator "service". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidRequest" and locator is "service"; fail otherwise.</ctl:comment>
			<ctl:link title=""></ctl:link>
			<ctl:code>
				<!-- get a valid procedure-->
				<xsl:variable name="procedure" select="$getCapabilitiesResponse//sps:contents//swes:procedure" />
				<!-- get procedureDescriptionFormat value first-->
				<xsl:variable name="procedureDescriptionFormat" select="$getCapabilitiesResponse//sps:contents//swes:procedureDescriptionFormat" />
				<!-- send request -->
				<xsl:variable name="describeSensorResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$DescribeSensor_URL"/>
							</ctl:url> 
							<ctl:body>
								<swes:DescribeSensor version="2.0.0" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
									<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
								</swes:DescribeSensor>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateExceptionReportSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$DescribeSensor_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<swes:DescribeSensor version="2.0.0" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
									<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
								</swes:DescribeSensor>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateExceptionReport" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($describeSensorResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the DescribeSensor response schema for "SPS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$describeSensorResponse/*">
							<xsl:if test="$PostEncodingIsSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($describeSensorResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($describeSensorResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a DescribeSensor request with no service parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="spsFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$describeSensorResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidRequest')" />
									<ctl:with-param name="locatorToCheck" select="string('Expected attribute: service in element DescribeSensor@http://www.opengis.net/swes/2.0')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a DescribeSensor request with no service parameter specified. </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidRequest" and a locator of "Expected attribute: service in element DescribeSensor@http://www.opengis.net/swes/2.0".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.DescribeSensor-RequestNullService.1">
			<ctl:param name="DescribeSensor_URL" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>Send a request with null parameter "service",and the response must be a valid exception with code "MissingParameterValue" and locator "service". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "service"; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that the server handles no service parameter correctly.">docs/SPS%202.0%20ATS.html#SPS.DescribeSensor-RequestNullService</ctl:link>
			<ctl:code>
				<!-- 取得一個 procedure-->
				<xsl:variable name="procedure" select="$getCapabilitiesResponse//sps:contents//swes:procedure" />
				<!-- get procedureDescriptionFormat value first-->
				<xsl:variable name="procedureDescriptionFormat" select="$getCapabilitiesResponse//sps:contents//swes:procedureDescriptionFormat" />
				<!-- send request -->
				<xsl:variable name="describeSensorResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$DescribeSensor_URL"/>
							</ctl:url> 
							<ctl:body>
								<swes:DescribeSensor service="" version="2.0.0" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
									<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
								</swes:DescribeSensor>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateExceptionReportSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$DescribeSensor_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<swes:DescribeSensor service="" version="2.0.0" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
									<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
								</swes:DescribeSensor>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateExceptionReport" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($describeSensorResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the DescribeSensor response schema for "SPS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$describeSensorResponse/*">
							<xsl:if test="$PostEncodingIsSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($describeSensorResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($describeSensorResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a DescribeSensor request with invalid service parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="spsFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$describeSensorResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('service')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a DescribeSensor request with null service parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "service".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.DescribeSensor-RequestInvalidService.1">
			<ctl:param name="DescribeSensor_URL" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>Send a request with invalid parameter "service",and the response must be a valid exception with code "InvalidParameterValue" and locator "service". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "service"; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that the server handles no procedure parameter correctly.">docs/SPS%202.0%20ATS.html#SPS.DescribeSensor-RequestInvalidService</ctl:link>
			<ctl:code>
				<!-- 取得一個 procedure-->
				<xsl:variable name="procedure" select="$getCapabilitiesResponse//sps:contents//swes:procedure" />
				<!-- get procedureDescriptionFormat value first-->
				<xsl:variable name="procedureDescriptionFormat" select="$getCapabilitiesResponse//sps:contents//swes:procedureDescriptionFormat" />
				<!-- send request -->
				<xsl:variable name="describeSensorResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$DescribeSensor_URL"/>
							</ctl:url> 
							<ctl:body>
								<swes:DescribeSensor service="999" version="2.0.0" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
									<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
								</swes:DescribeSensor>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateExceptionReportSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$DescribeSensor_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<swes:DescribeSensor service="999" version="2.0.0" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
									<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
								</swes:DescribeSensor>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateExceptionReport" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($describeSensorResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the DescribeSensor response schema for "SPS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$describeSensorResponse/*">
							<xsl:if test="$PostEncodingIsSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($describeSensorResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($describeSensorResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a DescribeSensor request with invalid service parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="spsFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$describeSensorResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('service')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a DescribeSensor request with invalid service parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "service".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.DescribeSensor-RequestNoVersion.1">
			<ctl:param name="DescribeSensor_URL" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>Send a request without parameter "version",and the response must be a valid exception with code "InvalidRequest" and locator "version". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidRequest" and locator is "version"; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that the server handles no version parameter correctly.">docs/SPS%202.0%20ATS.html#SPS.DescribeSensor-RequestNoVersion</ctl:link>
			<ctl:code>
				<!-- get a procedure-->
				<xsl:variable name="procedure" select="$getCapabilitiesResponse//sps:contents//swes:procedure" />
				<!-- get procedureDescriptionFormat value first-->
				<xsl:variable name="procedureDescriptionFormat" select="$getCapabilitiesResponse//sps:contents//swes:procedureDescriptionFormat" />
				<!-- send request -->
				<xsl:variable name="describeSensorResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$DescribeSensor_URL"/>
							</ctl:url> 
							<ctl:body>
								<swes:DescribeSensor service="SPS" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
									<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
								</swes:DescribeSensor>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateExceptionReportSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$DescribeSensor_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<swes:DescribeSensor service="SPS" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
									<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
								</swes:DescribeSensor>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateExceptionReport" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($describeSensorResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the DescribeSensor response schema for "SPS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$describeSensorResponse/*">
							<xsl:if test="$PostEncodingIsSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($describeSensorResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($describeSensorResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a DescribeSensor request with no version parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="spsFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$describeSensorResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidRequest')" />
									<ctl:with-param name="locatorToCheck" select="string('Expected attribute: version in element DescribeSensor@http://www.opengis.net/swes/2.0')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a DescribeSensor request with no version parameter specified.</ctl:message>  
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidRequest" and a locator of "Expected attribute: version in element DescribeSensor@http://www.opengis.net/swes/2.0".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.DescribeSensor-RequestNullVersion.1">
			<ctl:param name="DescribeSensor_URL" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>Send a request with null parameter "version",and the response must be a valid exception with code "MissingParameterValue" and locator "version". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "version"; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that the server handles null version parameter correctly.">docs/SPS%202.0%20ATS.html#SPS.DescribeSensor-RequestNullVersion</ctl:link>
			<ctl:code>
				<!-- 取得一個 procedure-->
				<xsl:variable name="procedure" select="$getCapabilitiesResponse//sps:contents//swes:procedure" />
				<!-- get procedureDescriptionFormat value first-->
				<xsl:variable name="procedureDescriptionFormat" select="$getCapabilitiesResponse//sps:contents//swes:procedureDescriptionFormat" />
				<!-- send request -->
				<xsl:variable name="describeSensorResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$DescribeSensor_URL"/>
							</ctl:url> 
							<ctl:body>
								<swes:DescribeSensor service="SPS" version="" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
									<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
								</swes:DescribeSensor>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateExceptionReportSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$DescribeSensor_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<swes:DescribeSensor service="SPS" version="" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
									<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
								</swes:DescribeSensor>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateExceptionReport" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($describeSensorResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the DescribeSensor response schema for "SPS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$describeSensorResponse/*">
							<xsl:if test="$PostEncodingIsSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($describeSensorResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($describeSensorResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a DescribeSensor request with invalid version parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="spsFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$describeSensorResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('version')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a DescribeSensor request with null version parameter specified. </ctl:message> 
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "version".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.DescribeSensor-RequestInvalidVersion.1">
			<ctl:param name="DescribeSensor_URL" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>Send a request with invalid parameter "version",and the response must be a valid exception with code "InvalidParameterValue" and locator "version". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "version"; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that the server handles invalid version parameter correctly.">docs/SPS%202.0%20ATS.html#SPS.DescribeSensor-RequestInvalidVersion</ctl:link>
			<ctl:code>
				<!-- 取得一個 procedure-->
				<xsl:variable name="procedure" select="$getCapabilitiesResponse//sps:contents//swes:procedure" />
				<!-- get procedureDescriptionFormat value first-->
				<xsl:variable name="procedureDescriptionFormat" select="$getCapabilitiesResponse//sps:contents//swes:procedureDescriptionFormat" />
				<!-- send request -->
				<xsl:variable name="describeSensorResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$DescribeSensor_URL"/>
							</ctl:url> 
							<ctl:body>
								<swes:DescribeSensor service="SPS" version="999" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
									<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
								</swes:DescribeSensor>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateExceptionReportSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$DescribeSensor_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<swes:DescribeSensor service="SPS" version="999" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
									<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
								</swes:DescribeSensor>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateExceptionReport" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($describeSensorResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the DescribeSensor response schema for "SPS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$describeSensorResponse/*">
							<xsl:if test="$PostEncodingIsSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($describeSensorResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($describeSensorResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a DescribeSensor request with invalid version parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="spsFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$describeSensorResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('version')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a DescribeSensor request with invalid version parameter specified.</ctl:message>  
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "version".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.DescribeSensor-RequestNoProcedure.1"><!-- Skip this test because of error schema -->
			<ctl:param name="DescribeSensor_URL" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>Send a request without parameter "procedure",and the response must be a valid exception with code "InvalidRequest" and locator "procedure". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidRequest" and locator is "procedure"; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that the server handles no procedure parameter correctly.">docs/SPS%202.0%20ATS.html#SPS.DescribeSensor-RequestNoProcedure</ctl:link>
			<ctl:code>
				<!-- get procedureDescriptionFormat value first-->
				<xsl:variable name="procedureDescriptionFormat" select="$getCapabilitiesResponse//sps:contents//swes:procedureDescriptionFormat" />
				<!-- send request -->
				<xsl:variable name="describeSensorResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$DescribeSensor_URL"/>
							</ctl:url> 
							<ctl:body>
								<swes:DescribeSensor service="SPS" version="2.0.0" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
								</swes:DescribeSensor>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateExceptionReportSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$DescribeSensor_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<swes:DescribeSensor service="SPS" version="2.0.0" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
								</swes:DescribeSensor>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateExceptionReport" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($describeSensorResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the DescribeSensor response schema for "SPS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$describeSensorResponse/*">
							<xsl:if test="$PostEncodingIsSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($describeSensorResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($describeSensorResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a DescribeSensor request with no procedure parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="spsFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$describeSensorResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidRequest')" />
									<ctl:with-param name="locatorToCheck" select="string('Expected element \'procedure@http://www.opengis.net/swes/2.0\' before the end of the content in element DescribeSensor@http://www.opengis.net/swes/2.0;Expected element \'procedure@http://www.opengis.net/swes/2.0\' instead of \'procedureDescriptionFormat@http://www.opengis.net/swes/2.0\' here in element DescribeSensor@http://www.opengis.net/swes/2.0')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a DescribeSensor request with no procedure parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidRequest" and a locator of "procedure".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.DescribeSensor-RequestNullProcedure.1">
			<ctl:param name="DescribeSensor_URL" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>Send a request with null parameter "procedure",and the response must be a valid exception with code "MissingParameterValue" and locator "procedure". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "procedure"; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that the server handles null procedure parameter correctly.">docs/SPS%202.0%20ATS.html#SPS.DescribeSensor-RequestNullProcedure</ctl:link>
			<ctl:code>
				<!-- set a invalid procedure -->
				<xsl:variable name="procedure" select="string('')" />
				<!-- get procedureDescriptionFormat value first-->
				<xsl:variable name="procedureDescriptionFormat" select="$getCapabilitiesResponse//sps:contents//swes:procedureDescriptionFormat" />
				<!-- send request -->
				<xsl:variable name="describeSensorResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$DescribeSensor_URL"/>
							</ctl:url> 
							<ctl:body>
								<swes:DescribeSensor service="SPS" version="2.0.0" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
									<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
								</swes:DescribeSensor>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateExceptionReportSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$DescribeSensor_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<swes:DescribeSensor service="SPS" version="2.0.0" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
									<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
								</swes:DescribeSensor>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateExceptionReport" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($describeSensorResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the DescribeSensor response schema for "SPS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$describeSensorResponse/*">
							<xsl:if test="$PostEncodingIsSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($describeSensorResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($describeSensorResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a DescribeSensor request with invalid procedure parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="spsFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$describeSensorResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('procedure')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a DescribeSensor request with null procedure parameter specified.</ctl:message>  
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "procedure".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.DescribeSensor-RequestInvalidProcedure.1">
			<ctl:param name="DescribeSensor_URL" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>Send a request with invalid parameter "procedure",and the response must be a valid exception with code "InvalidParameterValue" and locator "procedure". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "procedure"; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that the server handles no procedure parameter correctly.">docs/SPS%202.0%20ATS.html#SPS.DescribeSensor-RequestInvalidprocedure</ctl:link>
			<ctl:code>
				<!-- set a invalid procedure -->
				<xsl:variable name="procedure" select="current-dateTime()" />" />
				<!-- get procedureDescriptionFormat value first-->
				<xsl:variable name="procedureDescriptionFormat" select="$getCapabilitiesResponse//sps:contents//swes:procedureDescriptionFormat" />
				<!-- send request -->
				<xsl:variable name="describeSensorResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$DescribeSensor_URL"/>
							</ctl:url> 
							<ctl:body>
								<swes:DescribeSensor service="SPS" version="2.0.0" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
									<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
								</swes:DescribeSensor>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateExceptionReportSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$DescribeSensor_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<swes:DescribeSensor service="SPS" version="2.0.0" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
									<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
								</swes:DescribeSensor>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateExceptionReport" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($describeSensorResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the DescribeSensor response schema for "SPS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$describeSensorResponse/*">
							<xsl:if test="$PostEncodingIsSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($describeSensorResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($describeSensorResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a DescribeSensor request with invalid procedure parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="spsFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$describeSensorResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('procedure')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a DescribeSensor request with invalid procedure parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "procedure".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.DescribeSensor-RequestNoProcedureDescriptionFormat.1"><!-- Skip this test because of error schema -->
			<ctl:param name="DescribeSensor_URL" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>Send a request without parameter "ProcedureDescriptionFormat",and the response must be a valid exception with code "InvalidRequest " and locator "ProcedureDescriptionFormat". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidRequest " and locator is "ProcedureDescriptionFormat"; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that the server handles no ProcedureDescriptionFormat parameter correctly.">docs/SPS%202.0%20ATS.html#SPS.DescribeSensor-RequestNoProcedureDescriptionFormat</ctl:link>
			<ctl:code>
				<!-- 取得一個 procedure-->
				<xsl:variable name="procedure" select="$getCapabilitiesResponse//sps:contents//swes:procedure" />
				<!-- send request -->
				<xsl:variable name="describeSensorResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$DescribeSensor_URL"/>
							</ctl:url> 
							<ctl:body>
								<swes:DescribeSensor service="SPS" version="2.0.0" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
								</swes:DescribeSensor>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateExceptionReportSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$DescribeSensor_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<swes:DescribeSensor service="SPS" version="2.0.0" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
								</swes:DescribeSensor>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateExceptionReport" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($describeSensorResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the DescribeSensor response schema for "SPS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$describeSensorResponse/*">
							<xsl:if test="$PostEncodingIsSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($describeSensorResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($describeSensorResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a DescribeSensor request with no procedureDescriptionFormat parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="spsFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$describeSensorResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidRequest ')" />
									<ctl:with-param name="locatorToCheck" select="string('Expected element \'procedureDescriptionFormat@http://www.opengis.net/swes/2.0\' before the end of the content in element DescribeSensor@http://www.opengis.net/swes/2.0')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a DescribeSensor request with no procedureDescriptionFormat parameter specified. </ctl:message> 
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidRequest " and a locator of "procedureDescriptionFormat".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.DescribeSensor-RequestNullProcedureDescriptionFormat.1">
			<ctl:param name="DescribeSensor_URL" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>Send a request with null parameter "ProcedureDescriptionFormat",and the response must be a valid exception with code "MissingParameterValue" and locator "ProcedureDescriptionFormat". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "MissingParameterValue" and locator is "ProcedureDescriptionFormat"; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that the server handles null ProcedureDescriptionFormat parameter correctly.">docs/SPS%202.0%20ATS.html#SPS.DescribeSensor-RequestNullProcedureDescriptionFormat</ctl:link>
			<ctl:code>
				<!--  get procedure value first -->
				<xsl:variable name="procedure" select="$getCapabilitiesResponse//sps:contents//swes:procedure" />
				<!-- set a invalid procedureDescriptionFormat -->
				<xsl:variable name="procedureDescriptionFormat" select="string('')" />
				<!-- send request -->
				<xsl:variable name="describeSensorResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$DescribeSensor_URL"/>
							</ctl:url> 
							<ctl:body>
								<swes:DescribeSensor service="SPS" version="2.0.0" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
									<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
								</swes:DescribeSensor>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateExceptionReportSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$DescribeSensor_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<swes:DescribeSensor service="SPS" version="2.0.0" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
									<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
								</swes:DescribeSensor>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateExceptionReport" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($describeSensorResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the DescribeSensor response schema for "SPS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$describeSensorResponse/*">
							<xsl:if test="$PostEncodingIsSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($describeSensorResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($describeSensorResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a DescribeSensor request with invalid procedureDescriptionFormat parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="spsFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$describeSensorResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('procedureDescriptionFormat')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a DescribeSensor request with null ProcedureDescriptionFormat parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "procedureDescriptionFormat".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.DescribeSensor-RequestInvalidProcedureDescriptionFormat.1">
			<ctl:param name="DescribeSensor_URL" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>Send a request with invalid parameter "ProcedureDescriptionFormat",and the response must be a valid exception with code "InvalidParameterValue" and locator "ProcedureDescriptionFormat". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidParameterValue" and locator is "ProcedureDescriptionFormat"; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that the server handles invalid ProcedureDescriptionFormat parameter correctly.">docs/SPS%202.0%20ATS.html#SPS.DescribeSensor-RequestInvalidProcedureDescriptionFormat</ctl:link>
			<ctl:code>
				<!--  get procedure value first -->
				<xsl:variable name="procedure" select="$getCapabilitiesResponse//sps:contents//swes:procedure" />
				<!-- set a invalid procedureDescriptionFormat -->
				<xsl:variable name="procedureDescriptionFormat" select="current-dateTime()" />
				<!-- send request -->
				<xsl:variable name="describeSensorResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$DescribeSensor_URL"/>
							</ctl:url> 
							<ctl:body>
								<swes:DescribeSensor service="SPS" version="2.0.0" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
									<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
								</swes:DescribeSensor>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateExceptionReportSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$DescribeSensor_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<swes:DescribeSensor service="SPS" version="2.0.0" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
									<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
								</swes:DescribeSensor>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateExceptionReport" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($describeSensorResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the DescribeSensor response schema for "SPS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$describeSensorResponse/*">
							<xsl:if test="$PostEncodingIsSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($describeSensorResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($describeSensorResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a DescribeSensor request with invalid procedureDescriptionFormat parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="spsFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$describeSensorResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
									<ctl:with-param name="locatorToCheck" select="string('procedureDescriptionFormat')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a DescribeSensor request with invalid procedureDescriptionFormat parameter specified.  </ctl:message>
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator of "procedureDescriptionFormat".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.DescribeSensor-RequestInvalidValidTime.1"><!-- Skip this test because of error schema -->
			<ctl:param name="DescribeSensor_URL" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>Send a request with invalid parameter "validTime" value "123",and the response must be a valid exception with code "InvalidRequest" and locator "validTime". </ctl:assertion>
			<ctl:comment>Pass if the server returns a valid exception message with an exceptionCode "InvalidRequest" and locator is "validTime"; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that the server handles invalid validTime parameter correctly.">docs/SPS%202.0%20ATS.html#SPS.DescribeSensor-RequestInvalidvalidTime</ctl:link>
			<ctl:code>
				<!-- get procedure value-->
				<xsl:variable name="procedure" select="$getCapabilitiesResponse//sps:contents//swes:procedure" />
				<!-- get procedureDescriptionFormat value-->
				<xsl:variable name="procedureDescriptionFormat" select="$getCapabilitiesResponse//sps:contents//swes:procedureDescriptionFormat" />
				<!-- set a invalid ValidTime -->
				<xsl:variable name="validTime" select="string('123')" />
				<!-- send request -->
				<xsl:variable name="describeSensorResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$DescribeSensor_URL"/>
							</ctl:url> 
							<ctl:body>
								<swes:DescribeSensor service="SPS" version="2.0.0" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
									<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
									<swes:validTime><xsl:value-of select="$validTime" /></swes:validTime>
								</swes:DescribeSensor>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateExceptionReportSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$DescribeSensor_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<swes:DescribeSensor service="SPS" version="2.0.0" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
									<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
									<swes:validTime><xsl:value-of select="$validTime" /></swes:validTime>
								</swes:DescribeSensor>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateExceptionReport" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($describeSensorResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the DescribeSensor response schema for "SPS" />.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$describeSensorResponse/*">
							<xsl:if test="$PostEncodingIsSOAP=string('true')">
								<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($describeSensorResponse)" /></ctl:message>
							</xsl:if>
							<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
								<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($describeSensorResponse)" /></ctl:message>
							</xsl:if>
							<ctl:message>Checking the validity of the response to a DescribeSensor request with invalid validTime parameter.</ctl:message>
							<xsl:variable name="isCorrect">
								<ctl:call-function name="spsFunctions:checkExceptionReport">
									<ctl:with-param name="exceptionReport" select="$describeSensorResponse" />
									<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidRequest')" />
									<ctl:with-param name="locatorToCheck" select="string('Expected element \'AbstractTimeGeometricPrimitive@http://www.opengis.net/gml/3.2\' before the end of the content in element validTime@http://www.opengis.net/swes/2.0;Element \'validTime@http://www.opengis.net/swes/2.0\' with element-only content type cannot have text content.')" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
								</ctl:call-function>
							</xsl:variable>
							<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
							<xsl:if test="not(xsd:boolean($isCorrect))">
								<ctl:message>FAILURE:  The server did not return the expected exception report response to a DescribeSensor request with invalid validTime parameter specified. </ctl:message> 
								<ctl:message>The response was expected to be an ExceptionReport with an exceptionCode of "InvalidRequest" and a locator of "validTime".</ctl:message>
								<ctl:fail />
							</xsl:if>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.DescribeSensor-RequestValidRequest.1">
			<ctl:param name="DescribeSensor_URL" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>Send a valid request ,and there must be have a valid DescribeSensor response returned. </ctl:assertion>
			<ctl:comment>Pass if the DescribeSensor responses for all procedures listed in GetCapabilities response are valid; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that the server handles valid request correctly.">docs/SPS%202.0%20ATS.html#SPS.DescribeSensor-RequestValidRequest</ctl:link>
			<ctl:code>
				<!-- get the main procedureDescriptionFormat -->
				<xsl:variable name="main_procedureDescriptionFormat" select="$getCapabilitiesResponse//sps:contents/sps:SPSContents/swes:procedureDescriptionFormat" />
				<!-- check every offering -->
				<xsl:for-each select="$getCapabilitiesResponse//sps:contents/sps:SPSContents/swes:offering">
					<xsl:variable name="procedure" select="./sps:SensorOffering/swes:procedure" />
					<xsl:variable name="inner_procedureDescriptionFormat" select="./sps:SensorOffering/swes:observableProperty" />
					<xsl:variable name="procedureDescriptionFormat">
						<xsl:if test="$inner_procedureDescriptionFormat"><xsl:value-of select="$inner_procedureDescriptionFormat" /></xsl:if>
						<xsl:if test="not($inner_procedureDescriptionFormat)"><xsl:value-of select="$main_procedureDescriptionFormat" /></xsl:if>
					</xsl:variable>
					<!-- 對每個 procedure 發出request 檢查回應是否正確 (swes:DescribeSensorResponse 開頭,有相同的 procedureDescriptionFormat )-->
					<xsl:variable name="describeSensorResponse">
						<xsl:if test="$PostEncodingIsSOAP=string('true')">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$DescribeSensor_URL"/>
								</ctl:url> 
								<ctl:body>
									<swes:DescribeSensor service="SPS" version="2.0.0" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
										<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
										<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
									</swes:DescribeSensor>
								</ctl:body>
								<ctl:call-function name="spsFunctions:validateDescribeSensorResponseNoExceptionReportSOAP" />
							</ctl:soap-request>
						</xsl:if>
						<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$DescribeSensor_URL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<swes:DescribeSensor service="SPS" version="2.0.0" xmlns:swes="http://www.opengis.net/swes/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
										<swes:procedure><xsl:value-of select="$procedure" /></swes:procedure>
										<swes:procedureDescriptionFormat><xsl:value-of select="$procedureDescriptionFormat" /></swes:procedureDescriptionFormat>
									</swes:DescribeSensor>
								</ctl:body>
								<ctl:call-function name="spsFunctions:validateDescribeSensorResponseNoExceptionReport" />
							</ctl:request>
						</xsl:if>
					</xsl:variable>
					<xsl:choose>
						<xsl:when test="not($describeSensorResponse/*)">
							<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the DescribeSensor response schema for "SPS" />.</ctl:message>
							<ctl:fail/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:variable name="ResponseRoot" select="local-name-from-QName(node-name($describeSensorResponse/*[1]))" />
							<xsl:variable name="TargetRoot" select="string('DescribeSensorResponse')" />
							<!-- check procedureDescriptionFormat -->
							<xsl:variable name="RespnseFormat" select="$describeSensorResponse//swes:procedureDescriptionFormat" />
							<xsl:choose>
								<xsl:when test="not($ResponseRoot=$TargetRoot)">
									<ctl:message>The root element from the response to a DescribeSensor request "<xsl:value-of select="$ResponseRoot" />" does not match the expected root element of "<xsl:value-of select="$TargetRoot" />"</ctl:message>
									<ctl:fail />
								</xsl:when>
								<xsl:when test="not($procedureDescriptionFormat=$RespnseFormat)">
									<ctl:message>The procedureDescriptionFormat from the response to a DescribeSensor request :"<xsl:value-of select="$RespnseFormat" />does not match the procedureDescriptionFormat :"<xsl:value-of select="$procedureDescriptionFormat" />" in the DescribeSensor request.</ctl:message>
									<ctl:fail />
								</xsl:when>
								<xsl:otherwise>
									<ctl:message>procedure:"<xsl:value-of select="$procedure" />" check ok!</ctl:message>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:for-each>
			</ctl:code>
		</ctl:test>
	</ctl:package>

	<ctl:package><!--DescribeTasking tests-->
		<ctl:test name="sps:core-SPS.DescribeTasking">
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:param name="DescribeTasking_URL" />
			<ctl:assertion>Execute DescribeTasking Test.</ctl:assertion>
			<ctl:comment>Pass if all the subtest not fail; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that the server handles missing parameters correctly.">docs/SPS%202.0%20ATS.html#SPS.DescribeTasking</ctl:link>
			<ctl:code>
				<ctl:message>DescribeTasking URL:  <xsl:value-of select="$DescribeTasking_URL" /></ctl:message>
				<xsl:if test="string-length(normalize-space($DescribeTasking_URL))>0">
					<ctl:message>**********************************</ctl:message>
					<ctl:message>*Running DescribeTasking tests...*</ctl:message>
					<ctl:message>**********************************</ctl:message>
					
					<!-- 0.1 request no service -->
					<ctl:call-test name="sps:core-SPS.DescribeTasking-RequestNoService.1">
						<ctl:with-param name="DescribeTasking_URL" select="$DescribeTasking_URL" />
						<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
						<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
					</ctl:call-test>
					<ctl:message>**********************************************************************</ctl:message>
					<!-- 0.2 request null service -->
					<ctl:call-test name="sps:core-SPS.DescribeTasking-RequestNullService.1">
						<ctl:with-param name="DescribeTasking_URL" select="$DescribeTasking_URL" />
						<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
						<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
					</ctl:call-test>
					<ctl:message>**********************************************************************</ctl:message>
					<!-- 0.3 request invalid service -->
					<ctl:call-test name="sps:core-SPS.DescribeTasking-RequestInvalidService.1">
						<ctl:with-param name="DescribeTasking_URL" select="$DescribeTasking_URL" />
						<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
						<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
					</ctl:call-test>
					<ctl:message>**********************************************************************</ctl:message>
					<!-- 0.4 request no version -->
					<ctl:call-test name="sps:core-SPS.DescribeTasking-RequestNoVersion.1">
						<ctl:with-param name="DescribeTasking_URL" select="$DescribeTasking_URL" />
						<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
						<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
					</ctl:call-test>
					<ctl:message>**********************************************************************</ctl:message>
					<!-- 0.5 request null version -->
					<ctl:call-test name="sps:core-SPS.DescribeTasking-RequestNullVersion.1">
						<ctl:with-param name="DescribeTasking_URL" select="$DescribeTasking_URL" />
						<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
						<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
					</ctl:call-test>
					<ctl:message>**********************************************************************</ctl:message>
					<!-- 0.6 request invalid version -->
					<ctl:call-test name="sps:core-SPS.DescribeTasking-RequestInvalidVersion.1">
						<ctl:with-param name="DescribeTasking_URL" select="$DescribeTasking_URL" />
						<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
						<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
					</ctl:call-test>
					<ctl:message>**********************************************************************</ctl:message>
					<!-- 1.request no procedure Skip this test because of error schema.
					<ctl:call-test name="sps:core-SPS.DescribeTasking-RequestNoProcedure.1">
						<ctl:with-param name="DescribeTasking_URL" select="$DescribeTasking_URL" />
						<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
					</ctl:call-test>
					<ctl:message>**********************************************************************</ctl:message>-->
					<!-- 2.request Null procedure -->
					<ctl:call-test name="sps:core-SPS.DescribeTasking-RequestNullProcedure.1">
						<ctl:with-param name="DescribeTasking_URL" select="$DescribeTasking_URL" />
						<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
					</ctl:call-test>
					<ctl:message>**********************************************************************</ctl:message>
					<!-- 3.request Invalid procedure -->
					<ctl:call-test name="sps:core-SPS.DescribeTasking-RequestInvalidProcedure.1">
						<ctl:with-param name="DescribeTasking_URL" select="$DescribeTasking_URL" />
						<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
					</ctl:call-test>
					<ctl:message>**********************************************************************</ctl:message>
					<!-- 針對提供的每個 procedure 檢查回應是否正確 根元素=sps:DescribeTaskingResponse&是否含有taskingParameters元素-->
					<ctl:call-test name="sps:core-SPS.DescribeTasking-ResponseMain.1">
						<ctl:with-param name="DescribeTasking_URL" select="$DescribeTasking_URL" />
						<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
						<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
					</ctl:call-test>
				</xsl:if>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.DescribeTasking-RequestNoService.1">
			<ctl:param name="DescribeTasking_URL" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>The server returns a valid error report message with a value of InvalidRequest for the exceptionCode parameter when no service value is supplied in the request.</ctl:assertion>
			<ctl:comment>Pass if the server returns a valid error report message with an exceptionCode parameter of InvalidRequest and a locator of service; fail otherwise.</ctl:comment>
			<ctl:code>
				<!--PUT TEST CODE HERE-->
				<!--
				1.)  HTTP POST DescribeTasking request with an empty sensorID.
				2.)  Validate response against ExceptionReport schema.
				3.)  If response validates, then check that the exceptionCode parameter is "InvalidRequest".
				-->
				<!-- 取得一個 procedure-->
				<xsl:variable name="procedure" select="$getCapabilitiesResponse//sps:contents//swes:procedure" />
				
				<ctl:message>Sending a DescribeTasking request without service parameter...</ctl:message>
				<xsl:variable name="describeTaskingResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$DescribeTasking_URL"/>
							</ctl:url> 
							<ctl:body>
								<sps:DescribeTasking version="2.0.0" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:procedure><xsl:value-of select="$procedure" /></sps:procedure>
								</sps:DescribeTasking>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateDescribeTaskingResponseSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$DescribeTasking_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:DescribeTasking version="2.0.0" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:procedure><xsl:value-of select="$procedure" /></sps:procedure>
								</sps:DescribeTasking>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateDescribeTaskingResponse" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($describeTaskingResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response to an invalid DescribeTasking request or the response was not a valid exception.</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$PostEncodingIsSOAP=string('true')">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($describeTaskingResponse)" /></ctl:message>
						</xsl:if>
						<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($describeTaskingResponse)" /></ctl:message>
						</xsl:if>
						<ctl:message>Checking the response for validity...</ctl:message>
						<xsl:variable name="isCorrect">
							<ctl:call-function name="spsFunctions:checkExceptionReport">
								<ctl:with-param name="exceptionReport" select="$describeTaskingResponse" />
								<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidRequest')" />
								<ctl:with-param name="locatorToCheck" select="string('Expected attribute: service in element DescribeTasking@http://www.opengis.net/sps/2.0')" />
								<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
							</ctl:call-function>
						</xsl:variable>
						<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
						<xsl:if test="not(xsd:boolean($isCorrect))">
							<ctl:message>FAILURE:  The returned exception report was expected to contain an exceptionCode of InvalidRequest and a locator of "Expected attribute: service in element DescribeTasking@http://www.opengis.net/sps/2.0".</ctl:message>
							<ctl:fail />
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.DescribeTasking-RequestNullService.1">
			<ctl:param name="DescribeTasking_URL" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>The server returns a valid error report message with a value of MissingParameterValue for the exceptionCode parameter when null service value is supplied in the request.</ctl:assertion>
			<ctl:comment>Pass if the server returns a valid error report message with an exceptionCode parameter of MissingParameterValue and a locator of service; fail otherwise.</ctl:comment>
			<ctl:code>
				<!--PUT TEST CODE HERE-->
				<!--
				1.)  HTTP POST DescribeTasking request with an empty service.
				2.)  Validate response against ExceptionReport schema.
				3.)  If response validates, then check that the exceptionCode parameter is "MissingParameterValue".
				-->
				<!-- 取得一個 procedure-->
				<xsl:variable name="procedure" select="$getCapabilitiesResponse//sps:contents//swes:procedure" />
				
				<ctl:message>Sending a DescribeTasking request with null service parameter...</ctl:message>
				<xsl:variable name="describeTaskingResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$DescribeTasking_URL"/>
							</ctl:url> 
							<ctl:body>
								<sps:DescribeTasking service="" version="2.0.0" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:procedure><xsl:value-of select="$procedure" /></sps:procedure>
								</sps:DescribeTasking>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateDescribeTaskingResponseSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$DescribeTasking_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:DescribeTasking service="" version="2.0.0" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:procedure><xsl:value-of select="$procedure" /></sps:procedure>
								</sps:DescribeTasking>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateDescribeTaskingResponse" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($describeTaskingResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response to an invalid DescribeTasking request or the response was not a valid exception.</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$PostEncodingIsSOAP=string('true')">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($describeTaskingResponse)" /></ctl:message>
						</xsl:if>
						<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($describeTaskingResponse)" /></ctl:message>
						</xsl:if>
						<ctl:message>Checking the response for validity...</ctl:message>
						<xsl:variable name="isCorrect">
							<ctl:call-function name="spsFunctions:checkExceptionReport">
								<ctl:with-param name="exceptionReport" select="$describeTaskingResponse" />
								<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
								<ctl:with-param name="locatorToCheck" select="string('service')" />
								<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
							</ctl:call-function>
						</xsl:variable>
						<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
						<xsl:if test="not(xsd:boolean($isCorrect))">
							<ctl:message>FAILURE:  The returned exception report was expected to contain an exceptionCode of MissingParameterValue and a locator of service.</ctl:message>
							<ctl:fail />
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.DescribeTasking-RequestInvalidService.1">
			<ctl:param name="DescribeTasking_URL" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>The server returns a valid error report message with a value of InvalidParameterValue for the exceptionCode parameter when Invalid service value is supplied in the request.</ctl:assertion>
			<ctl:comment>Pass if the server returns a valid error report message with an exceptionCode parameter of InvalidParameterValue; fail otherwise.</ctl:comment>
			<ctl:code>
				<!--PUT TEST CODE HERE-->
				<!--
				1.)  HTTP POST DescribeTasking request with an empty sensorID.
				2.)  Validate response against ExceptionReport schema.
				3.)  If response validates, then check that the exceptionCode parameter is "InvalidParameterValue".
				-->
				<!-- 取得一個 procedure-->
				<xsl:variable name="procedure" select="$getCapabilitiesResponse//sps:contents//swes:procedure" />
				
				<ctl:message>Sending a DescribeTasking request with Invalid service parameter...</ctl:message>
				<xsl:variable name="describeTaskingResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$DescribeTasking_URL"/>
							</ctl:url> 
							<ctl:body>
								<sps:DescribeTasking service="999" version="2.0.0" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:procedure><xsl:value-of select="$procedure" /></sps:procedure>
								</sps:DescribeTasking>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateDescribeTaskingResponseSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$DescribeTasking_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:DescribeTasking service="999" version="2.0.0" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:procedure><xsl:value-of select="$procedure" /></sps:procedure>
								</sps:DescribeTasking>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateDescribeTaskingResponse" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($describeTaskingResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response to an invalid DescribeTasking request or the response was not a valid exception.</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$PostEncodingIsSOAP=string('true')">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($describeTaskingResponse)" /></ctl:message>
						</xsl:if>
						<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($describeTaskingResponse)" /></ctl:message>
						</xsl:if>
						<ctl:message>Checking the response for validity...</ctl:message>
						<xsl:variable name="isCorrect">
							<ctl:call-function name="spsFunctions:checkExceptionReport">
								<ctl:with-param name="exceptionReport" select="$describeTaskingResponse" />
								<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
								<ctl:with-param name="locatorToCheck" select="string('service')" />
								<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
							</ctl:call-function>
						</xsl:variable>
						<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
						<xsl:if test="not(xsd:boolean($isCorrect))">
							<ctl:message>FAILURE:  The returned exception report was expected to contain an exceptionCode of InvalidParameterValue and a locator of service.</ctl:message>
							<ctl:fail />
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.DescribeTasking-RequestNoVersion.1">
			<ctl:param name="DescribeTasking_URL" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>The server returns a valid error report message with a value of InvalidRequest for the exceptionCode parameter when no version value is supplied in the request.</ctl:assertion>
			<ctl:comment>Pass if the server returns a valid error report message with an exceptionCode parameter of InvalidRequest; fail otherwise.</ctl:comment>
			<ctl:code>
				<!--PUT TEST CODE HERE-->
				<!--
				1.)  HTTP POST DescribeTasking request with an empty sensorID.
				2.)  Validate response against ExceptionReport schema.
				3.)  If response validates, then check that the exceptionCode parameter is "InvalidRequest".
				-->
				<!-- 取得一個 procedure-->
				<xsl:variable name="procedure" select="$getCapabilitiesResponse//sps:contents//swes:procedure" />
				
				<ctl:message>Sending a DescribeTasking request with a null sensorID...</ctl:message>
				<xsl:variable name="describeTaskingResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$DescribeTasking_URL"/>
							</ctl:url> 
							<ctl:body>
								<sps:DescribeTasking service="SPS" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:procedure><xsl:value-of select="$procedure" /></sps:procedure>
								</sps:DescribeTasking>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateDescribeTaskingResponseSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$DescribeTasking_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:DescribeTasking service="SPS" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:procedure><xsl:value-of select="$procedure" /></sps:procedure>
								</sps:DescribeTasking>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateDescribeTaskingResponse" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($describeTaskingResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response to an invalid DescribeTasking request or the response was not a valid exception.</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$PostEncodingIsSOAP=string('true')">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($describeTaskingResponse)" /></ctl:message>
						</xsl:if>
						<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($describeTaskingResponse)" /></ctl:message>
						</xsl:if>
						<ctl:message>Checking the response for validity...</ctl:message>
						<xsl:variable name="isCorrect">
							<ctl:call-function name="spsFunctions:checkExceptionReport">
								<ctl:with-param name="exceptionReport" select="$describeTaskingResponse" />
								<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidRequest')" />
								<ctl:with-param name="locatorToCheck" select="string('Expected attribute: version in element DescribeTasking@http://www.opengis.net/sps/2.0')" />
								<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
							</ctl:call-function>
						</xsl:variable>
						<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
						<xsl:if test="not(xsd:boolean($isCorrect))">
							<ctl:message>FAILURE:  The returned exception report was expected to contain an exceptionCode of InvalidRequest and a locator of "Expected attribute: version in element DescribeTasking@http://www.opengis.net/sps/2.0".</ctl:message>
							<ctl:fail />
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.DescribeTasking-RequestNullVersion.1">
			<ctl:param name="DescribeTasking_URL" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>The server returns a valid error report message with a value of MissingParameterValue for the exceptionCode parameter when null version value is supplied in the request.</ctl:assertion>
			<ctl:comment>Pass if the server returns a valid error report message with an exceptionCode parameter of MissingParameterValue; fail otherwise.</ctl:comment>
			<ctl:code>
				<!--PUT TEST CODE HERE-->
				<!--
				1.)  HTTP POST DescribeTasking request with an empty sensorID.
				2.)  Validate response against ExceptionReport schema.
				3.)  If response validates, then check that the exceptionCode parameter is "MissingParameterValue".
				-->
				<!-- 取得一個 procedure-->
				<xsl:variable name="procedure" select="$getCapabilitiesResponse//sps:contents//swes:procedure" />
				
				<ctl:message>Sending a DescribeTasking request without version parameter...</ctl:message>
				<xsl:variable name="describeTaskingResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$DescribeTasking_URL"/>
							</ctl:url> 
							<ctl:body>
								<sps:DescribeTasking service="SPS" version="" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:procedure><xsl:value-of select="$procedure" /></sps:procedure>
								</sps:DescribeTasking>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateDescribeTaskingResponseSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$DescribeTasking_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:DescribeTasking service="SPS" version="" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:procedure><xsl:value-of select="$procedure" /></sps:procedure>
								</sps:DescribeTasking>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateDescribeTaskingResponse" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($describeTaskingResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response to an invalid DescribeTasking request or the response was not a valid exception.</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$PostEncodingIsSOAP=string('true')">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($describeTaskingResponse)" /></ctl:message>
						</xsl:if>
						<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($describeTaskingResponse)" /></ctl:message>
						</xsl:if>
						<ctl:message>Checking the response for validity...</ctl:message>
						<xsl:variable name="isCorrect">
							<ctl:call-function name="spsFunctions:checkExceptionReport">
								<ctl:with-param name="exceptionReport" select="$describeTaskingResponse" />
								<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
								<ctl:with-param name="locatorToCheck" select="string('version')" />
								<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
							</ctl:call-function>
						</xsl:variable>
						<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
						<xsl:if test="not(xsd:boolean($isCorrect))">
							<ctl:message>FAILURE:  The returned exception report was expected to contain an exceptionCode of MissingParameterValue and a locator of version.</ctl:message>
							<ctl:fail />
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.DescribeTasking-RequestInvalidVersion.1">
			<ctl:param name="DescribeTasking_URL" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>The server returns a valid error report message with a value of InvalidParameterValue for the exceptionCode parameter when Invalid version value is supplied in the request.</ctl:assertion>
			<ctl:comment>Pass if the server returns a valid error report message with an exceptionCode parameter of InvalidParameterValue; fail otherwise.</ctl:comment>
			<ctl:code>
				<!--PUT TEST CODE HERE-->
				<!--
				1.)  HTTP POST DescribeTasking request with an empty sensorID.
				2.)  Validate response against ExceptionReport schema.
				3.)  If response validates, then check that the exceptionCode parameter is "InvalidParameterValue".
				-->
				<!-- 取得一個 procedure-->
				<xsl:variable name="procedure" select="$getCapabilitiesResponse//sps:contents//swes:procedure" />
				
				<ctl:message>Sending a DescribeTasking request with a Invalid version...</ctl:message>
				<xsl:variable name="describeTaskingResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$DescribeTasking_URL"/>
							</ctl:url> 
							<ctl:body>
								<sps:DescribeTasking service="SPS" version="999" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:procedure><xsl:value-of select="$procedure" /></sps:procedure>
								</sps:DescribeTasking>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateDescribeTaskingResponseSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$DescribeTasking_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:DescribeTasking service="SPS" version="999" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:procedure><xsl:value-of select="$procedure" /></sps:procedure>
								</sps:DescribeTasking>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateDescribeTaskingResponse" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($describeTaskingResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response to an invalid DescribeTasking request or the response was not a valid exception.</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$PostEncodingIsSOAP=string('true')">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($describeTaskingResponse)" /></ctl:message>
						</xsl:if>
						<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($describeTaskingResponse)" /></ctl:message>
						</xsl:if>
						<ctl:message>Checking the response for validity...</ctl:message>
						<xsl:variable name="isCorrect">
							<ctl:call-function name="spsFunctions:checkExceptionReport">
								<ctl:with-param name="exceptionReport" select="$describeTaskingResponse" />
								<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
								<ctl:with-param name="locatorToCheck" select="string('version')" />
								<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
							</ctl:call-function>
						</xsl:variable>
						<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
						<xsl:if test="not(xsd:boolean($isCorrect))">
							<ctl:message>FAILURE:  The returned exception report was expected to contain an exceptionCode of InvalidParameterValue and a locator of version.</ctl:message>
							<ctl:fail />
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.DescribeTasking-RequestNoProcedure.1"><!-- Skip this test because of error schema. -->
			<ctl:param name="DescribeTasking_URL" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>The server returns a valid error report message with a value of InvalidRequest for the exceptionCode parameter when no procedure value is supplied in the request.</ctl:assertion>
			<ctl:comment>Pass if the server returns a valid error report message with an exceptionCode parameter of InvalidRequest; fail otherwise.</ctl:comment>
			<ctl:code>
				<!--PUT TEST CODE HERE-->
				<!--
				1.)  HTTP POST DescribeTasking request with an empty sensorID.
				2.)  Validate response against ExceptionReport schema.
				3.)  If response validates, then check that the exceptionCode parameter is "InvalidRequest".
				-->
				<ctl:message>Sending a DescribeTasking request without procedure parameter...</ctl:message>
				<xsl:variable name="describeTaskingResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$DescribeTasking_URL"/>
							</ctl:url> 
							<ctl:body>
								<sps:DescribeTasking service="SPS" version="2.0.0" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
								</sps:DescribeTasking>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateDescribeTaskingResponseSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$DescribeTasking_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:DescribeTasking service="SPS" version="2.0.0" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
								</sps:DescribeTasking>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateDescribeTaskingResponse" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($describeTaskingResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response to an invalid DescribeTasking request or the response was not a valid exception.</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$PostEncodingIsSOAP=string('true')">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($describeTaskingResponse)" /></ctl:message>
						</xsl:if>
						<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($describeTaskingResponse)" /></ctl:message>
						</xsl:if>
						<ctl:message>Checking the response for validity...</ctl:message>
						<xsl:variable name="isCorrect">
							<ctl:call-function name="spsFunctions:checkExceptionReport">
								<ctl:with-param name="exceptionReport" select="$describeTaskingResponse" />
								<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidRequest')" />
								<ctl:with-param name="locatorToCheck" select="string('procedure')" />
								<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
							</ctl:call-function>
						</xsl:variable>
						<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
						<xsl:if test="not(xsd:boolean($isCorrect))">
							<ctl:message>FAILURE:  The returned exception report was expected to contain an exceptionCode of InvalidRequest and a locator of procedure.</ctl:message>
							<ctl:fail />
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.DescribeTasking-RequestNullProcedure.1">
			<ctl:param name="DescribeTasking_URL" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>The server returns a valid error report message with a value of MissingParameterValue for the exceptionCode parameter when Invalid procedure value is supplied in the request.</ctl:assertion>
			<ctl:comment>Pass if the server returns a valid error report message with an exceptionCode parameter of MissingParameterValue; fail otherwise.</ctl:comment>
			<ctl:code>
				<!--PUT TEST CODE HERE-->
				<!--
				1.)  HTTP POST DescribeTasking request with an empty sensorID.
				2.)  Validate response against ExceptionReport schema.
				3.)  If response validates, then check that the exceptionCode parameter is "MissingParameterValue".
				-->
				<ctl:message>Sending a DescribeTasking request with a null procedure...</ctl:message>
				<xsl:variable name="describeTaskingResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$DescribeTasking_URL"/>
							</ctl:url> 
							<ctl:body>
								<sps:DescribeTasking service="SPS" version="2.0.0" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:procedure><xsl:value-of select="string('')" /></sps:procedure>
								</sps:DescribeTasking>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateDescribeTaskingResponseSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$DescribeTasking_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:DescribeTasking service="SPS" version="2.0.0" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:procedure><xsl:value-of select="string('')" /></sps:procedure>
								</sps:DescribeTasking>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateDescribeTaskingResponse" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($describeTaskingResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response to an invalid DescribeTasking request or the response was not a valid exception.</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$PostEncodingIsSOAP=string('true')">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($describeTaskingResponse)" /></ctl:message>
						</xsl:if>
						<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($describeTaskingResponse)" /></ctl:message>
						</xsl:if>
						<ctl:message>Checking the response for validity...</ctl:message>
						<xsl:variable name="isCorrect">
							<ctl:call-function name="spsFunctions:checkExceptionReport">
								<ctl:with-param name="exceptionReport" select="$describeTaskingResponse" />
								<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
								<ctl:with-param name="locatorToCheck" select="string('procedure')" />
								<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
							</ctl:call-function>
						</xsl:variable>
						<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
						<xsl:if test="not(xsd:boolean($isCorrect))">
							<ctl:message>FAILURE:  The returned exception report was expected to contain an exceptionCode of MissingParameterValue and a locator of procedure.</ctl:message>
							<ctl:fail />
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.DescribeTasking-RequestInvalidProcedure.1">
			<ctl:param name="DescribeTasking_URL" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>The server returns a valid error report message with a value of InvalidParameterValue for the exceptionCode parameter when Invalid procedure value is supplied in the request.</ctl:assertion>
			<ctl:comment>Pass if the server returns a valid error report message with an exceptionCode parameter of InvalidParameterValue; fail otherwise.</ctl:comment>
			<ctl:code>
				<!--PUT TEST CODE HERE-->
				<!--
				1.)  HTTP POST DescribeTasking request with an empty procedure.
				2.)  Validate response against ExceptionReport schema.
				3.)  If response validates, then check that the exceptionCode parameter is "InvalidParameterValue".
				-->
				<ctl:message>Sending a DescribeTasking request with a Invalid procedure...</ctl:message>
				<xsl:variable name="describeTaskingResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$DescribeTasking_URL"/>
							</ctl:url> 
							<ctl:body>
								<sps:DescribeTasking service="SPS" version="2.0.0" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:procedure><xsl:value-of select="current-dateTime()" /></sps:procedure>
								</sps:DescribeTasking>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateDescribeTaskingResponseSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$DescribeTasking_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:DescribeTasking service="SPS" version="2.0.0" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:procedure><xsl:value-of select="current-dateTime()" /></sps:procedure>
								</sps:DescribeTasking>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateDescribeTaskingResponse" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($describeTaskingResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response to an invalid DescribeTasking request or the response was not a valid exception.</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$PostEncodingIsSOAP=string('true')">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($describeTaskingResponse)" /></ctl:message>
						</xsl:if>
						<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($describeTaskingResponse)" /></ctl:message>
						</xsl:if>
						<ctl:message>Checking the response for validity...</ctl:message>
						<xsl:variable name="isCorrect">
							<ctl:call-function name="spsFunctions:checkExceptionReport">
								<ctl:with-param name="exceptionReport" select="$describeTaskingResponse" />
								<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
								<ctl:with-param name="locatorToCheck" select="string('procedure')" />
								<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
							</ctl:call-function>
						</xsl:variable>
						<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
						<xsl:if test="not(xsd:boolean($isCorrect))">
							<ctl:message>FAILURE:  The returned exception report was expected to contain an exceptionCode of InvalidParameterValue and a locator of procedure.</ctl:message>
							<ctl:fail />
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.DescribeTasking-ResponseMain.1">
			<ctl:param name="DescribeTasking_URL" />
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>The response to a DescribeTasking request is valid.</ctl:assertion>
			<ctl:comment>Pass if there is a valid xml schema response and the root element is "sps:DescribeTaskingResponse" and there is a not-empty-value sub-element "taskingParameters" ; fail otherwise.</ctl:comment>
			<ctl:code>
				<!-- check every offering procedure-->
				<xsl:for-each select="$getCapabilitiesResponse//sps:contents/sps:SPSContents/swes:offering">
					<!--Call DescribeTasking for each procedure-->
					<xsl:variable name="procedure" select="./sps:SensorOffering/swes:procedure" />
					<ctl:message>Sending DescribeTasking request with procedure "<xsl:value-of select="$procedure" />"</ctl:message>
					<xsl:variable name="describeTaskingResponse">
						<xsl:if test="$PostEncodingIsSOAP=string('true')">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$DescribeTasking_URL"/>
								</ctl:url> 
								<ctl:body>
									<sps:DescribeTasking service="SPS" version="2.0.0" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
										<sps:procedure><xsl:value-of select="$procedure" /></sps:procedure>
									</sps:DescribeTasking>
								</ctl:body>
								<ctl:call-function name="spsFunctions:validateDescribeTaskingResponseSOAP" />
							</ctl:soap-request>
						</xsl:if>
						<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$DescribeTasking_URL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sps:DescribeTasking service="SPS" version="2.0.0" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
										<sps:procedure><xsl:value-of select="$procedure" /></sps:procedure>
									</sps:DescribeTasking>
								</ctl:body>
								<ctl:call-function name="spsFunctions:validateDescribeTaskingResponse" />
							</ctl:request>
						</xsl:if>
					</xsl:variable>
					<xsl:choose>
						<xsl:when test="not($describeTaskingResponse/*)">
							<ctl:message>FAILURE:  No response was returned from the server for a DescribeTasking request with procedure "<xsl:value-of select="$procedure" />", or the response did not validate according to the DescribeTasking schema.</ctl:message>
							<ctl:fail />
						</xsl:when>
						<xsl:otherwise>
							<xsl:variable name="ResponseRoot" select="local-name-from-QName(node-name($describeTaskingResponse/*[1]))" />
							<xsl:choose>
								<xsl:when test="not($ResponseRoot=string('DescribeTaskingResponse'))">
									<ctl:message>**********************************************************************</ctl:message>
									<ctl:message>FAILURE:  The root element from the response to a Describetasking request "<xsl:value-of select="$ResponseRoot" />" does not match the expected root element of "DescribeTaskingResponse".</ctl:message>
									<ctl:fail />
								</xsl:when>
								<xsl:otherwise>
									<!-- 檢查內含一個 sps:taskingParameters 且不是空值 -->
									<ctl:message>Checking the elements of the DescribeTasking response...</ctl:message>
									<xsl:variable name="Count_taskingParameters" select="count($describeTaskingResponse//sps:taskingParameters)" />
									<xsl:choose>
										<xsl:when test="not($Count_taskingParameters=1)">
											<ctl:message>FAILURE:  There must be one and only one taskingParameters element in the response to a Describetasking request.</ctl:message>
											<ctl:fail />
										</xsl:when>
										<xsl:when test="not($describeTaskingResponse//sps:taskingParameters/*)">
											<ctl:message>FAILURE:  There must have value in the taskingParameters element.</ctl:message>
											<ctl:fail />
										</xsl:when>
										<xsl:otherwise>
											<ctl:message>DescribeTasking Check OK!</ctl:message>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:for-each>
			</ctl:code>
		</ctl:test>
	</ctl:package>

	<ctl:package><!--Submit tests-->
		<ctl:test name="sps:core-SPS.Submit">
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:param name="DescribeTasking_URL" />
			<ctl:param name="Submit_URL" />
			<ctl:param name="GetStatus_URL" />
			<ctl:param name="GetTask_URL" />
			<ctl:param name="DescribeResultAccess_URL" />
			<ctl:assertion>Execute Submit Test.</ctl:assertion>
			<ctl:comment>Pass if all the subtest not fail; fail otherwise.</ctl:comment>
			<ctl:code>
				<ctl:message>DescribeTasking URL:  <xsl:value-of select="$DescribeTasking_URL" /></ctl:message>
				
				<!-- get a valid procedure value -->
				<xsl:variable name="procedure" select="$getCapabilitiesResponse//swes:procedure"/>
				
				<!-- get a valid TaskingParameters value -->
				<xsl:variable name="describeTaskingResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$DescribeTasking_URL"/>
							</ctl:url> 
							<ctl:body>
								<sps:DescribeTasking service="SPS" version="2.0.0" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:procedure><xsl:value-of select="$procedure" /></sps:procedure>
								</sps:DescribeTasking>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateDescribeTaskingResponseSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$DescribeTasking_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:DescribeTasking service="SPS" version="2.0.0" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:procedure><xsl:value-of select="$procedure" /></sps:procedure>
								</sps:DescribeTasking>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateDescribeTaskingResponse" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<xsl:variable name="TaskingParameters" select="spsFunctions:ConcatSubmitValues($describeTaskingResponse//sps:DescribeTaskingResponse/sps:taskingParameters)" />
				
				<!-- get a Submit_URL -->
				<ctl:message>Submit URL:  <xsl:value-of select="$Submit_URL" /></ctl:message>

				<!-- start Submit test -->
				<xsl:if test="string-length(normalize-space($Submit_URL))>0">
					<ctl:message>*************************</ctl:message>
					<ctl:message>*Running Submit tests...*</ctl:message>
					<ctl:message>*************************</ctl:message>
					<!-- 0.1.request no service -->
					<ctl:call-test name="sps:core-SPS.Submit-RequestNoService.1">
						<ctl:with-param name="procedure" select="$procedure" />
						<ctl:with-param name="TaskingParameters" select="$TaskingParameters" />
						<ctl:with-param name="Submit_URL" select="$Submit_URL" />
						<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
					</ctl:call-test>
					<!-- 0.2.request null service -->
					<ctl:call-test name="sps:core-SPS.Submit-RequestNullService.1">
						<ctl:with-param name="procedure" select="$procedure" />
						<ctl:with-param name="TaskingParameters" select="$TaskingParameters" />
						<ctl:with-param name="Submit_URL" select="$Submit_URL" />
						<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
					</ctl:call-test>
					<!-- 0.3.request invalid service -->
					<ctl:call-test name="sps:core-SPS.Submit-RequestInvalidService.1">
						<ctl:with-param name="procedure" select="$procedure" />
						<ctl:with-param name="TaskingParameters" select="$TaskingParameters" />
						<ctl:with-param name="Submit_URL" select="$Submit_URL" />
						<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
					</ctl:call-test>
					<!-- 0.4.request no version -->
					<ctl:call-test name="sps:core-SPS.Submit-RequestNoVersion.1">
						<ctl:with-param name="procedure" select="$procedure" />
						<ctl:with-param name="TaskingParameters" select="$TaskingParameters" />
						<ctl:with-param name="Submit_URL" select="$Submit_URL" />
						<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
					</ctl:call-test>
					<!-- 0.5.request null version -->
					<ctl:call-test name="sps:core-SPS.Submit-RequestNullVersion.1">
						<ctl:with-param name="procedure" select="$procedure" />
						<ctl:with-param name="TaskingParameters" select="$TaskingParameters" />
						<ctl:with-param name="Submit_URL" select="$Submit_URL" />
						<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
					</ctl:call-test>
					<!-- 0.6.request invalid version -->
					<ctl:call-test name="sps:core-SPS.Submit-RequestInvalidVersion.1">
						<ctl:with-param name="procedure" select="$procedure" />
						<ctl:with-param name="TaskingParameters" select="$TaskingParameters" />
						<ctl:with-param name="Submit_URL" select="$Submit_URL" />
						<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
					</ctl:call-test>
					<!-- 1.1.request no procedure Skip this test because of error schema.
					<ctl:call-test name="sps:core-SPS.Submit-RequestNoProcedure.1">
						<ctl:with-param name="TaskingParameters" select="$TaskingParameters" />
						<ctl:with-param name="Submit_URL" select="$Submit_URL" />
						<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
					</ctl:call-test>-->
					<!-- 1.2.request null procedure -->
					<ctl:call-test name="sps:core-SPS.Submit-RequestNullProcedure.1">
						<ctl:with-param name="TaskingParameters" select="$TaskingParameters" />
						<ctl:with-param name="Submit_URL" select="$Submit_URL" />
						<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
					</ctl:call-test>
					<!-- 1.3.request invalid procedure -->
					<ctl:call-test name="sps:core-SPS.Submit-RequestInvalidProcedure.1">
						<ctl:with-param name="TaskingParameters" select="$TaskingParameters" />
						<ctl:with-param name="Submit_URL" select="$Submit_URL" />
						<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
					</ctl:call-test>
					<!-- 2.1.request no taskingParameters Skip this test because of error schema.
					<ctl:call-test name="sps:core-SPS.Submit-RequestNoTaskingParameters.1">
						<ctl:with-param name="procedure" select="$procedure" />
						<ctl:with-param name="Submit_URL" select="$Submit_URL" />
						<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
					</ctl:call-test>-->
					<!-- 2.2.request null taskingParameters skip this test because of error schema.
					<ctl:call-test name="sps:core-SPS.Submit-RequestNullTaskingParameters.1">
						<ctl:with-param name="procedure" select="$procedure" />
						<ctl:with-param name="Submit_URL" select="$Submit_URL" />
						<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
					</ctl:call-test>-->
					<!-- 2.3.request invalid taskingParameters skip this test because of error schema. 
					<ctl:call-test name="sps:core-SPS.Submit-RequestInvalidTaskingParameters.1">
						<ctl:with-param name="procedure" select="$procedure" />
						<ctl:with-param name="Submit_URL" select="$Submit_URL" />
						<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
					</ctl:call-test>-->
					<!-- 3.1.normal request for each procedure -->
					<ctl:call-test name="sps:core-SPS.Submit-RequestNormal.1">
						<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
						<ctl:with-param name="DescribeTasking_URL" select="$DescribeTasking_URL" />
						<ctl:with-param name="Submit_URL" select="$Submit_URL" />
						<ctl:with-param name="GetStatus_URL" select="$GetStatus_URL" />
						<ctl:with-param name="GetTask_URL" select="$GetTask_URL" />
						<ctl:with-param name="DescribeResultAccess_URL" select="$DescribeResultAccess_URL" />
						<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
					</ctl:call-test>
					
					<!-- SPS 1.0 test Abandoned 
					<ctl:call-test name="sps:core-SPS.Submit-RequestMain.1">
						<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
						<ctl:with-param name="DescribeTasking_URL" select="$DescribeTasking_URL" />
						<ctl:with-param name="Submit_URL" select="$Submit_URL" />
						<ctl:with-param name="DescribeResultAccess_URL" select="$DescribeResultAccess_URL" />
						<ctl:with-param name="allowUserSpecifiedTimeFrame" select="false()" />
						<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
					</ctl:call-test>
					-->
				</xsl:if>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.Submit-RequestNoService.1">
			<ctl:param name="procedure" />
			<ctl:param name="TaskingParameters" />
			<ctl:param name="Submit_URL" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>The server returns a valid error report message with a value of InvalidRequest for the exceptionCode parameter when no service value is supplied in the request.</ctl:assertion>
			<ctl:comment>Pass if the server return a valid Exception response; fail otherwise.</ctl:comment>
			<ctl:code>
				<!-- 1.create Submit request without procedure -->
				<xsl:variable name="submitResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$Submit_URL"/>
							</ctl:url> 
							<ctl:body>
								<sps:Submit version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:procedure><xsl:value-of select="$procedure" /></sps:procedure>
									<sps:taskingParameters>
										<sps:ParameterData>
											<sps:encoding>
												<swe:TextEncoding tokenSeparator="," blockSeparator=";"/>
											</sps:encoding>
											<sps:values><xsl:value-of select="$TaskingParameters" /></sps:values>
										</sps:ParameterData>
									</sps:taskingParameters>
								</sps:Submit>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateSubmitResponseSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$Submit_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:Submit version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:procedure><xsl:value-of select="$procedure" /></sps:procedure>
									<sps:taskingParameters>
										<sps:ParameterData>
											<sps:encoding>
												<swe:TextEncoding tokenSeparator="," blockSeparator=";"/>
											</sps:encoding>
											<sps:values><xsl:value-of select="$TaskingParameters" /></sps:values>
										</sps:ParameterData>
									</sps:taskingParameters>
								</sps:Submit>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateSubmitResponse" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<!-- 2.Check Response -->
				<xsl:choose>
					<xsl:when test="not($submitResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response to an invalid Submit request or the response was not a valid exception.</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$PostEncodingIsSOAP=string('true')">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($submitResponse)" /></ctl:message>
						</xsl:if>
						<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($submitResponse)" /></ctl:message>
						</xsl:if>
						<ctl:message>Checking the response for validity...</ctl:message>
						<xsl:variable name="isCorrect">
							<ctl:call-function name="spsFunctions:checkExceptionReport">
								<ctl:with-param name="exceptionReport" select="$submitResponse" />
								<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidRequest')" />
								<ctl:with-param name="locatorToCheck" select="string('Expected attribute: service in element Submit@http://www.opengis.net/sps/2.0')" />
								<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
							</ctl:call-function>
						</xsl:variable>
						<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
						<xsl:if test="not(xsd:boolean($isCorrect))">
							<ctl:message>FAILURE:  The returned exception report was expected to contain an exceptionCode of InvalidRequest and a locator of "Expected attribute: service in element Submit@http://www.opengis.net/sps/2.0".</ctl:message>
							<ctl:fail />
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.Submit-RequestNullService.1">
			<ctl:param name="procedure" />
			<ctl:param name="TaskingParameters" />
			<ctl:param name="Submit_URL" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>The server returns a valid error report message with a value of MissingParameterValue for the exceptionCode parameter when null service value is supplied in the request.</ctl:assertion>
			<ctl:comment>Pass if the server return a valid Exception response; fail otherwise.</ctl:comment>
			<ctl:code>
				<!-- 1.create Submit request with invalid procedure -->
				<xsl:variable name="submitResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$Submit_URL"/>
							</ctl:url> 
							<ctl:body>
								<sps:Submit service="" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:procedure><xsl:value-of select="$procedure" /></sps:procedure>
									<sps:taskingParameters>
										<sps:ParameterData>
											<sps:encoding>
												<swe:TextEncoding tokenSeparator="," blockSeparator=";"/>
											</sps:encoding>
											<sps:values><xsl:value-of select="$TaskingParameters" /></sps:values>
										</sps:ParameterData>
									</sps:taskingParameters>
								</sps:Submit>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateSubmitResponseSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$Submit_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:Submit service="" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:procedure><xsl:value-of select="$procedure" /></sps:procedure>
									<sps:taskingParameters>
										<sps:ParameterData>
											<sps:encoding>
												<swe:TextEncoding tokenSeparator="," blockSeparator=";"/>
											</sps:encoding>
											<sps:values><xsl:value-of select="$TaskingParameters" /></sps:values>
										</sps:ParameterData>
									</sps:taskingParameters>
								</sps:Submit>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateSubmitResponse" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<!-- 2.Check Response -->
				<xsl:choose>
					<xsl:when test="not($submitResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response to an invalid Submit request or the response was not a valid exception.</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$PostEncodingIsSOAP=string('true')">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($submitResponse)" /></ctl:message>
						</xsl:if>
						<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($submitResponse)" /></ctl:message>
						</xsl:if>
						<ctl:message>Checking the response for validity...</ctl:message>
						<xsl:variable name="isCorrect">
							<ctl:call-function name="spsFunctions:checkExceptionReport">
								<ctl:with-param name="exceptionReport" select="$submitResponse" />
								<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
								<ctl:with-param name="locatorToCheck" select="string('service')" />
								<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
							</ctl:call-function>
						</xsl:variable>
						<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
						<xsl:if test="not(xsd:boolean($isCorrect))">
							<ctl:message>FAILURE:  The returned exception report was expected to contain an exceptionCode of MissingParameterValue and a locator of service.</ctl:message>
							<ctl:fail />
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.Submit-RequestInvalidService.1">
			<ctl:param name="procedure" />
			<ctl:param name="TaskingParameters" />
			<ctl:param name="Submit_URL" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>The server returns a valid error report message with a value of InvalidParameterValue for the exceptionCode parameter when invalid service value is supplied in the request.</ctl:assertion>
			<ctl:comment>Pass if the server return a valid Exception response; fail otherwise.</ctl:comment>
			<ctl:code>
				<!-- 1.create Submit request with invalid procedure -->
				<xsl:variable name="submitResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$Submit_URL"/>
							</ctl:url> 
							<ctl:body>
								<sps:Submit service="999" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:procedure><xsl:value-of select="$procedure" /></sps:procedure>
									<sps:taskingParameters>
										<sps:ParameterData>
											<sps:encoding>
												<swe:TextEncoding tokenSeparator="," blockSeparator=";"/>
											</sps:encoding>
											<sps:values><xsl:value-of select="$TaskingParameters" /></sps:values>
										</sps:ParameterData>
									</sps:taskingParameters>
								</sps:Submit>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateSubmitResponseSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$Submit_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:Submit service="999" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:procedure><xsl:value-of select="$procedure" /></sps:procedure>
									<sps:taskingParameters>
										<sps:ParameterData>
											<sps:encoding>
												<swe:TextEncoding tokenSeparator="," blockSeparator=";"/>
											</sps:encoding>
											<sps:values><xsl:value-of select="$TaskingParameters" /></sps:values>
										</sps:ParameterData>
									</sps:taskingParameters>
								</sps:Submit>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateSubmitResponse" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<!-- 2.Check Response -->
				<xsl:choose>
					<xsl:when test="not($submitResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response to an invalid Submit request or the response was not a valid exception.</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$PostEncodingIsSOAP=string('true')">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($submitResponse)" /></ctl:message>
						</xsl:if>
						<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($submitResponse)" /></ctl:message>
						</xsl:if>
						<ctl:message>Checking the response for validity...</ctl:message>
						<xsl:variable name="isCorrect">
							<ctl:call-function name="spsFunctions:checkExceptionReport">
								<ctl:with-param name="exceptionReport" select="$submitResponse" />
								<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
								<ctl:with-param name="locatorToCheck" select="string('service')" />
								<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
							</ctl:call-function>
						</xsl:variable>
						<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
						<xsl:if test="not(xsd:boolean($isCorrect))">
							<ctl:message>FAILURE:  The returned exception report was expected to contain an exceptionCode of InvalidParameterValue and a locator of service</ctl:message>
							<ctl:fail />
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.Submit-RequestNoVersion.1">
			<ctl:param name="procedure" />
			<ctl:param name="TaskingParameters" />
			<ctl:param name="Submit_URL" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>The server returns a valid error report message with a value of InvalidRequest for the exceptionCode parameter when no procedure value is supplied in the request.</ctl:assertion>
			<ctl:comment>Pass if the server return a valid Exception response; fail otherwise.</ctl:comment>
			<ctl:code>
				<!-- 1.create Submit request without procedure -->
				<xsl:variable name="submitResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$Submit_URL"/>
							</ctl:url> 
							<ctl:body>
								<sps:Submit service="SPS" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:procedure><xsl:value-of select="$procedure" /></sps:procedure>
									<sps:taskingParameters>
										<sps:ParameterData>
											<sps:encoding>
												<swe:TextEncoding tokenSeparator="," blockSeparator=";"/>
											</sps:encoding>
											<sps:values><xsl:value-of select="$TaskingParameters" /></sps:values>
										</sps:ParameterData>
									</sps:taskingParameters>
								</sps:Submit>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateSubmitResponseSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$Submit_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:Submit service="SPS" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:procedure><xsl:value-of select="$procedure" /></sps:procedure>
									<sps:taskingParameters>
										<sps:ParameterData>
											<sps:encoding>
												<swe:TextEncoding tokenSeparator="," blockSeparator=";"/>
											</sps:encoding>
											<sps:values><xsl:value-of select="$TaskingParameters" /></sps:values>
										</sps:ParameterData>
									</sps:taskingParameters>
								</sps:Submit>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateSubmitResponse" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<!-- 2.Check Response -->
				<xsl:choose>
					<xsl:when test="not($submitResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response to an invalid Submit request or the response was not a valid exception.</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$PostEncodingIsSOAP=string('true')">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($submitResponse)" /></ctl:message>
						</xsl:if>
						<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($submitResponse)" /></ctl:message>
						</xsl:if>
						<ctl:message>Checking the response for validity...</ctl:message>
						<xsl:variable name="isCorrect">
							<ctl:call-function name="spsFunctions:checkExceptionReport">
								<ctl:with-param name="exceptionReport" select="$submitResponse" />
								<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidRequest')" />
								<ctl:with-param name="locatorToCheck" select="string('Expected attribute: version in element Submit@http://www.opengis.net/sps/2.0')" />
								<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
							</ctl:call-function>
						</xsl:variable>
						<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
						<xsl:if test="not(xsd:boolean($isCorrect))">
							<ctl:message>FAILURE:  The returned exception report was expected to contain an exceptionCode of InvalidRequest and a locator of "Expected attribute: version in element Submit@http://www.opengis.net/sps/2.0".</ctl:message>
							<ctl:fail />
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.Submit-RequestNullVersion.1">
			<ctl:param name="procedure" />
			<ctl:param name="TaskingParameters" />
			<ctl:param name="Submit_URL" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>The server returns a valid error report message with a value of MissingParameterValue for the exceptionCode parameter when invalid procedure value is supplied in the request.</ctl:assertion>
			<ctl:comment>Pass if the server return a valid Exception response; fail otherwise.</ctl:comment>
			<ctl:code>
				<!-- 1.create Submit request with invalid procedure -->
				<xsl:variable name="submitResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$Submit_URL"/>
							</ctl:url> 
							<ctl:body>
								<sps:Submit service="SPS" version="" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:procedure><xsl:value-of select="$procedure" /></sps:procedure>
									<sps:taskingParameters>
										<sps:ParameterData>
											<sps:encoding>
												<swe:TextEncoding tokenSeparator="," blockSeparator=";"/>
											</sps:encoding>
											<sps:values><xsl:value-of select="$TaskingParameters" /></sps:values>
										</sps:ParameterData>
									</sps:taskingParameters>
								</sps:Submit>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateSubmitResponseSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$Submit_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:Submit service="SPS" version="" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:procedure><xsl:value-of select="$procedure" /></sps:procedure>
									<sps:taskingParameters>
										<sps:ParameterData>
											<sps:encoding>
												<swe:TextEncoding tokenSeparator="," blockSeparator=";"/>
											</sps:encoding>
											<sps:values><xsl:value-of select="$TaskingParameters" /></sps:values>
										</sps:ParameterData>
									</sps:taskingParameters>
								</sps:Submit>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateSubmitResponse" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<!-- 2.Check Response -->
				<xsl:choose>
					<xsl:when test="not($submitResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response to an invalid Submit request or the response was not a valid exception.</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$PostEncodingIsSOAP=string('true')">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($submitResponse)" /></ctl:message>
						</xsl:if>
						<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($submitResponse)" /></ctl:message>
						</xsl:if>
						<ctl:message>Checking the response for validity...</ctl:message>
						<xsl:variable name="isCorrect">
							<ctl:call-function name="spsFunctions:checkExceptionReport">
								<ctl:with-param name="exceptionReport" select="$submitResponse" />
								<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
								<ctl:with-param name="locatorToCheck" select="string('version')" />
								<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
							</ctl:call-function>
						</xsl:variable>
						<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
						<xsl:if test="not(xsd:boolean($isCorrect))">
							<ctl:message>FAILURE:  The returned exception report was expected to contain an exceptionCode of MissingParameterValue and a locator of procedure.</ctl:message>
							<ctl:fail />
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.Submit-RequestInvalidVersion.1">
			<ctl:param name="procedure" />
			<ctl:param name="TaskingParameters" />
			<ctl:param name="Submit_URL" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>The server returns a valid error report message with a value of InvalidParameterValue for the exceptionCode parameter when invalid procedure value is supplied in the request.</ctl:assertion>
			<ctl:comment>Pass if the server return a valid Exception response; fail otherwise.</ctl:comment>
			<ctl:code>
				<!-- 1.create Submit request with invalid procedure -->
				<xsl:variable name="submitResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$Submit_URL"/>
							</ctl:url> 
							<ctl:body>
								<sps:Submit service="SPS" version="999" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:procedure><xsl:value-of select="$procedure" /></sps:procedure>
									<sps:taskingParameters>
										<sps:ParameterData>
											<sps:encoding>
												<swe:TextEncoding tokenSeparator="," blockSeparator=";"/>
											</sps:encoding>
											<sps:values><xsl:value-of select="$TaskingParameters" /></sps:values>
										</sps:ParameterData>
									</sps:taskingParameters>
								</sps:Submit>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateSubmitResponseSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$Submit_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:Submit service="SPS" version="999" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:procedure><xsl:value-of select="$procedure" /></sps:procedure>
									<sps:taskingParameters>
										<sps:ParameterData>
											<sps:encoding>
												<swe:TextEncoding tokenSeparator="," blockSeparator=";"/>
											</sps:encoding>
											<sps:values><xsl:value-of select="$TaskingParameters" /></sps:values>
										</sps:ParameterData>
									</sps:taskingParameters>
								</sps:Submit>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateSubmitResponse" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<!-- 2.Check Response -->
				<xsl:choose>
					<xsl:when test="not($submitResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response to an invalid Submit request or the response was not a valid exception.</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$PostEncodingIsSOAP=string('true')">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($submitResponse)" /></ctl:message>
						</xsl:if>
						<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($submitResponse)" /></ctl:message>
						</xsl:if>
						<ctl:message>Checking the response for validity...</ctl:message>
						<xsl:variable name="isCorrect">
							<ctl:call-function name="spsFunctions:checkExceptionReport">
								<ctl:with-param name="exceptionReport" select="$submitResponse" />
								<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
								<ctl:with-param name="locatorToCheck" select="string('version')" />
								<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
							</ctl:call-function>
						</xsl:variable>
						<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
						<xsl:if test="not(xsd:boolean($isCorrect))">
							<ctl:message>FAILURE:  The returned exception report was expected to contain an exceptionCode of InvalidParameterValue and a locator of procedure.</ctl:message>
							<ctl:fail />
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.Submit-RequestNoProcedure.1"><!-- Skip this test because of error schema. -->
			<ctl:param name="TaskingParameters" />
			<ctl:param name="Submit_URL" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>The server returns a valid error report message with a value of InvalidRequest for the exceptionCode parameter when no procedure value is supplied in the request.</ctl:assertion>
			<ctl:comment>Pass if the server return a valid Exception response; fail otherwise.</ctl:comment>
			<ctl:code>
				<!-- 1.create Submit request without procedure -->
				<xsl:variable name="submitResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$Submit_URL"/>
							</ctl:url> 
							<ctl:body>
								<sps:Submit service="SPS" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:taskingParameters>
										<sps:ParameterData>
											<sps:encoding>
												<swe:TextEncoding tokenSeparator="," blockSeparator=";"/>
											</sps:encoding>
											<sps:values><xsl:value-of select="$TaskingParameters" /></sps:values>
										</sps:ParameterData>
									</sps:taskingParameters>
								</sps:Submit>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateSubmitResponseSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$Submit_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:Submit service="SPS" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:taskingParameters>
										<sps:ParameterData>
											<sps:encoding>
												<swe:TextEncoding tokenSeparator="," blockSeparator=";"/>
											</sps:encoding>
											<sps:values><xsl:value-of select="$TaskingParameters" /></sps:values>
										</sps:ParameterData>
									</sps:taskingParameters>
								</sps:Submit>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateSubmitResponse" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<!-- 2.Check Response -->
				<xsl:choose>
					<xsl:when test="not($submitResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response to an invalid Submit request or the response was not a valid exception.</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$PostEncodingIsSOAP=string('true')">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($submitResponse)" /></ctl:message>
						</xsl:if>
						<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($submitResponse)" /></ctl:message>
						</xsl:if>
						<ctl:message>Checking the response for validity...</ctl:message>
						<xsl:variable name="isCorrect">
							<ctl:call-function name="spsFunctions:checkExceptionReport">
								<ctl:with-param name="exceptionReport" select="$submitResponse" />
								<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidRequest')" />
								<ctl:with-param name="locatorToCheck" select="string('procedure')" />
								<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
							</ctl:call-function>
						</xsl:variable>
						<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
						<xsl:if test="not(xsd:boolean($isCorrect))">
							<ctl:message>FAILURE:  The returned exception report was expected to contain an exceptionCode of InvalidRequest and a locator of procedure.</ctl:message>
							<ctl:fail />
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.Submit-RequestNullProcedure.1">
			<ctl:param name="TaskingParameters" />
			<ctl:param name="Submit_URL" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>The server returns a valid error report message with a value of MissingParameterValue for the exceptionCode parameter when invalid procedure value is supplied in the request.</ctl:assertion>
			<ctl:comment>Pass if the server return a valid Exception response; fail otherwise.</ctl:comment>
			<ctl:code>
				<!-- 1.create Submit request with invalid procedure -->
				<xsl:variable name="submitResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$Submit_URL"/>
							</ctl:url> 
							<ctl:body>
								<sps:Submit service="SPS" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:procedure><xsl:value-of select="string('')" /></sps:procedure>
									<sps:taskingParameters>
										<sps:ParameterData>
											<sps:encoding>
												<swe:TextEncoding tokenSeparator="," blockSeparator=";"/>
											</sps:encoding>
											<sps:values><xsl:value-of select="$TaskingParameters" /></sps:values>
										</sps:ParameterData>
									</sps:taskingParameters>
								</sps:Submit>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateSubmitResponseSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$Submit_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:Submit service="SPS" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:procedure><xsl:value-of select="string('')" /></sps:procedure>
									<sps:taskingParameters>
										<sps:ParameterData>
											<sps:encoding>
												<swe:TextEncoding tokenSeparator="," blockSeparator=";"/>
											</sps:encoding>
											<sps:values><xsl:value-of select="$TaskingParameters" /></sps:values>
										</sps:ParameterData>
									</sps:taskingParameters>
								</sps:Submit>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateSubmitResponse" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<!-- 2.Check Response -->
				<xsl:choose>
					<xsl:when test="not($submitResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response to an invalid Submit request or the response was not a valid exception.</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$PostEncodingIsSOAP=string('true')">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($submitResponse)" /></ctl:message>
						</xsl:if>
						<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($submitResponse)" /></ctl:message>
						</xsl:if>
						<ctl:message>Checking the response for validity...</ctl:message>
						<xsl:variable name="isCorrect">
							<ctl:call-function name="spsFunctions:checkExceptionReport">
								<ctl:with-param name="exceptionReport" select="$submitResponse" />
								<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
								<ctl:with-param name="locatorToCheck" select="string('procedure')" />
								<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
							</ctl:call-function>
						</xsl:variable>
						<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
						<xsl:if test="not(xsd:boolean($isCorrect))">
							<ctl:message>FAILURE:  The returned exception report was expected to contain an exceptionCode of MissingParameterValue and a locator of procedure.</ctl:message>
							<ctl:fail />
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.Submit-RequestInvalidProcedure.1">
			<ctl:param name="TaskingParameters" />
			<ctl:param name="Submit_URL" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>The server returns a valid error report message with a value of InvalidParameterValue for the exceptionCode parameter when invalid procedure value is supplied in the request.</ctl:assertion>
			<ctl:comment>Pass if the server return a valid Exception response; fail otherwise.</ctl:comment>
			<ctl:code>
				<!-- 1.create Submit request with invalid procedure -->
				<xsl:variable name="submitResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$Submit_URL"/>
							</ctl:url> 
							<ctl:body>
								<sps:Submit service="SPS" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:procedure><xsl:value-of select="current-dateTime()" /></sps:procedure>
									<sps:taskingParameters>
										<sps:ParameterData>
											<sps:encoding>
												<swe:TextEncoding tokenSeparator="," blockSeparator=";"/>
											</sps:encoding>
											<sps:values><xsl:value-of select="$TaskingParameters" /></sps:values>
										</sps:ParameterData>
									</sps:taskingParameters>
								</sps:Submit>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateSubmitResponseSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$Submit_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:Submit service="SPS" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:procedure><xsl:value-of select="current-dateTime()" /></sps:procedure>
									<sps:taskingParameters>
										<sps:ParameterData>
											<sps:encoding>
												<swe:TextEncoding tokenSeparator="," blockSeparator=";"/>
											</sps:encoding>
											<sps:values><xsl:value-of select="$TaskingParameters" /></sps:values>
										</sps:ParameterData>
									</sps:taskingParameters>
								</sps:Submit>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateSubmitResponse" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<!-- 2.Check Response -->
				<xsl:choose>
					<xsl:when test="not($submitResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response to an invalid Submit request or the response was not a valid exception.</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$PostEncodingIsSOAP=string('true')">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($submitResponse)" /></ctl:message>
						</xsl:if>
						<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($submitResponse)" /></ctl:message>
						</xsl:if>
						<ctl:message>Checking the response for validity...</ctl:message>
						<xsl:variable name="isCorrect">
							<ctl:call-function name="spsFunctions:checkExceptionReport">
								<ctl:with-param name="exceptionReport" select="$submitResponse" />
								<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
								<ctl:with-param name="locatorToCheck" select="string('procedure')" />
								<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
							</ctl:call-function>
						</xsl:variable>
						<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
						<xsl:if test="not(xsd:boolean($isCorrect))">
							<ctl:message>FAILURE:  The returned exception report was expected to contain an exceptionCode of InvalidParameterValue and a locator of procedure.</ctl:message>
							<ctl:fail />
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.Submit-RequestNoTaskingParameters.1"><!-- Skip this test because of error schema. -->
			<ctl:param name="procedure" />
			<ctl:param name="Submit_URL" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>The server returns a valid error report message with a value of InvalidRequest for the exceptionCode parameter when no TaskingParameters value is supplied in the request.</ctl:assertion>
			<ctl:comment>Pass if the server return a valid Exception response; fail otherwise.</ctl:comment>
			<ctl:code>
				<!-- 1.create Submit request without procedure -->
				<xsl:variable name="submitResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$Submit_URL"/>
							</ctl:url> 
							<ctl:body>
								<sps:Submit service="SPS" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:procedure><xsl:value-of select="$procedure" /></sps:procedure> 
								</sps:Submit>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateSubmitResponseSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$Submit_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:Submit service="SPS" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:procedure><xsl:value-of select="$procedure" /></sps:procedure> 
								</sps:Submit>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateSubmitResponse" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<!-- 2.Check Response -->
				<xsl:choose>
					<xsl:when test="not($submitResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response to an invalid Submit request or the response was not a valid exception.</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$PostEncodingIsSOAP=string('true')">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($submitResponse)" /></ctl:message>
						</xsl:if>
						<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($submitResponse)" /></ctl:message>
						</xsl:if>
						<ctl:message>Checking the response for validity...</ctl:message>
						<xsl:variable name="isCorrect">
							<ctl:call-function name="spsFunctions:checkExceptionReport">
								<ctl:with-param name="exceptionReport" select="$submitResponse" />
								<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidRequest')" />
								<ctl:with-param name="locatorToCheck" select="string('TaskingParameters')" />
								<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
							</ctl:call-function>
						</xsl:variable>
						<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
						<xsl:if test="not(xsd:boolean($isCorrect))">
							<ctl:message>FAILURE:  The returned exception report was expected to contain an exceptionCode of InvalidRequest and a locator of TaskingParameters.</ctl:message>
							<ctl:fail />
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.Submit-RequestNullTaskingParameters.1"><!-- skip this test because of error schema -->
			<ctl:param name="procedure" />
			<ctl:param name="Submit_URL" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>The server returns a valid error report message with a value of MissingParameterValue for the exceptionCode parameter when invalid taskingParameters value is supplied in the request.</ctl:assertion>
			<ctl:comment>Pass if the server return a valid Exception response; fail otherwise.</ctl:comment>
			<ctl:code>
				<!-- 1.create Submit request with invalid procedure -->
				<xsl:variable name="submitResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$Submit_URL"/>
							</ctl:url> 
							<ctl:body>
								<sps:Submit service="SPS" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:procedure><xsl:value-of select="$procedure" /></sps:procedure>
									<sps:taskingParameters><xsl:value-of select="string('')" /></sps:taskingParameters>
								</sps:Submit>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateSubmitResponseSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$Submit_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:Submit service="SPS" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:procedure><xsl:value-of select="$procedure" /></sps:procedure>
									<sps:taskingParameters><xsl:value-of select="string('')" /></sps:taskingParameters>
								</sps:Submit>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateSubmitResponse" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<!-- 2.Check Response -->
				<xsl:choose>
					<xsl:when test="not($submitResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response to an invalid Submit request or the response was not a valid exception.</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$PostEncodingIsSOAP=string('true')">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($submitResponse)" /></ctl:message>
						</xsl:if>
						<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($submitResponse)" /></ctl:message>
						</xsl:if>
						<ctl:message>Checking the response for validity...</ctl:message>
						<xsl:variable name="isCorrect">
							<ctl:call-function name="spsFunctions:checkExceptionReport">
								<ctl:with-param name="exceptionReport" select="$submitResponse" />
								<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
								<ctl:with-param name="locatorToCheck" select="string('taskingParameters')" />
								<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
							</ctl:call-function>
						</xsl:variable>
						<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
						<xsl:if test="not(xsd:boolean($isCorrect))">
							<ctl:message>FAILURE:  The returned exception report was expected to contain an exceptionCode of MissingParameterValue and a locator of taskingParameters.</ctl:message>
							<ctl:fail />
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.Submit-RequestInvalidTaskingParameters.1"><!-- skip this test because of error schema -->
			<ctl:param name="procedure" />
			<ctl:param name="Submit_URL" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>The server returns a valid error report message with a value of InvalidParameterValue for the exceptionCode parameter when invalid taskingParameters value is supplied in the request.</ctl:assertion>
			<ctl:comment>Pass if the server return a valid Exception response; fail otherwise.</ctl:comment>
			<ctl:code>
				<!-- 1.create Submit request with invalid procedure -->
				<xsl:variable name="submitResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$Submit_URL"/>
							</ctl:url> 
							<ctl:body>
								<sps:Submit service="SPS" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:procedure><xsl:value-of select="$procedure" /></sps:procedure>
									<sps:taskingParameters><xsl:value-of select="current-dateTime()" /></sps:taskingParameters>
								</sps:Submit>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateSubmitResponseSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$Submit_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:Submit service="SPS" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:procedure><xsl:value-of select="$procedure" /></sps:procedure>
									<sps:taskingParameters><xsl:value-of select="current-dateTime()" /></sps:taskingParameters>
								</sps:Submit>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateSubmitResponse" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<!-- 2.Check Response -->
				<xsl:choose>
					<xsl:when test="not($submitResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response to an invalid Submit request or the response was not a valid exception.</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$PostEncodingIsSOAP=string('true')">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($submitResponse)" /></ctl:message>
						</xsl:if>
						<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($submitResponse)" /></ctl:message>
						</xsl:if>
						<ctl:message>Checking the response for validity...</ctl:message>
						<xsl:variable name="isCorrect">
							<ctl:call-function name="spsFunctions:checkExceptionReport">
								<ctl:with-param name="exceptionReport" select="$submitResponse" />
								<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
								<ctl:with-param name="locatorToCheck" select="string('taskingParameters')" />
								<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
							</ctl:call-function>
						</xsl:variable>
						<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
						<xsl:if test="not(xsd:boolean($isCorrect))">
							<ctl:message>FAILURE:  The returned exception report was expected to contain an exceptionCode of InvalidParameterValue and a locator of taskingParameters.</ctl:message>
							<ctl:fail />
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.Submit-RequestNormal.1">
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="DescribeTasking_URL" />
			<ctl:param name="Submit_URL" />
			<ctl:param name="GetStatus_URL" />
			<ctl:param name="GetTask_URL" />
			<ctl:param name="DescribeResultAccess_URL" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>All Submit request with valid parameters have correct response.</ctl:assertion>
			<ctl:comment>Pass if all Submit response are correct; fail otherwise.</ctl:comment>
			<ctl:code>
				<!-- 
					檢查每個 getCapabilities 的 offering 的 procedure
					送出 describeTasking request取得 response 的 TaskingParameters 
					再送出 Submit request 檢查 response 是否符合格式
				-->
				<xsl:for-each select="$getCapabilitiesResponse//sps:contents/sps:SPSContents/swes:offering">
					<xsl:variable name="procedure" select="./sps:SensorOffering/swes:procedure" />
					<ctl:message>Sending DescribeTasking request with procedure "<xsl:value-of select="$procedure" />"</ctl:message>
					<xsl:variable name="describeTaskingResponse">
						<xsl:if test="$PostEncodingIsSOAP=string('true')">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$DescribeTasking_URL"/>
								</ctl:url> 
								<ctl:body>
									<sps:DescribeTasking service="SPS" version="2.0.0" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
										<sps:procedure><xsl:value-of select="$procedure" /></sps:procedure>
									</sps:DescribeTasking>
								</ctl:body>
								<ctl:call-function name="spsFunctions:validateDescribeTaskingResponseSOAP" />
							</ctl:soap-request>
						</xsl:if>
						<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$DescribeTasking_URL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sps:DescribeTasking service="SPS" version="2.0.0" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
										<sps:procedure><xsl:value-of select="$procedure" /></sps:procedure>
									</sps:DescribeTasking>
								</ctl:body>
								<ctl:call-function name="spsFunctions:validateDescribeTaskingResponse" />
							</ctl:request>
						</xsl:if>
					</xsl:variable>
					<xsl:choose>
						<xsl:when test="not($describeTaskingResponse/*)">
							<ctl:message>FAILURE:  No response was returned from the server for a DescribeTasking request with procedure "<xsl:value-of select="$procedure" />", or the response did not validate according to the DescribeTasking schema.</ctl:message>
							<ctl:fail />
						</xsl:when>
						<xsl:otherwise>
							<xsl:variable name="TaskingParameters" select="spsFunctions:ConcatSubmitValues($describeTaskingResponse//sps:DescribeTaskingResponse/sps:taskingParameters)" />
							<xsl:variable name="submitResponse">
								<xsl:if test="$PostEncodingIsSOAP=string('true')">
									<ctl:soap-request version="1.2" charset="UTF-8">
										<ctl:url>
											<xsl:value-of select="$Submit_URL"/>
										</ctl:url> 
										<ctl:body>
											<sps:Submit service="SPS" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
												<sps:procedure><xsl:value-of select="$procedure" /></sps:procedure>
												<sps:taskingParameters>
													<sps:ParameterData>
														<sps:encoding>
															<swe:TextEncoding tokenSeparator="," blockSeparator=";"/>
														</sps:encoding>
														<sps:values><xsl:value-of select="$TaskingParameters" /></sps:values>
													</sps:ParameterData>
												</sps:taskingParameters>
											</sps:Submit>
										</ctl:body>
										<ctl:call-function name="spsFunctions:validateSubmitResponseSOAP" />
									</ctl:soap-request>
								</xsl:if>
								<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
									<ctl:request>
										<ctl:url>
											<xsl:value-of select="$Submit_URL" />
										</ctl:url>
										<ctl:method>post</ctl:method>
										<ctl:body>
											<sps:Submit service="SPS" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
												<sps:procedure><xsl:value-of select="$procedure" /></sps:procedure>
												<sps:taskingParameters>
													<sps:ParameterData>
														<sps:encoding>
															<swe:TextEncoding tokenSeparator="," blockSeparator=";"/>
														</sps:encoding>
														<sps:values><xsl:value-of select="$TaskingParameters" /></sps:values>
													</sps:ParameterData>
												</sps:taskingParameters>
											</sps:Submit>
										</ctl:body>
										<ctl:call-function name="spsFunctions:validateSubmitResponse" />
									</ctl:request>
								</xsl:if>
							</xsl:variable>
							<xsl:choose>
								<xsl:when test="not($submitResponse/*)">
									<ctl:message>FAILURE:  No response was returned from the server for a Submit request with procedure "<xsl:value-of select="$procedure" />", or the response did not validate according to the Submit schema.</ctl:message>
									<ctl:fail />
								</xsl:when>
								<xsl:when test="not(local-name-from-QName(node-name($submitResponse/*[1]))=string('SubmitResponse'))">
									<ctl:message>FAILURE:  The root element from the response to a Submit request "<xsl:value-of select="local-name-from-QName(node-name($submitResponse/*[1]))" />" does not match the expected root element of "SubmitResponse".</ctl:message>
									<ctl:fail />
								</xsl:when>
								<!-- 要有一個 task 元素 且不能是空的 -->
								<xsl:when test="not(count($submitResponse//sps:task)=1) or string-length($submitResponse//sps:task)=0">
									<ctl:message>FAILURE:  There must be one and only one "task" element in the submit response.</ctl:message>
									<ctl:fail />
								</xsl:when>
								<!-- 要有一個 procedure 元素 且跟 request 依樣 -->
								<xsl:when test="not(count($submitResponse//sps:procedure)=1)">
									<ctl:message>FAILURE:  There must be one and only one "procedure" element in the submit response.</ctl:message>
									<ctl:fail />
								</xsl:when>
								<xsl:when test="not($submitResponse//sps:procedure=$procedure)">
									<ctl:message>FAILURE: The value of the element procedure in the Submit response "<xsl:value-of select="$submitResponse//sps:procedure" />" does not match the value in the describeTasking request "<xsl:value-of select="$procedure" />".</ctl:message>
									<ctl:fail />
								</xsl:when>
								<!-- 要有一個 updateTime 元素 -->
								<xsl:when test="not(count($submitResponse//sps:updateTime)=1)">
									<ctl:message>FAILURE:  There must be one and only one "task" element in the submit response.</ctl:message>
									<ctl:fail />
								</xsl:when>
								<!-- 要有一個 requestStatus 元素 Pending,Accepted,Rejected 三選一-->
								<xsl:when test="not(count($submitResponse//sps:requestStatus)=1)">
									<ctl:message>FAILURE:  There must be one and only one "task" element in the submit response.</ctl:message>
									<ctl:fail />
								</xsl:when>
								<!-- Pending 或 Rejected 的話 沒有 event,percentCompletion,taskStatus -->
								<xsl:when test="($submitResponse//sps:requestStatus=string('Pending') or $submitResponse//sps:requestStatus=string('Rejected')) and (not(count($submitResponse//sps:event)=0) or not(count($submitResponse//sps:percentCompletion)=0) or not(count($submitResponse//sps:taskStatus)=0))">
									<ctl:message>FAILURE:  When requestStatus = "Pending" or requestStatus = "Rejected" ,It must have no element of "event,percentCompletion,taskStatus" in the response.</ctl:message>
									<ctl:fail />
								</xsl:when>
								<!-- Accepted 的話	1.event=TaskSubmitted,percentCompletion=0,taskStatus=InExecution
													2.event=TaskCompleted,percentCompletion=100,taskStatus=Completed -->
								<xsl:when test="($submitResponse//sps:requestStatus=string('Accepted')) and not(count($submitResponse//sps:event)=1) or not(count($submitResponse//sps:percentCompletion)=1) or not(count($submitResponse//sps:taskStatus)=1)">
									<ctl:message>FAILURE:  When requestStatus = "Accepted" ,there is one and only one element for each element in "event,percentCompletion,taskStatus" in the response.</ctl:message>
									<ctl:fail />
								</xsl:when>
								<xsl:when test="($submitResponse//sps:requestStatus=string('Accepted')) and not($submitResponse//sps:event=string('TaskSubmitted') and $submitResponse//sps:percentCompletion=string('0') and $submitResponse//sps:taskStatus=string('InExecution')) and not($submitResponse//sps:event=string('TaskCompleted') and $submitResponse//sps:percentCompletion=string('100') and $submitResponse//sps:taskStatus=string('Completed'))">
									<ctl:message>FAILURE:  When requestStatus = "Accepted" ,the element value is not correct in the Submit response,see SPS 2.0 Standard Table 31 of [OGC 09-000].</ctl:message>
									<ctl:fail />
								</xsl:when>
								<xsl:otherwise>
									<!-- 預計要檢查 GetStatus 和 GetTask 在這邊檢查才不用重複送出多個submit -->
									<!-- GetStatus 需要 Task -->
									<xsl:variable name="task" select="$submitResponse//sps:task" />

									<!-- get a GetStatus_URL -->
									<ctl:message>GetStatus URL:  <xsl:value-of select="$GetStatus_URL" /></ctl:message>

									<!-- 取得是否支援since -->
									<xsl:variable name="SupportSince">
										<xsl:value-of select="count($getCapabilitiesResponse//ows:OperationsMetadata/ows:Operation[@name='GetStatus']/ows:Parameter[@name='since'])>0" />
									</xsl:variable>
									
									<!-- 呼叫 GetStatus 檢查回應是否正確 -->
									<ctl:call-test name="sps:core-SPS.GetStatus-mainRequest.1">
										<ctl:with-param name="GetStatus_URL" select="$GetStatus_URL" />
										<ctl:with-param name="task" select="$task" />
										<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
										<ctl:with-param name="SupportSince" select="$SupportSince" />
									</ctl:call-test>
									
									<!-- get a GetTask_URL -->
									<ctl:message>GetTask URL:  <xsl:value-of select="$GetTask_URL" /></ctl:message>

									<!-- 呼叫 GetTask 檢查回應是否正確 -->
									<ctl:call-test name="sps:core-SPS.GetTask-mainRequest.1">
										<ctl:with-param name="GetTask_URL" select="$GetTask_URL" />
										<ctl:with-param name="task" select="$task" />
										<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
									</ctl:call-test>
									
									<!-- get a DescribeResultAccess_URL -->
									<ctl:message>DescribeResultAccess URL:  <xsl:value-of select="$DescribeResultAccess_URL" /></ctl:message>

									<!-- 呼叫 DescribeResultAccess 檢查回應是否正確 -->
									<ctl:call-test name="sps:core-SPS.DescribeResultAccess-RequestWithTask.1">
										<ctl:with-param name="DescribeResultAccess_URL" select="$DescribeResultAccess_URL" />
										<ctl:with-param name="task" select="$task" />
										<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
									</ctl:call-test>									
								</xsl:otherwise>
							</xsl:choose>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:for-each>
			</ctl:code>
		</ctl:test>

	</ctl:package>
	
	<ctl:package><!--GetStatus tests-->
		<ctl:test name="sps:core-SPS.GetStatus">
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:param name="DescribeTasking_URL" />
			<ctl:param name="Submit_URL" />
			<ctl:param name="GetStatus_URL" />
			<ctl:assertion>Execute GetStatus Test.</ctl:assertion>
			<ctl:comment>Pass if all the subtest not fail; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that the server handles missing parameters correctly.">docs/SPS%202.0%20ATS.html#SPS.GetStatus</ctl:link>
			<ctl:code>
				<!-- 取得是否支援since -->
				<xsl:variable name="SupportSince">
					<xsl:value-of select="count($getCapabilitiesResponse//ows:OperationsMetadata/ows:Operation[@name='GetStatus']/ows:Parameter[@name='since'])>0" />
				</xsl:variable>
				
				<!-- get a valid procedure value -->
				<xsl:variable name="procedure" select="$getCapabilitiesResponse//swes:procedure"/>
				
				<!-- get a valid TaskingParameters value -->
				<xsl:variable name="describeTaskingResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$DescribeTasking_URL"/>
							</ctl:url> 
							<ctl:body>
								<sps:DescribeTasking service="SPS" version="2.0.0" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:procedure><xsl:value-of select="$procedure" /></sps:procedure>
								</sps:DescribeTasking>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateDescribeTaskingResponseSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$DescribeTasking_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:DescribeTasking service="SPS" version="2.0.0" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:procedure><xsl:value-of select="$procedure" /></sps:procedure>
								</sps:DescribeTasking>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateDescribeTaskingResponse" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<xsl:variable name="TaskingParameters" select="$describeTaskingResponse//sps:DescribeTaskingResponse/sps:taskingParameters" />
				
				<!-- get a valid task -->
				<xsl:variable name="submitResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$Submit_URL"/>
							</ctl:url> 
							<ctl:body>
								<sps:Submit service="SPS" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:procedure><xsl:value-of select="$procedure" /></sps:procedure>
									<sps:taskingParameters><xsl:value-of select="$TaskingParameters" /></sps:taskingParameters>
								</sps:Submit>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateSubmitResponseSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$Submit_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:Submit service="SPS" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:procedure><xsl:value-of select="$procedure" /></sps:procedure>
									<sps:taskingParameters><xsl:value-of select="$TaskingParameters" /></sps:taskingParameters>
								</sps:Submit>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateSubmitResponse" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<xsl:variable name="task" select="$submitResponse//sps:SubmitResponse/sps:result/sps:StatusReport/sps:task" />
				
				<!-- get a GetStatus_URL -->
				<ctl:message>GetStatus URL:  <xsl:value-of select="$GetStatus_URL" /></ctl:message>
				
				<!-- 0.1.request no service -->
				<ctl:call-test name="sps:core-SPS.GetStatus-RequestNoService.1">
					<ctl:with-param name="GetStatus_URL" select="$GetStatus_URL" />
					<ctl:with-param name="task" select="$task" />
					<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
				</ctl:call-test>
				
				<!-- 0.2.request null service -->
				<ctl:call-test name="sps:core-SPS.GetStatus-RequestNullService.1">
					<ctl:with-param name="GetStatus_URL" select="$GetStatus_URL" />
					<ctl:with-param name="task" select="$task" />
					<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
				</ctl:call-test>
				
				<!-- 0.3.request invalid service -->
				<ctl:call-test name="sps:core-SPS.GetStatus-RequestInvalidService.1">
					<ctl:with-param name="GetStatus_URL" select="$GetStatus_URL" />
					<ctl:with-param name="task" select="$task" />
					<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
				</ctl:call-test>
				<!-- 0.4.request no version -->
				<ctl:call-test name="sps:core-SPS.GetStatus-RequestNoVersion.1">
					<ctl:with-param name="GetStatus_URL" select="$GetStatus_URL" />
					<ctl:with-param name="task" select="$task" />
					<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
				</ctl:call-test>
				
				<!-- 0.5.request null version -->
				<ctl:call-test name="sps:core-SPS.GetStatus-RequestNullVersion.1">
					<ctl:with-param name="GetStatus_URL" select="$GetStatus_URL" />
					<ctl:with-param name="task" select="$task" />
					<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
				</ctl:call-test>
				
				<!-- 0.6.request invalid version -->
				<ctl:call-test name="sps:core-SPS.GetStatus-RequestInvalidVersion.1">
					<ctl:with-param name="GetStatus_URL" select="$GetStatus_URL" />
					<ctl:with-param name="task" select="$task" />
					<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
				</ctl:call-test>
				
				<!-- 1.1.request no task Skip this test because of error schema 
				<ctl:call-test name="sps:core-SPS.GetStatus-RequestNoTask.1">
					<ctl:with-param name="GetStatus_URL" select="$GetStatus_URL" />
					<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
				</ctl:call-test>-->
				
				<!-- 1.2.request null task -->
				<ctl:call-test name="sps:core-SPS.GetStatus-RequestNullTask.1">
					<ctl:with-param name="GetStatus_URL" select="$GetStatus_URL" />
					<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
				</ctl:call-test>
				
				<!-- 1.3.request invalid task -->
				<ctl:call-test name="sps:core-SPS.GetStatus-RequestInvalidTask.1">
					<ctl:with-param name="GetStatus_URL" select="$GetStatus_URL" />
					<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
				</ctl:call-test>
				
				<xsl:if test="not($SupportSince=string('true'))">
					<!-- 2.1.service don't support since but send a request with since-->
					<ctl:call-test name="sps:core-SPS.GetStatus-RequestWithSinceButServiceNoSupport.1">
						<ctl:with-param name="GetStatus_URL" select="$GetStatus_URL" />
						<ctl:with-param name="task" select="$task" />
						<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
					</ctl:call-test>
				</xsl:if>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.GetStatus-RequestNoService.1">
			<ctl:param name="GetStatus_URL" />
			<ctl:param name="task" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>The server returns a valid error report message with a value of InvalidRequest for the exceptionCode parameter when no Task value is supplied in the request.</ctl:assertion>
			<ctl:comment>Pass if the server return a valid Exception response; fail otherwise.</ctl:comment>
			<ctl:code>
				<!-- 1.create GetStatus request without task -->
				<xsl:variable name="GetStatusResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$GetStatus_URL"/>
							</ctl:url> 
							<ctl:body>
								<sps:GetStatus version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:task><xsl:value-of select="$task" /></sps:task>
								</sps:GetStatus>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateGetStatusResponseSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$GetStatus_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:GetStatus version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:task><xsl:value-of select="$task" /></sps:task>
								</sps:GetStatus>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateGetStatusResponse" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<!-- 2.Check Response -->
				<xsl:choose>
					<xsl:when test="not($GetStatusResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response to an invalid GetStatus request or the response was not a valid exception.</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$PostEncodingIsSOAP=string('true')">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($GetStatusResponse)" /></ctl:message>
						</xsl:if>
						<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($GetStatusResponse)" /></ctl:message>
						</xsl:if>
						<ctl:message>Checking the response for validity...</ctl:message>
						<xsl:variable name="isCorrect">
							<ctl:call-function name="spsFunctions:checkExceptionReport">
								<ctl:with-param name="exceptionReport" select="$GetStatusResponse" />
								<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidRequest')" />
								<ctl:with-param name="locatorToCheck" select="string('Expected attribute: service in element GetStatus@http://www.opengis.net/sps/2.0')" />
								<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
							</ctl:call-function>
						</xsl:variable>
						<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
						<xsl:if test="not(xsd:boolean($isCorrect))">
							<ctl:message>FAILURE:  The returned exception report was expected to contain an exceptionCode of InvalidRequest and a locator of "Expected attribute: service in element GetStatus@http://www.opengis.net/sps/2.0".</ctl:message>
							<ctl:fail />
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.GetStatus-RequestNullService.1">
			<ctl:param name="GetStatus_URL" />
			<ctl:param name="task" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>The server returns a valid error report message with a value of MissingParameterValue for the exceptionCode parameter when invalid task value is supplied in the request.</ctl:assertion>
			<ctl:comment>Pass if the server return a valid Exception response; fail otherwise.</ctl:comment>
			<ctl:code>
				<!-- 1.create GetStatus request with invalid procedure -->
				<xsl:variable name="GetStatusResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$GetStatus_URL"/>
							</ctl:url> 
							<ctl:body>
								<sps:GetStatus service="" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:task><xsl:value-of select="$task" /></sps:task>
								</sps:GetStatus>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateGetStatusResponseSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$GetStatus_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:GetStatus service="" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:task><xsl:value-of select="$task" /></sps:task>
								</sps:GetStatus>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateGetStatusResponse" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<!-- 2.Check Response -->
				<xsl:choose>
					<xsl:when test="not($GetStatusResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response to an invalid GetStatus request or the response was not a valid exception.</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$PostEncodingIsSOAP=string('true')">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($GetStatusResponse)" /></ctl:message>
						</xsl:if>
						<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($GetStatusResponse)" /></ctl:message>
						</xsl:if>
						<ctl:message>Checking the response for validity...</ctl:message>
						<xsl:variable name="isCorrect">
							<ctl:call-function name="spsFunctions:checkExceptionReport">
								<ctl:with-param name="exceptionReport" select="$GetStatusResponse" />
								<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
								<ctl:with-param name="locatorToCheck" select="string('service')" />
								<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
							</ctl:call-function>
						</xsl:variable>
						<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
						<xsl:if test="not(xsd:boolean($isCorrect))">
							<ctl:message>FAILURE:  The returned exception report was expected to contain an exceptionCode of MissingParameterValue and a locator of task.</ctl:message>
							<ctl:fail />
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.GetStatus-RequestInvalidService.1">
			<ctl:param name="GetStatus_URL" />
			<ctl:param name="task" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>The server returns a valid error report message with a value of InvalidParameterValue for the exceptionCode parameter when invalid task value is supplied in the request.</ctl:assertion>
			<ctl:comment>Pass if the server return a valid Exception response; fail otherwise.</ctl:comment>
			<ctl:code>
				<!-- 1.create GetStatus request with invalid procedure -->
				<xsl:variable name="GetStatusResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$GetStatus_URL"/>
							</ctl:url> 
							<ctl:body>
								<sps:GetStatus service="999" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:task><xsl:value-of select="$task" /></sps:task>
								</sps:GetStatus>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateGetStatusResponseSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$GetStatus_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:GetStatus service="999" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:task><xsl:value-of select="$task" /></sps:task>
								</sps:GetStatus>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateGetStatusResponse" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<!-- 2.Check Response -->
				<xsl:choose>
					<xsl:when test="not($GetStatusResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response to an invalid GetStatus request or the response was not a valid exception.</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$PostEncodingIsSOAP=string('true')">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($GetStatusResponse)" /></ctl:message>
						</xsl:if>
						<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($GetStatusResponse)" /></ctl:message>
						</xsl:if>
						<ctl:message>Checking the response for validity...</ctl:message>
						<xsl:variable name="isCorrect">
							<ctl:call-function name="spsFunctions:checkExceptionReport">
								<ctl:with-param name="exceptionReport" select="$GetStatusResponse" />
								<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
								<ctl:with-param name="locatorToCheck" select="string('service')" />
								<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
							</ctl:call-function>
						</xsl:variable>
						<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
						<xsl:if test="not(xsd:boolean($isCorrect))">
							<ctl:message>FAILURE:  The returned exception report was expected to contain an exceptionCode of InvalidParameterValue and a locator of task.</ctl:message>
							<ctl:fail />
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.GetStatus-RequestNoVersion.1">
			<ctl:param name="GetStatus_URL" />
			<ctl:param name="task" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>The server returns a valid error report message with a value of InvalidRequest for the exceptionCode parameter when no version value is supplied in the request.</ctl:assertion>
			<ctl:comment>Pass if the server return a valid Exception response; fail otherwise.</ctl:comment>
			<ctl:code>
				<!-- 1.create GetStatus request without task -->
				<xsl:variable name="GetStatusResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$GetStatus_URL"/>
							</ctl:url> 
							<ctl:body>
								<sps:GetStatus service="SPS" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:task><xsl:value-of select="$task" /></sps:task>
								</sps:GetStatus>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateGetStatusResponseSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$GetStatus_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:GetStatus service="SPS" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:task><xsl:value-of select="$task" /></sps:task>
								</sps:GetStatus>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateGetStatusResponse" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<!-- 2.Check Response -->
				<xsl:choose>
					<xsl:when test="not($GetStatusResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response to an invalid GetStatus request or the response was not a valid exception.</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$PostEncodingIsSOAP=string('true')">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($GetStatusResponse)" /></ctl:message>
						</xsl:if>
						<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($GetStatusResponse)" /></ctl:message>
						</xsl:if>
						<ctl:message>Checking the response for validity...</ctl:message>
						<xsl:variable name="isCorrect">
							<ctl:call-function name="spsFunctions:checkExceptionReport">
								<ctl:with-param name="exceptionReport" select="$GetStatusResponse" />
								<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidRequest')" />
								<ctl:with-param name="locatorToCheck" select="string('Expected attribute: version in element GetStatus@http://www.opengis.net/sps/2.0')" />
								<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
							</ctl:call-function>
						</xsl:variable>
						<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
						<xsl:if test="not(xsd:boolean($isCorrect))">
							<ctl:message>FAILURE:  The returned exception report was expected to contain an exceptionCode of InvalidRequest and a locator of "Expected attribute: version in element GetStatus@http://www.opengis.net/sps/2.0".</ctl:message>
							<ctl:fail />
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.GetStatus-RequestNullVersion.1">
			<ctl:param name="GetStatus_URL" />
			<ctl:param name="task" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>The server returns a valid error report message with a value of MissingParameterValue for the exceptionCode parameter when null version value is supplied in the request.</ctl:assertion>
			<ctl:comment>Pass if the server return a valid Exception response; fail otherwise.</ctl:comment>
			<ctl:code>
				<!-- 1.create GetStatus request with invalid procedure -->
				<xsl:variable name="GetStatusResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$GetStatus_URL"/>
							</ctl:url> 
							<ctl:body>
								<sps:GetStatus service="SPS" version="" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:task><xsl:value-of select="$task" /></sps:task>
								</sps:GetStatus>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateGetStatusResponseSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$GetStatus_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:GetStatus service="SPS" version="" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:task><xsl:value-of select="$task" /></sps:task>
								</sps:GetStatus>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateGetStatusResponse" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<!-- 2.Check Response -->
				<xsl:choose>
					<xsl:when test="not($GetStatusResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response to an invalid GetStatus request or the response was not a valid exception.</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$PostEncodingIsSOAP=string('true')">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($GetStatusResponse)" /></ctl:message>
						</xsl:if>
						<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($GetStatusResponse)" /></ctl:message>
						</xsl:if>
						<ctl:message>Checking the response for validity...</ctl:message>
						<xsl:variable name="isCorrect">
							<ctl:call-function name="spsFunctions:checkExceptionReport">
								<ctl:with-param name="exceptionReport" select="$GetStatusResponse" />
								<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
								<ctl:with-param name="locatorToCheck" select="string('version')" />
								<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
							</ctl:call-function>
						</xsl:variable>
						<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
						<xsl:if test="not(xsd:boolean($isCorrect))">
							<ctl:message>FAILURE:  The returned exception report was expected to contain an exceptionCode of MissingParameterValue and a locator of version.</ctl:message>
							<ctl:fail />
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.GetStatus-RequestInvalidVersion.1">
			<ctl:param name="GetStatus_URL" />
			<ctl:param name="task" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>The server returns a valid error report message with a value of InvalidParameterValue for the exceptionCode parameter when invalid version value is supplied in the request.</ctl:assertion>
			<ctl:comment>Pass if the server return a valid Exception response; fail otherwise.</ctl:comment>
			<ctl:code>
				<!-- 1.create GetStatus request with invalid procedure -->
				<xsl:variable name="GetStatusResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$GetStatus_URL"/>
							</ctl:url> 
							<ctl:body>
								<sps:GetStatus service="SPS" version="999" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:task><xsl:value-of select="$task" /></sps:task>
								</sps:GetStatus>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateGetStatusResponseSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$GetStatus_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:GetStatus service="SPS" version="999" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:task><xsl:value-of select="$task" /></sps:task>
								</sps:GetStatus>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateGetStatusResponse" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<!-- 2.Check Response -->
				<xsl:choose>
					<xsl:when test="not($GetStatusResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response to an invalid GetStatus request or the response was not a valid exception.</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$PostEncodingIsSOAP=string('true')">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($GetStatusResponse)" /></ctl:message>
						</xsl:if>
						<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($GetStatusResponse)" /></ctl:message>
						</xsl:if>
						<ctl:message>Checking the response for validity...</ctl:message>
						<xsl:variable name="isCorrect">
							<ctl:call-function name="spsFunctions:checkExceptionReport">
								<ctl:with-param name="exceptionReport" select="$GetStatusResponse" />
								<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
								<ctl:with-param name="locatorToCheck" select="string('version')" />
								<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
							</ctl:call-function>
						</xsl:variable>
						<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
						<xsl:if test="not(xsd:boolean($isCorrect))">
							<ctl:message>FAILURE:  The returned exception report was expected to contain an exceptionCode of InvalidParameterValue and a locator of version.</ctl:message>
							<ctl:fail />
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.GetStatus-RequestNoTask.1">
			<ctl:param name="GetStatus_URL" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>The server returns a valid error report message with a value of InvalidRequest for the exceptionCode parameter when no Task value is supplied in the request.</ctl:assertion>
			<ctl:comment>Pass if the server return a valid Exception response; fail otherwise.</ctl:comment>
			<ctl:code>
				<!-- 1.create GetStatus request without task -->
				<xsl:variable name="GetStatusResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$GetStatus_URL"/>
							</ctl:url> 
							<ctl:body>
								<sps:GetStatus service="SPS" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
								</sps:GetStatus>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateGetStatusResponseSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$GetStatus_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:GetStatus service="SPS" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
								</sps:GetStatus>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateGetStatusResponse" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<!-- 2.Check Response -->
				<xsl:choose>
					<xsl:when test="not($GetStatusResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response to an invalid GetStatus request or the response was not a valid exception.</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$PostEncodingIsSOAP=string('true')">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($GetStatusResponse)" /></ctl:message>
						</xsl:if>
						<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($GetStatusResponse)" /></ctl:message>
						</xsl:if>
						<ctl:message>Checking the response for validity...</ctl:message>
						<xsl:variable name="isCorrect">
							<ctl:call-function name="spsFunctions:checkExceptionReport">
								<ctl:with-param name="exceptionReport" select="$GetStatusResponse" />
								<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidRequest')" />
								<ctl:with-param name="locatorToCheck" select="string('task')" />
								<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
							</ctl:call-function>
						</xsl:variable>
						<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
						<xsl:if test="not(xsd:boolean($isCorrect))">
							<ctl:message>FAILURE:  The returned exception report was expected to contain an exceptionCode of InvalidRequest and a locator of task.</ctl:message>
							<ctl:fail />
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.GetStatus-RequestNullTask.1">
			<ctl:param name="GetStatus_URL" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>The server returns a valid error report message with a value of MissingParameterValue for the exceptionCode parameter when invalid task value is supplied in the request.</ctl:assertion>
			<ctl:comment>Pass if the server return a valid Exception response; fail otherwise.</ctl:comment>
			<ctl:code>
				<!-- 1.create Submit request with invalid procedure -->
				<xsl:variable name="GetStatusResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$GetStatus_URL"/>
							</ctl:url> 
							<ctl:body>
								<sps:GetStatus service="SPS" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:task><xsl:value-of select="string('')" /></sps:task>
								</sps:GetStatus>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateGetStatusResponseSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$GetStatus_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:GetStatus service="SPS" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:task><xsl:value-of select="string('')" /></sps:task>
								</sps:GetStatus>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateGetStatusResponse" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<!-- 2.Check Response -->
				<xsl:choose>
					<xsl:when test="not($GetStatusResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response to an invalid Submit request or the response was not a valid exception.</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$PostEncodingIsSOAP=string('true')">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($GetStatusResponse)" /></ctl:message>
						</xsl:if>
						<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($GetStatusResponse)" /></ctl:message>
						</xsl:if>
						<ctl:message>Checking the response for validity...</ctl:message>
						<xsl:variable name="isCorrect">
							<ctl:call-function name="spsFunctions:checkExceptionReport">
								<ctl:with-param name="exceptionReport" select="$GetStatusResponse" />
								<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
								<ctl:with-param name="locatorToCheck" select="string('task')" />
								<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
							</ctl:call-function>
						</xsl:variable>
						<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
						<xsl:if test="not(xsd:boolean($isCorrect))">
							<ctl:message>FAILURE:  The returned exception report was expected to contain an exceptionCode of MissingParameterValue and a locator of task.</ctl:message>
							<ctl:fail />
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.GetStatus-RequestInvalidTask.1">
			<ctl:param name="GetStatus_URL" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>The server returns a valid error report message with a value of InvalidParameterValue for the exceptionCode parameter when invalid task value is supplied in the request.</ctl:assertion>
			<ctl:comment>Pass if the server return a valid Exception response; fail otherwise.</ctl:comment>
			<ctl:code>
				<!-- 1.create Submit request with invalid procedure -->
				<xsl:variable name="GetStatusResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$GetStatus_URL"/>
							</ctl:url> 
							<ctl:body>
								<sps:GetStatus service="SPS" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:task><xsl:value-of select="current-dateTime()" /></sps:task>
								</sps:GetStatus>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateGetStatusResponseSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$GetStatus_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:GetStatus service="SPS" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:task><xsl:value-of select="current-dateTime()" /></sps:task>
								</sps:GetStatus>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateGetStatusResponse" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<!-- 2.Check Response -->
				<xsl:choose>
					<xsl:when test="not($GetStatusResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response to an invalid Submit request or the response was not a valid exception.</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$PostEncodingIsSOAP=string('true')">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($GetStatusResponse)" /></ctl:message>
						</xsl:if>
						<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($GetStatusResponse)" /></ctl:message>
						</xsl:if>
						<ctl:message>Checking the response for validity...</ctl:message>
						<xsl:variable name="isCorrect">
							<ctl:call-function name="spsFunctions:checkExceptionReport">
								<ctl:with-param name="exceptionReport" select="$GetStatusResponse" />
								<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
								<ctl:with-param name="locatorToCheck" select="string('task')" />
								<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
							</ctl:call-function>
						</xsl:variable>
						<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
						<xsl:if test="not(xsd:boolean($isCorrect))">
							<ctl:message>FAILURE:  The returned exception report was expected to contain an exceptionCode of InvalidParameterValue and a locator of task.</ctl:message>
							<ctl:fail />
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.GetStatus-RequestWithSinceButServiceNoSupport.1">
			<ctl:param name="GetStatus_URL" />
			<ctl:param name="task" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>The server returns a valid error report message with a value of OptionNotSupported for the exceptionCode parameter when invalid since value is supplied in the request.</ctl:assertion>
			<ctl:comment>Pass if the server return a valid Exception response; fail otherwise.</ctl:comment>
			<ctl:code>
				<!-- 1.create Submit request with invalid procedure -->
				<xsl:variable name="GetStatusResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$GetStatus_URL"/>
							</ctl:url> 
							<ctl:body>
								<sps:GetStatus service="SPS" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:task><xsl:value-of select="$task" /></sps:task>
									<sps:since><xsl:value-of select="current-dateTime()" /></sps:since> 
								</sps:GetStatus>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateGetStatusResponseSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$GetStatus_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:GetStatus service="SPS" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:task><xsl:value-of select="$task" /></sps:task>
									<sps:since><xsl:value-of select="current-dateTime()" /></sps:since> 
								</sps:GetStatus>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateGetStatusResponse" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<!-- 2.Check Response -->
				<xsl:choose>
					<xsl:when test="not($GetStatusResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response to an invalid Submit request or the response was not a valid exception.</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$PostEncodingIsSOAP=string('true')">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($GetStatusResponse)" /></ctl:message>
						</xsl:if>
						<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($GetStatusResponse)" /></ctl:message>
						</xsl:if>
						<ctl:message>Checking the response for validity...</ctl:message>
						<xsl:variable name="isCorrect">
							<ctl:call-function name="spsFunctions:checkExceptionReport">
								<ctl:with-param name="exceptionReport" select="$GetStatusResponse" />
								<ctl:with-param name="exceptionCodeToCheck" select="string('OptionNotSupported')" />
								<ctl:with-param name="locatorToCheck" select="string('since')" />
								<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
							</ctl:call-function>
						</xsl:variable>
						<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
						<xsl:if test="not(xsd:boolean($isCorrect))">
							<ctl:message>FAILURE:  The returned exception report was expected to contain an exceptionCode of InvalidParameterValue and a locator of task.</ctl:message>
							<ctl:fail />
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.GetStatus-mainRequest.1"><!-- Call by Submit -->
			<ctl:param name="GetStatus_URL" />
			<ctl:param name="task" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:param name="SupportSince" />
			<ctl:assertion>All GetStatus request with valid parameters have correct response.</ctl:assertion>
			<ctl:comment>Pass if the GetStatus response are correct; fail otherwise.</ctl:comment>
			<ctl:code>
				<!-- 根據每個task傳送GetStatus檢查取得的資料是否正確-->
				<!-- 1.建立request -->
				<xsl:variable name="GetStatusResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$GetStatus_URL"/>
							</ctl:url> 
							<ctl:body>
								<sps:GetStatus service="SPS" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:task><xsl:value-of select="$task" /></sps:task>
									<xsl:if test="$SupportSince=string('true')">
										<sps:since>2000-01-01T00:00:00+00:00</sps:since> 
									</xsl:if>
								</sps:GetStatus>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateGetStatusResponseSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$GetStatus_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:GetStatus service="SPS" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:task><xsl:value-of select="$task" /></sps:task>
									<xsl:if test="$SupportSince=string('true')">
										<sps:since>2000-01-01T00:00:00+00:00</sps:since> 
									</xsl:if>
								</sps:GetStatus>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateGetStatusResponse" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<!-- 2.檢查回應 -->
				<xsl:choose>
					<xsl:when test="not($GetStatusResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response to an invalid GetStatus request or the response was not a valid exception.</ctl:message>
						<ctl:fail />
					</xsl:when>
					<!--  有since 就有可能 0 個或超過 1 個sps:status 沒有的話就只能有一個-->
					<xsl:when test="not($SupportSince=string('true')) and not(count($GetStatusResponse//sps:GetStatusResponse/sps:status)=1)">
						<ctl:message>FAILURE:  The response have zero or more than one sps:status but the request didn't have since parameter.</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<!-- 檢查每個sps:status-->
						<xsl:for-each select="$GetStatusResponse//sps:GetStatusResponse/sps:status">
							<xsl:choose>
								<!-- 要有一個 task 元素 -->
								<xsl:when test="not(count(.//sps:task)=1)">
									<ctl:message>FAILURE:  There must be one and only one "task" element in the GetStatus response.</ctl:message>
									<ctl:fail />
								</xsl:when>
								<!-- 要有一個 procedure 元素 -->
								<xsl:when test="not(count(.//sps:procedure)=1)">
									<ctl:message>FAILURE:  There must be one and only one "procedure" element in the GetStatus response.</ctl:message>
									<ctl:fail />
								</xsl:when>
								<!-- 要有一個 requestStatus 元素 且requestStatus值為 Pending,Accepted,Rejected 三選一-->
								<xsl:when test="not(count(.//sps:requestStatus)=1)">
									<ctl:message>FAILURE:  There must be one and only one "requestStatus" element in the GetStatus response.</ctl:message>
									<ctl:fail />
								</xsl:when>
								<xsl:when test="not(.//sps:requestStatus=string('Pending')) and not(.//sps:requestStatus=string('Accepted')) and not(.//sps:requestStatus=string('Rejected'))">
									<ctl:message>FAILURE:  The element value of "requestStatus" should be "Pending", or "Accepted", or "Rejected".</ctl:message>
									<ctl:fail />
								</xsl:when>
								<!-- 要有一個 updateTime 元素 -->
								<xsl:when test="not(count(.//sps:updateTime)=1)">
									<ctl:message>FAILURE:  There must be one and only one "updateTime" element in the GetStatus response.</ctl:message>
									<ctl:fail />
								</xsl:when>
								<xsl:otherwise>
									<ctl:message>Check Ok:  The status in the GetStatus response for the task:"<xsl:value-of select="$task" />" procedure:"<xsl:value-of select=".//sps:procedure" />" is valid.</ctl:message>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:for-each>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
	</ctl:package>

	<ctl:package><!--GetTask tests-->
		<ctl:test name="sps:core-SPS.GetTask">
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:param name="DescribeTasking_URL" />
			<ctl:param name="Submit_URL" />
			<ctl:param name="GetTask_URL" />
			<ctl:assertion>Execute GetTask Test.</ctl:assertion>
			<ctl:comment>Pass if all the subtest not fail; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that the server handles missing parameters correctly.">docs/SPS%202.0%20ATS.html#SPS.GetTask</ctl:link>
			<ctl:code>
				<!-- get a valid procedure value -->
				<xsl:variable name="procedure" select="$getCapabilitiesResponse//swes:procedure"/>
				
				<!-- get a valid TaskingParameters value -->
				<xsl:variable name="describeTaskingResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$DescribeTasking_URL"/>
							</ctl:url> 
							<ctl:body>
								<sps:DescribeTasking service="SPS" version="2.0.0" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:procedure><xsl:value-of select="$procedure" /></sps:procedure>
								</sps:DescribeTasking>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateDescribeTaskingResponseSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$DescribeTasking_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:DescribeTasking service="SPS" version="2.0.0" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:procedure><xsl:value-of select="$procedure" /></sps:procedure>
								</sps:DescribeTasking>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateDescribeTaskingResponse" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<xsl:variable name="TaskingParameters" select="$describeTaskingResponse//sps:DescribeTaskingResponse/sps:taskingParameters" />
				
				<!-- get a valid task -->
				<xsl:variable name="submitResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$Submit_URL"/>
							</ctl:url> 
							<ctl:body>
								<sps:Submit service="SPS" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:procedure><xsl:value-of select="$procedure" /></sps:procedure>
									<sps:taskingParameters><xsl:value-of select="$TaskingParameters" /></sps:taskingParameters>
								</sps:Submit>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateSubmitResponseSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$Submit_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:Submit service="SPS" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:procedure><xsl:value-of select="$procedure" /></sps:procedure>
									<sps:taskingParameters><xsl:value-of select="$TaskingParameters" /></sps:taskingParameters>
								</sps:Submit>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateSubmitResponse" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<xsl:variable name="task" select="$submitResponse//sps:SubmitResponse/sps:result/sps:StatusReport/sps:task" />
				
				<!-- get a GetTask_URL -->
				<ctl:message>GetTask URL:  <xsl:value-of select="$GetTask_URL" /></ctl:message>
				<!-- 0.1.request no task -->
				<ctl:call-test name="sps:core-SPS.GetTask-RequestNoService.1">
					<ctl:with-param name="GetTask_URL" select="$GetTask_URL" />
					<ctl:with-param name="task" select="$task" />
					<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
				</ctl:call-test>
				
				<!-- 0.2.request null task -->
				<ctl:call-test name="sps:core-SPS.GetTask-RequestNullService.1">
					<ctl:with-param name="GetTask_URL" select="$GetTask_URL" />
					<ctl:with-param name="task" select="$task" />
					<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
				</ctl:call-test>
				
				<!-- 0.3.request invalid task -->
				<ctl:call-test name="sps:core-SPS.GetTask-RequestInvalidService.1">
					<ctl:with-param name="GetTask_URL" select="$GetTask_URL" />
					<ctl:with-param name="task" select="$task" />
					<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
				</ctl:call-test>
				
				<!-- 0.4.request no task -->
				<ctl:call-test name="sps:core-SPS.GetTask-RequestNoVersion.1">
					<ctl:with-param name="GetTask_URL" select="$GetTask_URL" />
					<ctl:with-param name="task" select="$task" />
					<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
				</ctl:call-test>
				
				<!-- 0.5.request null task -->
				<ctl:call-test name="sps:core-SPS.GetTask-RequestNullVersion.1">
					<ctl:with-param name="GetTask_URL" select="$GetTask_URL" />
					<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
				</ctl:call-test>
				
				<!-- 0.6.request invalid task -->
				<ctl:call-test name="sps:core-SPS.GetTask-RequestInvalidVersion.1">
					<ctl:with-param name="GetTask_URL" select="$GetTask_URL" />
					<ctl:with-param name="task" select="$task" />
					<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
				</ctl:call-test>
				
				<!-- 1.1.request no task Skip this test because of error schema.
				<ctl:call-test name="sps:core-SPS.GetTask-RequestNoTask.1">
					<ctl:with-param name="GetTask_URL" select="$GetTask_URL" />
					<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
				</ctl:call-test>-->
				
				<!-- 1.2.request null task -->
				<ctl:call-test name="sps:core-SPS.GetTask-RequestNullTask.1">
					<ctl:with-param name="GetTask_URL" select="$GetTask_URL" />
					<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
				</ctl:call-test>
				
				<!-- 1.3.request invalid task -->
				<ctl:call-test name="sps:core-SPS.GetTask-RequestInvalidTask.1">
					<ctl:with-param name="GetTask_URL" select="$GetTask_URL" />
					<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
				</ctl:call-test>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.GetTask-RequestNoService.1">
			<ctl:param name="GetTask_URL" />
			<ctl:param name="task" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>The server returns a valid error report message with a value of InvalidRequest for the exceptionCode parameter when no service value is supplied in the request.</ctl:assertion>
			<ctl:comment>Pass if the server return a valid Exception response; fail otherwise.</ctl:comment>
			<ctl:code>
				<!-- 1.create GetTask request without service -->
				<xsl:variable name="GetTaskResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$GetTask_URL"/>
							</ctl:url> 
							<ctl:body>
								<sps:GetTask version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:task><xsl:value-of select="$task" /></sps:task>
								</sps:GetTask>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateGetTaskResponseSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$GetTask_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:GetTask version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:task><xsl:value-of select="$task" /></sps:task>
								</sps:GetTask>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateGetTaskResponse" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<!-- 2.Check Response -->
				<xsl:choose>
					<xsl:when test="not($GetTaskResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response to an invalid GetTask request or the response was not a valid exception.</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$PostEncodingIsSOAP=string('true')">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($GetTaskResponse)" /></ctl:message>
						</xsl:if>
						<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($GetTaskResponse)" /></ctl:message>
						</xsl:if>
						<ctl:message>Checking the response for validity...</ctl:message>
						<xsl:variable name="isCorrect">
							<ctl:call-function name="spsFunctions:checkExceptionReport">
								<ctl:with-param name="exceptionReport" select="$GetTaskResponse" />
								<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidRequest')" />
								<ctl:with-param name="locatorToCheck" select="string('Expected attribute: service in element GetTask@http://www.opengis.net/sps/2.0')" />
								<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
							</ctl:call-function>
						</xsl:variable>
						<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
						<xsl:if test="not(xsd:boolean($isCorrect))">
							<ctl:message>FAILURE:  The returned exception report was expected to contain an exceptionCode of InvalidRequest and a locator of service.</ctl:message>
							<ctl:fail />
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.GetTask-RequestNullService.1">
			<ctl:param name="GetTask_URL" />
			<ctl:param name="task" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>The server returns a valid error report message with a value of MissingParameterValue for the exceptionCode parameter when invalid service value is supplied in the request.</ctl:assertion>
			<ctl:comment>Pass if the server return a valid Exception response; fail otherwise.</ctl:comment>
			<ctl:code>
				<!-- 1.create GetTask request with null service -->
				<xsl:variable name="GetTaskResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$GetTask_URL"/>
							</ctl:url> 
							<ctl:body>
								<sps:GetTask service="" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:task><xsl:value-of select="$task" /></sps:task>
								</sps:GetTask>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateGetTaskResponseSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$GetTask_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:GetTask service="" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:task><xsl:value-of select="$task" /></sps:task>
								</sps:GetTask>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateGetTaskResponse" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<!-- 2.Check Response -->
				<xsl:choose>
					<xsl:when test="not($GetTaskResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response to an invalid GetTask request or the response was not a valid exception.</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$PostEncodingIsSOAP=string('true')">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($GetTaskResponse)" /></ctl:message>
						</xsl:if>
						<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($GetTaskResponse)" /></ctl:message>
						</xsl:if>
						<ctl:message>Checking the response for validity...</ctl:message>
						<xsl:variable name="isCorrect">
							<ctl:call-function name="spsFunctions:checkExceptionReport">
								<ctl:with-param name="exceptionReport" select="$GetTaskResponse" />
								<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
								<ctl:with-param name="locatorToCheck" select="string('service')" />
								<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
							</ctl:call-function>
						</xsl:variable>
						<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
						<xsl:if test="not(xsd:boolean($isCorrect))">
							<ctl:message>FAILURE:  The returned exception report was expected to contain an exceptionCode of MissingParameterValue and a locator of service.</ctl:message>
							<ctl:fail />
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.GetTask-RequestInvalidService.1">
			<ctl:param name="GetTask_URL" />
			<ctl:param name="task" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>The server returns a valid error report message with a value of InvalidParameterValue for the exceptionCode parameter when invalid service value is supplied in the request.</ctl:assertion>
			<ctl:comment>Pass if the server return a valid Exception response; fail otherwise.</ctl:comment>
			<ctl:code>
				<!-- 1.create GetTask request with invalid service -->
				<xsl:variable name="GetTaskResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$GetTask_URL"/>
							</ctl:url> 
							<ctl:body>
								<sps:GetTask service="999" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:task><xsl:value-of select="$task" /></sps:task>
								</sps:GetTask>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateGetTaskResponseSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$GetTask_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:GetTask service="999" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:task><xsl:value-of select="$task" /></sps:task>
								</sps:GetTask>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateGetTaskResponse" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<!-- 2.Check Response -->
				<xsl:choose>
					<xsl:when test="not($GetTaskResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response to an invalid GetTask request or the response was not a valid exception.</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$PostEncodingIsSOAP=string('true')">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($GetTaskResponse)" /></ctl:message>
						</xsl:if>
						<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($GetTaskResponse)" /></ctl:message>
						</xsl:if>
						<ctl:message>Checking the response for validity...</ctl:message>
						<xsl:variable name="isCorrect">
							<ctl:call-function name="spsFunctions:checkExceptionReport">
								<ctl:with-param name="exceptionReport" select="$GetTaskResponse" />
								<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
								<ctl:with-param name="locatorToCheck" select="string('service')" />
								<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
							</ctl:call-function>
						</xsl:variable>
						<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
						<xsl:if test="not(xsd:boolean($isCorrect))">
							<ctl:message>FAILURE:  The returned exception report was expected to contain an exceptionCode of InvalidParameterValue and a locator of service.</ctl:message>
							<ctl:fail />
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.GetTask-RequestNoVersion.1">
			<ctl:param name="GetTask_URL" />
			<ctl:param name="task" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>The server returns a valid error report message with a value of InvalidRequest for the exceptionCode parameter when no version value is supplied in the request.</ctl:assertion>
			<ctl:comment>Pass if the server return a valid Exception response; fail otherwise.</ctl:comment>
			<ctl:code>
				<!-- 1.create GetStatus request without version -->
				<xsl:variable name="GetTaskResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$GetTask_URL"/>
							</ctl:url> 
							<ctl:body>
								<sps:GetTask service="SPS" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:task><xsl:value-of select="$task" /></sps:task>
								</sps:GetTask>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateGetTaskResponseSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$GetTask_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:GetTask service="SPS" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:task><xsl:value-of select="$task" /></sps:task>
								</sps:GetTask>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateGetTaskResponse" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<!-- 2.Check Response -->
				<xsl:choose>
					<xsl:when test="not($GetTaskResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response to an invalid GetStatus request or the response was not a valid exception.</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$PostEncodingIsSOAP=string('true')">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($GetTaskResponse)" /></ctl:message>
						</xsl:if>
						<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($GetTaskResponse)" /></ctl:message>
						</xsl:if>
						<ctl:message>Checking the response for validity...</ctl:message>
						<xsl:variable name="isCorrect">
							<ctl:call-function name="spsFunctions:checkExceptionReport">
								<ctl:with-param name="exceptionReport" select="$GetTaskResponse" />
								<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidRequest')" />
								<ctl:with-param name="locatorToCheck" select="string('Expected attribute: version in element GetTask @http://www.opengis.net/sps/2.0')" />
								<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
							</ctl:call-function>
						</xsl:variable>
						<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
						<xsl:if test="not(xsd:boolean($isCorrect))">
							<ctl:message>FAILURE:  The returned exception report was expected to contain an exceptionCode of InvalidRequest and a locator of version.</ctl:message>
							<ctl:fail />
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.GetTask-RequestNullVersion.1">
			<ctl:param name="GetTask_URL" />
			<ctl:param name="task" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>The server returns a valid error report message with a value of MissingParameterValue for the exceptionCode parameter when null version value is supplied in the request.</ctl:assertion>
			<ctl:comment>Pass if the server return a valid Exception response; fail otherwise.</ctl:comment>
			<ctl:code>
				<!-- 1.create GetTask request with null version -->
				<xsl:variable name="GetTaskResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$GetTask_URL"/>
							</ctl:url> 
							<ctl:body>
								<sps:GetTask service="SPS" version="" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:task><xsl:value-of select="$task" /></sps:task>
								</sps:GetTask>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateGetTaskResponseSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$GetTask_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:GetTask service="SPS" version="" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:task><xsl:value-of select="$task" /></sps:task>
								</sps:GetTask>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateGetTaskResponse" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<!-- 2.Check Response -->
				<xsl:choose>
					<xsl:when test="not($GetTaskResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response to an invalid GetTask request or the response was not a valid exception.</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$PostEncodingIsSOAP=string('true')">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($GetTaskResponse)" /></ctl:message>
						</xsl:if>
						<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($GetTaskResponse)" /></ctl:message>
						</xsl:if>
						<ctl:message>Checking the response for validity...</ctl:message>
						<xsl:variable name="isCorrect">
							<ctl:call-function name="spsFunctions:checkExceptionReport">
								<ctl:with-param name="exceptionReport" select="$GetTaskResponse" />
								<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
								<ctl:with-param name="locatorToCheck" select="string('version')" />
								<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
							</ctl:call-function>
						</xsl:variable>
						<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
						<xsl:if test="not(xsd:boolean($isCorrect))">
							<ctl:message>FAILURE:  The returned exception report was expected to contain an exceptionCode of MissingParameterValue and a locator of version.</ctl:message>
							<ctl:fail />
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.GetTask-RequestInvalidVersion.1">
			<ctl:param name="GetTask_URL" />
			<ctl:param name="task" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>The server returns a valid error report message with a value of InvalidParameterValue for the exceptionCode parameter when invalid task value is supplied in the request.</ctl:assertion>
			<ctl:comment>Pass if the server return a valid Exception response; fail otherwise.</ctl:comment>
			<ctl:code>
				<!-- 1.create GetTask request with invalid procedure -->
				<xsl:variable name="GetTaskResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$GetTask_URL"/>
							</ctl:url> 
							<ctl:body>
								<sps:GetTask service="SPS" version="999" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:task><xsl:value-of select="$task" /></sps:task>
								</sps:GetTask>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateGetTaskResponseSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$GetTask_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:GetTask service="SPS" version="999" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:task><xsl:value-of select="$task" /></sps:task>
								</sps:GetTask>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateGetTaskResponse" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<!-- 2.Check Response -->
				<xsl:choose>
					<xsl:when test="not($GetTaskResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response to an invalid GetTask request or the response was not a valid exception.</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$PostEncodingIsSOAP=string('true')">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($GetTaskResponse)" /></ctl:message>
						</xsl:if>
						<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($GetTaskResponse)" /></ctl:message>
						</xsl:if>
						<ctl:message>Checking the response for validity...</ctl:message>
						<xsl:variable name="isCorrect">
							<ctl:call-function name="spsFunctions:checkExceptionReport">
								<ctl:with-param name="exceptionReport" select="$GetTaskResponse" />
								<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
								<ctl:with-param name="locatorToCheck" select="string('version')" />
								<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
							</ctl:call-function>
						</xsl:variable>
						<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
						<xsl:if test="not(xsd:boolean($isCorrect))">
							<ctl:message>FAILURE:  The returned exception report was expected to contain an exceptionCode of InvalidParameterValue and a locator of version.</ctl:message>
							<ctl:fail />
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.GetTask-RequestNoTask.1"><!-- Skip this test because of error schema. -->
			<ctl:param name="GetTask_URL" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>The server returns a valid error report message with a value of InvalidRequest for the exceptionCode parameter when no Task value is supplied in the request.</ctl:assertion>
			<ctl:comment>Pass if the server return a valid Exception response; fail otherwise.</ctl:comment>
			<ctl:code>
				<!-- 1.create GetStatus request without task -->
				<xsl:variable name="GetTaskResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$GetTask_URL"/>
							</ctl:url> 
							<ctl:body>
								<sps:GetTask service="SPS" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
								</sps:GetTask>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateGetTaskResponseSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$GetTask_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:GetTask service="SPS" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
								</sps:GetTask>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateGetTaskResponse" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<!-- 2.Check Response -->
				<xsl:choose>
					<xsl:when test="not($GetTaskResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response to an invalid GetStatus request or the response was not a valid exception.</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$PostEncodingIsSOAP=string('true')">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($GetTaskResponse)" /></ctl:message>
						</xsl:if>
						<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($GetTaskResponse)" /></ctl:message>
						</xsl:if>
						<ctl:message>Checking the response for validity...</ctl:message>
						<xsl:variable name="isCorrect">
							<ctl:call-function name="spsFunctions:checkExceptionReport">
								<ctl:with-param name="exceptionReport" select="$GetTaskResponse" />
								<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidRequest')" />
								<ctl:with-param name="locatorToCheck" select="string('task')" />
								<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
							</ctl:call-function>
						</xsl:variable>
						<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
						<xsl:if test="not(xsd:boolean($isCorrect))">
							<ctl:message>FAILURE:  The returned exception report was expected to contain an exceptionCode of InvalidRequest and a locator of task.</ctl:message>
							<ctl:fail />
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.GetTask-RequestNullTask.1">
			<ctl:param name="GetTask_URL" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>The server returns a valid error report message with a value of MissingParameterValue for the exceptionCode parameter when invalid task value is supplied in the request.</ctl:assertion>
			<ctl:comment>Pass if the server return a valid Exception response; fail otherwise.</ctl:comment>
			<ctl:code>
				<!-- 1.create Submit request with invalid procedure -->
				<xsl:variable name="GetTaskResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$GetTask_URL"/>
							</ctl:url> 
							<ctl:body>
								<sps:GetTask service="SPS" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:task><xsl:value-of select="string('')" /></sps:task>
								</sps:GetTask>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateGetTaskResponseSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$GetTask_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:GetTask service="SPS" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:task><xsl:value-of select="string('')" /></sps:task>
								</sps:GetTask>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateGetTaskResponse" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<!-- 2.Check Response -->
				<xsl:choose>
					<xsl:when test="not($GetTaskResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response to an invalid Submit request or the response was not a valid exception.</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$PostEncodingIsSOAP=string('true')">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($GetTaskResponse)" /></ctl:message>
						</xsl:if>
						<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($GetTaskResponse)" /></ctl:message>
						</xsl:if>
						<ctl:message>Checking the response for validity...</ctl:message>
						<xsl:variable name="isCorrect">
							<ctl:call-function name="spsFunctions:checkExceptionReport">
								<ctl:with-param name="exceptionReport" select="$GetTaskResponse" />
								<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
								<ctl:with-param name="locatorToCheck" select="string('task')" />
								<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
							</ctl:call-function>
						</xsl:variable>
						<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
						<xsl:if test="not(xsd:boolean($isCorrect))">
							<ctl:message>FAILURE:  The returned exception report was expected to contain an exceptionCode of MissingParameterValue and a locator of task.</ctl:message>
							<ctl:fail />
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.GetTask-RequestInvalidTask.1">
			<ctl:param name="GetTask_URL" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>The server returns a valid error report message with a value of InvalidParameterValue for the exceptionCode parameter when invalid task value is supplied in the request.</ctl:assertion>
			<ctl:comment>Pass if the server return a valid Exception response; fail otherwise.</ctl:comment>
			<ctl:code>
				<!-- 1.create Submit request with invalid procedure -->
				<xsl:variable name="GetTaskResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$GetTask_URL"/>
							</ctl:url> 
							<ctl:body>
								<sps:GetTask service="SPS" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:task><xsl:value-of select="current-dateTime()" /></sps:task>
								</sps:GetTask>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateGetTaskResponseSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$GetTask_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:GetTask service="SPS" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:task><xsl:value-of select="current-dateTime()" /></sps:task>
								</sps:GetTask>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateGetTaskResponse" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<!-- 2.Check Response -->
				<xsl:choose>
					<xsl:when test="not($GetTaskResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response to an invalid Submit request or the response was not a valid exception.</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$PostEncodingIsSOAP=string('true')">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($GetTaskResponse)" /></ctl:message>
						</xsl:if>
						<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($GetTaskResponse)" /></ctl:message>
						</xsl:if>
						<ctl:message>Checking the response for validity...</ctl:message>
						<xsl:variable name="isCorrect">
							<ctl:call-function name="spsFunctions:checkExceptionReport">
								<ctl:with-param name="exceptionReport" select="$GetTaskResponse" />
								<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
								<ctl:with-param name="locatorToCheck" select="string('task')" />
								<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
							</ctl:call-function>
						</xsl:variable>
						<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
						<xsl:if test="not(xsd:boolean($isCorrect))">
							<ctl:message>FAILURE:  The returned exception report was expected to contain an exceptionCode of InvalidParameterValue and a locator of task.</ctl:message>
							<ctl:fail />
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.GetTask-mainRequest.1"><!-- Call by Submit -->
			<ctl:param name="GetTask_URL" />
			<ctl:param name="task" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>All GetTask request with valid parameters have correct response.</ctl:assertion>
			<ctl:comment>Pass if the GetTask response are correct; fail otherwise.</ctl:comment>
			<ctl:code>
				<!-- 1.建立request -->
				<xsl:variable name="GetTaskResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$GetTask_URL"/>
							</ctl:url> 
							<ctl:body>
								<sps:GetTask service="SPS" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:task><xsl:value-of select="$task" /></sps:task>
								</sps:GetTask>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateGetTaskResponseSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$GetTask_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:GetTask service="SPS" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:task><xsl:value-of select="$task" /></sps:task>
								</sps:GetTask>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateGetTaskResponse" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<!-- 2.檢查回應 -->
				<xsl:variable name="identifier" select="$GetTaskResponse//sps:GetTaskResponse/sps:task/sps:Task/swes:identifier" />
				<xsl:choose>
					<xsl:when test="not($GetTaskResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response to an invalid GetTask request or the response was not a valid exception.</ctl:message>
						<ctl:fail />
					</xsl:when>
					<!-- 有一個sps:task -->
					<xsl:when test="not(count($GetTaskResponse//sps:GetTaskResponse/sps:task)=1)">
						<ctl:message>FAILURE:  It must have a "sps:task" element in the response of the GetTask.</ctl:message>
						<ctl:fail />
					</xsl:when>
					<!-- sps:task 裡面有 一個sps:Task 1個Task對1個Task回應 可能會有多個task 因為只有輸入一個task所以只測試一個Task-->
					<xsl:when test="not(count($GetTaskResponse//sps:GetTaskResponse/sps:task/sps:Task)=1)">
						<ctl:message>FAILURE:  It must have a "sps:Task" element in the element "sps:task" in the GetTask response .</ctl:message>
						<ctl:fail />
					</xsl:when>
					<!-- sps:Task 裡面有一個swes:identifier 應該就是request的task ID -->
					<xsl:when test="not(count($GetTaskResponse//sps:GetTaskResponse/sps:task/sps:Task/swes:identifier)=1) or not($identifier=$task)">
						<ctl:message>FAILURE:  It must have a "swes:identifier" element in the GetTask response and the element value equal to task value from the GetTask request.</ctl:message>
						<ctl:fail />
					</xsl:when>
					<!-- sps:Task 裡面有一到多個 sps:status -->
					<xsl:when test="count($GetTaskResponse//sps:GetTaskResponse/sps:task/sps:Task/sps:status)=0">
						<ctl:message>FAILURE:  It mush have at least one sps:status in the GetTask response.</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<!-- 檢查每個sps:status-->
						<xsl:for-each select="$GetTaskResponse//sps:GetTaskResponse/sps:task/sps:Task/sps:status">
							<xsl:choose>
								<!-- 要有一個 task 元素 -->
								<xsl:when test="not(count(.//sps:task)=1)">
									<ctl:message>FAILURE:  There must be one and only one "task" element in the GetStatus response.</ctl:message>
									<ctl:fail />
								</xsl:when>
								<!-- 要有一個 procedure 元素 -->
								<xsl:when test="not(count(.//sps:procedure)=1)">
									<ctl:message>FAILURE:  There must be one and only one "procedure" element in the GetStatus response.</ctl:message>
									<ctl:fail />
								</xsl:when>
								<!-- 要有一個 requestStatus 元素 且requestStatus值為 Pending,Accepted,Rejected 三選一-->
								<xsl:when test="not(count(.//sps:requestStatus)=1)">
									<ctl:message>FAILURE:  There must be one and only one "requestStatus" element in the GetStatus response.</ctl:message>
									<ctl:fail />
								</xsl:when>
								<xsl:when test="not(.//sps:requestStatus=string('Pending')) and not(.//sps:requestStatus=string('Accepted')) and not(.//sps:requestStatus=string('Rejected'))">
									<ctl:message>FAILURE:  The element value of "requestStatus" should be "Pending", or "Accepted", or "Rejected".</ctl:message>
									<ctl:fail />
								</xsl:when>
								<!-- 要有一個 updateTime 元素 -->
								<xsl:when test="not(count(.//sps:updateTime)=1)">
									<ctl:message>FAILURE:  There must be one and only one "updateTime" element in the GetStatus response.</ctl:message>
									<ctl:fail />
								</xsl:when>
								<xsl:otherwise>
									<ctl:message>Check Ok:  The status in the GetStatus response for the task:"<xsl:value-of select="$task" />" procedure:"<xsl:value-of select=".//sps:procedure" />" is valid.</ctl:message>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:for-each>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
	</ctl:package>

	<ctl:package><!--DescribeResultAccess tests-->
		<ctl:test name="sps:core-SPS.DescribeResultAccess">
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:param name="DescribeResultAccess_URL" />
			<ctl:assertion>Execute DescribeResultAccess Test.</ctl:assertion>
			<ctl:comment>Pass if all the subtest not fail; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that the server handles missing parameters correctly.">docs/SPS%202.0%20ATS.html#SPS.DescribeResultAccess</ctl:link>
			<ctl:code>
				<!-- Get a  DescribeResultAccess URL -->
				<xsl:variable name="DescribeResultAccess_URL">
					<xsl:value-of select="$getCapabilitiesResponse//ows:OperationsMetadata/ows:Operation[@name='DescribeResultAccess']/ows:DCP/ows:HTTP/ows:Post/@xlink:href" />
				</xsl:variable>
				<ctl:message>DescribeResultAccess URL:  <xsl:value-of select="$DescribeResultAccess_URL" /></ctl:message>

				<!-- get a valid procedure value -->
				<xsl:variable name="procedure" select="$getCapabilitiesResponse//swes:procedure"/>
				
				<xsl:if test="string-length(normalize-space($DescribeResultAccess_URL))>0">
					<ctl:message>***************************************</ctl:message>
					<ctl:message>*Running DescribeResultAccess tests...*</ctl:message>
					<ctl:message>***************************************</ctl:message>
					<!-- 0.1 request no service-->
					<ctl:call-test name="sps:core-SPS.DescribeResultAccess-RequestNoService.1">
						<ctl:with-param name="DescribeResultAccess_URL" select="$DescribeResultAccess_URL" />
						<ctl:with-param name="procedure" select="$procedure" />
						<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
					</ctl:call-test>
					<ctl:message>***************************************</ctl:message>
					<!-- 0.2 request null service-->
					<ctl:call-test name="sps:core-SPS.DescribeResultAccess-RequestNullService.1">
						<ctl:with-param name="DescribeResultAccess_URL" select="$DescribeResultAccess_URL" />
						<ctl:with-param name="procedure" select="$procedure" />
						<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
					</ctl:call-test>
					<ctl:message>***************************************</ctl:message>
					<!-- 0.3 request invalid service -->
					<ctl:call-test name="sps:core-SPS.DescribeResultAccess-RequestInvalidService.1">
						<ctl:with-param name="DescribeResultAccess_URL" select="$DescribeResultAccess_URL" />
						<ctl:with-param name="procedure" select="$procedure" />
						<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
					</ctl:call-test>
					<ctl:message>***************************************</ctl:message>
					<!-- 0.4 request no version-->
					<ctl:call-test name="sps:core-SPS.DescribeResultAccess-RequestNoVersion.1">
						<ctl:with-param name="DescribeResultAccess_URL" select="$DescribeResultAccess_URL" />
						<ctl:with-param name="procedure" select="$procedure" />
						<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
					</ctl:call-test>
					<ctl:message>***************************************</ctl:message>
					<!-- 0.5 request null version-->
					<ctl:call-test name="sps:core-SPS.DescribeResultAccess-RequestNullVersion.1">
						<ctl:with-param name="DescribeResultAccess_URL" select="$DescribeResultAccess_URL" />
						<ctl:with-param name="procedure" select="$procedure" />
						<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
					</ctl:call-test>
					<ctl:message>***************************************</ctl:message>
					<!-- 0.6 request invalid version -->
					<ctl:call-test name="sps:core-SPS.DescribeResultAccess-RequestInvalidVersion.1">
						<ctl:with-param name="DescribeResultAccess_URL" select="$DescribeResultAccess_URL" />
						<ctl:with-param name="procedure" select="$procedure" />
						<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
					</ctl:call-test>
					<ctl:message>***************************************</ctl:message>
					<!-- 1.1 request no target  Skip this test because of error schema.
					<ctl:call-test name="sps:core-SPS.DescribeResultAccess-RequestNoTarget.1">
						<ctl:with-param name="DescribeResultAccess_URL" select="$DescribeResultAccess_URL" />
						<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
					</ctl:call-test>
					<ctl:message>***************************************</ctl:message>-->
					<!-- 1.2 request null target   Skip this test because of error schema.
					<ctl:call-test name="sps:core-SPS.DescribeResultAccess-RequestNullTarget.1">
						<ctl:with-param name="DescribeResultAccess_URL" select="$DescribeResultAccess_URL" />
						<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
					</ctl:call-test>
					<ctl:message>***************************************</ctl:message>-->
					<!-- 1.3 request neither procedure nor taskid in the target  Skip this test because of error schema.
					<ctl:call-test name="sps:core-SPS.DescribeResultAccess-RequestInvalidTarget.2">
						<ctl:with-param name="DescribeResultAccess_URL" select="$DescribeResultAccess_URL" />
						<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
					</ctl:call-test>
					<ctl:message>***************************************</ctl:message>-->
					<!-- 1.4 request with null procedure or null task in the target -->
					<ctl:call-test name="sps:core-SPS.DescribeResultAccess-RequestInvalidTarget.3">
						<ctl:with-param name="DescribeResultAccess_URL" select="$DescribeResultAccess_URL" />
						<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
					</ctl:call-test>
					<ctl:message>***************************************</ctl:message>
					<!-- 1.5 request with invalid procedure or invalid task in the target -->
					<ctl:call-test name="sps:core-SPS.DescribeResultAccess-RequestInvalidTarget.4">
						<ctl:with-param name="DescribeResultAccess_URL" select="$DescribeResultAccess_URL" />
						<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
					</ctl:call-test>
					<ctl:message>***************************************</ctl:message>
					<!-- 2.1 request with valid procedure in the target -->
					<ctl:call-test name="sps:core-SPS.DescribeResultAccess-RequestWithProcedure.1">
						<ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
						<ctl:with-param name="DescribeResultAccess_URL" select="$DescribeResultAccess_URL" />
						<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
					</ctl:call-test>
					<!-- 2.2 request with valid task in the target 
						submit下拿到task就測試,避免重複submit
					-->

				</xsl:if>
			</ctl:code>
		</ctl:test>
		
		<ctl:test name="sps:core-SPS.DescribeResultAccess-RequestNoService.1">
			<ctl:param name="DescribeResultAccess_URL" />
			<ctl:param name="procedure" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>The server returns a valid error report message with a value of InvalidRequest for the exceptionCode parameter when no service is supplied in the request.</ctl:assertion>
			<ctl:comment>Pass if the server return a valid Exception response; fail otherwise.</ctl:comment>
			<ctl:code>
				<!-- 1.create DescribeResultAccess request without procedure and without service-->
				<xsl:variable name="DescribeResultAccessResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$DescribeResultAccess_URL"/>
							</ctl:url> 
							<ctl:body>
								<sps:DescribeResultAccess version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:target>
										<sps:procedure><xsl:value-of select="$procedure" /></sps:procedure> 
									</sps:target>
								</sps:DescribeResultAccess>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateDescribeResultAccessResponseSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$DescribeResultAccess_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:DescribeResultAccess version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:target>
										<sps:procedure><xsl:value-of select="$procedure" /></sps:procedure> 
									</sps:target>
								</sps:DescribeResultAccess>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateDescribeResultAccessResponse" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<!-- 2.Check Response -->
				<xsl:choose>
					<xsl:when test="not($DescribeResultAccessResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response to an invalid DescribeResultAccess request or the response was not a valid exception.</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$PostEncodingIsSOAP=string('true')">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($DescribeResultAccessResponse)" /></ctl:message>
						</xsl:if>
						<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($DescribeResultAccessResponse)" /></ctl:message>
						</xsl:if>
						<ctl:message>Checking the response for validity...</ctl:message>
						<xsl:variable name="isCorrect">
							<ctl:call-function name="spsFunctions:checkExceptionReport">
								<ctl:with-param name="exceptionReport" select="$DescribeResultAccessResponse" />
								<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidRequest')" />
								<ctl:with-param name="locatorToCheck" select="string('Expected attribute: service in element DescribeResultAccess@http://www.opengis.net/sps/2.0')" />
								<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
							</ctl:call-function>
						</xsl:variable>
						<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
						<xsl:if test="not(xsd:boolean($isCorrect))">
							<ctl:message>FAILURE:  The returned exception report was expected to contain an exceptionCode of InvalidRequest and a locator of "Expected attribute: service in element DescribeResultAccess@http://www.opengis.net/sps/2.0".</ctl:message>
							<ctl:fail />
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.DescribeResultAccess-RequestNullService.1">
			<ctl:param name="DescribeResultAccess_URL" />
			<ctl:param name="procedure" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>The server returns a valid error report message with a value of MissingParameterValue for the exceptionCode parameter when null service value (empty) is supplied in the request.</ctl:assertion>
			<ctl:comment>Pass if the server return a valid Exception response; fail otherwise.</ctl:comment>
			<ctl:code>
				<!-- 1.create DescribeResultAccess request with null service -->
				<xsl:variable name="DescribeResultAccessResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$DescribeResultAccess_URL"/>
							</ctl:url> 
							<ctl:body>
								<sps:DescribeResultAccess service="" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:target>
										<sps:procedure><xsl:value-of select="$procedure" /></sps:procedure> 
									</sps:target>
								</sps:DescribeResultAccess>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateDescribeResultAccessResponseSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$DescribeResultAccess_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:DescribeResultAccess service="" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:target>
										<sps:procedure><xsl:value-of select="$procedure" /></sps:procedure> 
									</sps:target>
								</sps:DescribeResultAccess>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateDescribeResultAccessResponse" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<!-- 2.Check Response -->
				<xsl:choose>
					<xsl:when test="not($DescribeResultAccessResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response to an invalid DescribeResultAccess request or the response was not a valid exception.</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$PostEncodingIsSOAP=string('true')">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($DescribeResultAccessResponse)" /></ctl:message>
						</xsl:if>
						<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($DescribeResultAccessResponse)" /></ctl:message>
						</xsl:if>
						<ctl:message>Checking the response for validity...</ctl:message>
						<xsl:variable name="isCorrect">
							<ctl:call-function name="spsFunctions:checkExceptionReport">
								<ctl:with-param name="exceptionReport" select="$DescribeResultAccessResponse" />
								<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
								<ctl:with-param name="locatorToCheck" select="string('service')" />
								<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
							</ctl:call-function>
						</xsl:variable>
						<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
						<xsl:if test="not(xsd:boolean($isCorrect))">
							<ctl:message>FAILURE:  The returned exception report was expected to contain an exceptionCode of MissingParameterValue and a locator of service.</ctl:message>
							<ctl:fail />
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.DescribeResultAccess-RequestInvalidService.1">
			<ctl:param name="DescribeResultAccess_URL" />
			<ctl:param name="procedure" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>The server returns a valid error report message with a value of InvalidParameterValue for the exceptionCode parameter when invalid service value (not element procedure or task) is supplied in the request.</ctl:assertion>
			<ctl:comment>Pass if the server return a valid Exception response; fail otherwise.</ctl:comment>
			<ctl:code>
				<!-- 1.create DescribeResultAccess request with invalid target -->
				<xsl:variable name="DescribeResultAccessResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$DescribeResultAccess_URL"/>
							</ctl:url> 
							<ctl:body>
								<sps:DescribeResultAccess service="999" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:target>
										<sps:procedure><xsl:value-of select="$procedure" /></sps:procedure> 
									</sps:target>
								</sps:DescribeResultAccess>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateDescribeResultAccessResponseSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$DescribeResultAccess_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:DescribeResultAccess service="999" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:target>
										<sps:procedure><xsl:value-of select="$procedure" /></sps:procedure> 
									</sps:target>
								</sps:DescribeResultAccess>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateDescribeResultAccessResponse" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<!-- 2.Check Response -->
				<xsl:choose>
					<xsl:when test="not($DescribeResultAccessResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response to an invalid DescribeResultAccess request or the response was not a valid exception.</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$PostEncodingIsSOAP=string('true')">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($DescribeResultAccessResponse)" /></ctl:message>
						</xsl:if>
						<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($DescribeResultAccessResponse)" /></ctl:message>
						</xsl:if>
						<ctl:message>Checking the response for validity...</ctl:message>
						<xsl:variable name="isCorrect">
							<ctl:call-function name="spsFunctions:checkExceptionReport">
								<ctl:with-param name="exceptionReport" select="$DescribeResultAccessResponse" />
								<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
								<ctl:with-param name="locatorToCheck" select="string('service')" />
								<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
							</ctl:call-function>
						</xsl:variable>
						<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
						<xsl:if test="not(xsd:boolean($isCorrect))">
							<ctl:message>FAILURE:  The returned exception report was expected to contain an exceptionCode of InvalidParameterValue and a locator of service.</ctl:message>
							<ctl:fail />
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.DescribeResultAccess-RequestNoVersion.1">
			<ctl:param name="DescribeResultAccess_URL" />
			<ctl:param name="procedure" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>The server returns a valid error report message with a value of InvalidRequest for the exceptionCode parameter when no version is supplied in the request.</ctl:assertion>
			<ctl:comment>Pass if the server return a valid Exception response; fail otherwise.</ctl:comment>
			<ctl:code>
				<!-- 1.create DescribeResultAccess request without procedure and without task-->
				<xsl:variable name="DescribeResultAccessResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$DescribeResultAccess_URL"/>
							</ctl:url> 
							<ctl:body>
								<sps:DescribeResultAccess service="SPS" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:target>
										<sps:procedure><xsl:value-of select="$procedure" /></sps:procedure> 
									</sps:target>
								</sps:DescribeResultAccess>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateDescribeResultAccessResponseSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$DescribeResultAccess_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:DescribeResultAccess service="SPS" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:target>
										<sps:procedure><xsl:value-of select="$procedure" /></sps:procedure> 
									</sps:target>
								</sps:DescribeResultAccess>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateDescribeResultAccessResponse" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<!-- 2.Check Response -->
				<xsl:choose>
					<xsl:when test="not($DescribeResultAccessResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response to an invalid DescribeResultAccess request or the response was not a valid exception.</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$PostEncodingIsSOAP=string('true')">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($DescribeResultAccessResponse)" /></ctl:message>
						</xsl:if>
						<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($DescribeResultAccessResponse)" /></ctl:message>
						</xsl:if>
						<ctl:message>Checking the response for validity...</ctl:message>
						<xsl:variable name="isCorrect">
							<ctl:call-function name="spsFunctions:checkExceptionReport">
								<ctl:with-param name="exceptionReport" select="$DescribeResultAccessResponse" />
								<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidRequest')" />
								<ctl:with-param name="locatorToCheck" select="string('Expected attribute: version in element DescribeResultAccess@http://www.opengis.net/sps/2.0')" />
								<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
							</ctl:call-function>
						</xsl:variable>
						<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
						<xsl:if test="not(xsd:boolean($isCorrect))">
							<ctl:message>FAILURE:  The returned exception report was expected to contain an exceptionCode of InvalidRequest and a locator of "Expected attribute: version in element DescribeResultAccess@http://www.opengis.net/sps/2.0".</ctl:message>
							<ctl:fail />
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.DescribeResultAccess-RequestNullVersion.1">
			<ctl:param name="DescribeResultAccess_URL" />
			<ctl:param name="procedure" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>The server returns a valid error report message with a value of MissingParameterValue for the exceptionCode parameter when null version value (empty) is supplied in the request.</ctl:assertion>
			<ctl:comment>Pass if the server return a valid Exception response; fail otherwise.</ctl:comment>
			<ctl:code>
				<!-- 1.create DescribeResultAccess request with invalid target -->
				<xsl:variable name="DescribeResultAccessResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$DescribeResultAccess_URL"/>
							</ctl:url> 
							<ctl:body>
								<sps:DescribeResultAccess service="SPS" version="" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:target>
										<sps:procedure><xsl:value-of select="$procedure" /></sps:procedure> 
									</sps:target>
								</sps:DescribeResultAccess>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateDescribeResultAccessResponseSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$DescribeResultAccess_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:DescribeResultAccess service="SPS" version="" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:target>
										<sps:procedure><xsl:value-of select="$procedure" /></sps:procedure> 
									</sps:target>
								</sps:DescribeResultAccess>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateDescribeResultAccessResponse" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<!-- 2.Check Response -->
				<xsl:choose>
					<xsl:when test="not($DescribeResultAccessResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response to an invalid DescribeResultAccess request or the response was not a valid exception.</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$PostEncodingIsSOAP=string('true')">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($DescribeResultAccessResponse)" /></ctl:message>
						</xsl:if>
						<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($DescribeResultAccessResponse)" /></ctl:message>
						</xsl:if>
						<ctl:message>Checking the response for validity...</ctl:message>
						<xsl:variable name="isCorrect">
							<ctl:call-function name="spsFunctions:checkExceptionReport">
								<ctl:with-param name="exceptionReport" select="$DescribeResultAccessResponse" />
								<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
								<ctl:with-param name="locatorToCheck" select="string('version')" />
								<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
							</ctl:call-function>
						</xsl:variable>
						<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
						<xsl:if test="not(xsd:boolean($isCorrect))">
							<ctl:message>FAILURE:  The returned exception report was expected to contain an exceptionCode of MissingParameterValue and a locator of version.</ctl:message>
							<ctl:fail />
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.DescribeResultAccess-RequestInvalidVersion.1">
			<ctl:param name="DescribeResultAccess_URL" />
			<ctl:param name="procedure" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>The server returns a valid error report message with a value of InvalidParameterValue for the exceptionCode parameter when invalid version value is supplied in the request.</ctl:assertion>
			<ctl:comment>Pass if the server return a valid Exception response; fail otherwise.</ctl:comment>
			<ctl:code>
				<!-- 1.create DescribeResultAccess request with invalid version -->
				<xsl:variable name="DescribeResultAccessResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$DescribeResultAccess_URL"/>
							</ctl:url> 
							<ctl:body>
								<sps:DescribeResultAccess service="SPS" version="999" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:target>
										<sps:procedure><xsl:value-of select="$procedure" /></sps:procedure> 
									</sps:target>
								</sps:DescribeResultAccess>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateDescribeResultAccessResponseSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$DescribeResultAccess_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:DescribeResultAccess service="SPS" version="999" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:target>
										<sps:procedure><xsl:value-of select="$procedure" /></sps:procedure> 
									</sps:target>
								</sps:DescribeResultAccess>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateDescribeResultAccessResponse" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<!-- 2.Check Response -->
				<xsl:choose>
					<xsl:when test="not($DescribeResultAccessResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response to an invalid DescribeResultAccess request or the response was not a valid exception.</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$PostEncodingIsSOAP=string('true')">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($DescribeResultAccessResponse)" /></ctl:message>
						</xsl:if>
						<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($DescribeResultAccessResponse)" /></ctl:message>
						</xsl:if>
						<ctl:message>Checking the response for validity...</ctl:message>
						<xsl:variable name="isCorrect">
							<ctl:call-function name="spsFunctions:checkExceptionReport">
								<ctl:with-param name="exceptionReport" select="$DescribeResultAccessResponse" />
								<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
								<ctl:with-param name="locatorToCheck" select="string('version')" />
								<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
							</ctl:call-function>
						</xsl:variable>
						<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
						<xsl:if test="not(xsd:boolean($isCorrect))">
							<ctl:message>FAILURE:  The returned exception report was expected to contain an exceptionCode of InvalidParameterValue and a locator of version.</ctl:message>
							<ctl:fail />
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.DescribeResultAccess-RequestNoTarget.1"><!-- Skip this test because of error schema -->
			<ctl:param name="DescribeResultAccess_URL" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>The server returns a valid error report message with a value of InvalidRequest for the exceptionCode parameter when no Target is supplied in the request.</ctl:assertion>
			<ctl:comment>Pass if the server return a valid Exception response; fail otherwise.</ctl:comment>
			<ctl:code>
				<!-- 1.create DescribeResultAccess request without procedure and without task-->
				<xsl:variable name="DescribeResultAccessResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$DescribeResultAccess_URL"/>
							</ctl:url> 
							<ctl:body>
								<sps:DescribeResultAccess service="SPS" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
								</sps:DescribeResultAccess>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateDescribeResultAccessResponseSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$DescribeResultAccess_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:DescribeResultAccess service="SPS" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
								</sps:DescribeResultAccess>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateDescribeResultAccessResponse" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<!-- 2.Check Response -->
				<xsl:choose>
					<xsl:when test="not($DescribeResultAccessResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response to an invalid DescribeResultAccess request or the response was not a valid exception.</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$PostEncodingIsSOAP=string('true')">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($DescribeResultAccessResponse)" /></ctl:message>
						</xsl:if>
						<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($DescribeResultAccessResponse)" /></ctl:message>
						</xsl:if>
						<ctl:message>Checking the response for validity...</ctl:message>
						<xsl:variable name="isCorrect">
							<ctl:call-function name="spsFunctions:checkExceptionReport">
								<ctl:with-param name="exceptionReport" select="$DescribeResultAccessResponse" />
								<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidRequest')" />
								<ctl:with-param name="locatorToCheck" select="string('target')" />
								<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
							</ctl:call-function>
						</xsl:variable>
						<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
						<xsl:if test="not(xsd:boolean($isCorrect))">
							<ctl:message>FAILURE:  The returned exception report was expected to contain an exceptionCode of InvalidRequest and a locator of procedure.</ctl:message>
							<ctl:fail />
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.DescribeResultAccess-RequestNullTarget.1"><!-- Skip this test because of error schema. -->
			<ctl:param name="DescribeResultAccess_URL" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>The server returns a valid error report message with a value of MissingParameterValue for the exceptionCode parameter when invalid target value (empty) is supplied in the request.</ctl:assertion>
			<ctl:comment>Pass if the server return a valid Exception response; fail otherwise.</ctl:comment>
			<ctl:code>
				<!-- 1.create DescribeResultAccess request with invalid target -->
				<xsl:variable name="DescribeResultAccessResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$DescribeResultAccess_URL"/>
							</ctl:url> 
							<ctl:body>
								<sps:DescribeResultAccess service="SPS" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:target><xsl:value-of select="string('')" /></sps:target>
								</sps:DescribeResultAccess>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateDescribeResultAccessResponseSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$DescribeResultAccess_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:DescribeResultAccess service="SPS" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:target><xsl:value-of select="string('')" /></sps:target>
								</sps:DescribeResultAccess>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateDescribeResultAccessResponse" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<!-- 2.Check Response -->
				<xsl:choose>
					<xsl:when test="not($DescribeResultAccessResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response to an invalid DescribeResultAccess request or the response was not a valid exception.</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$PostEncodingIsSOAP=string('true')">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($DescribeResultAccessResponse)" /></ctl:message>
						</xsl:if>
						<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($DescribeResultAccessResponse)" /></ctl:message>
						</xsl:if>
						<ctl:message>Checking the response for validity...</ctl:message>
						<xsl:variable name="isCorrect">
							<ctl:call-function name="spsFunctions:checkExceptionReport">
								<ctl:with-param name="exceptionReport" select="$DescribeResultAccessResponse" />
								<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
								<ctl:with-param name="locatorToCheck" select="string('target')" />
								<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
							</ctl:call-function>
						</xsl:variable>
						<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
						<xsl:if test="not(xsd:boolean($isCorrect))">
							<ctl:message>FAILURE:  The returned exception report was expected to contain an exceptionCode of MissingParameterValue and a locator of target.</ctl:message>
							<ctl:fail />
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.DescribeResultAccess-RequestInvalidTarget.2"><!-- Skip this test because of error schema. -->
			<ctl:param name="DescribeResultAccess_URL" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>The server returns a valid error report message with a value of InvalidParameterValue for the exceptionCode parameter when invalid target value (not element procedure or task) is supplied in the request.</ctl:assertion>
			<ctl:comment>Pass if the server return a valid Exception response; fail otherwise.</ctl:comment>
			<ctl:code>
				<!-- 1.create DescribeResultAccess request with invalid target -->
				<xsl:variable name="DescribeResultAccessResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$DescribeResultAccess_URL"/>
							</ctl:url> 
							<ctl:body>
								<sps:DescribeResultAccess service="SPS" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:target>
										<sps:NotProcedureNotTask><xsl:value-of select="string('')" /></sps:NotProcedureNotTask>
									</sps:target>
								</sps:DescribeResultAccess>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateDescribeResultAccessResponseSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$DescribeResultAccess_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:DescribeResultAccess service="SPS" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:target>
										<sps:NotProcedureNotTask><xsl:value-of select="string('')" /></sps:NotProcedureNotTask>
									</sps:target>
								</sps:DescribeResultAccess>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateDescribeResultAccessResponse" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<!-- 2.Check Response -->
				<xsl:choose>
					<xsl:when test="not($DescribeResultAccessResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response to an invalid DescribeResultAccess request or the response was not a valid exception.</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$PostEncodingIsSOAP=string('true')">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($DescribeResultAccessResponse)" /></ctl:message>
						</xsl:if>
						<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($DescribeResultAccessResponse)" /></ctl:message>
						</xsl:if>
						<ctl:message>Checking the response for validity...</ctl:message>
						<xsl:variable name="isCorrect">
							<ctl:call-function name="spsFunctions:checkExceptionReport">
								<ctl:with-param name="exceptionReport" select="$DescribeResultAccessResponse" />
								<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
								<ctl:with-param name="locatorToCheck" select="string('target')" />
								<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
							</ctl:call-function>
						</xsl:variable>
						<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
						<xsl:if test="not(xsd:boolean($isCorrect))">
							<ctl:message>FAILURE:  The returned exception report was expected to contain an exceptionCode of InvalidParameterValue and a locator of target.</ctl:message>
							<ctl:fail />
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.DescribeResultAccess-RequestInvalidTarget.3">
			<ctl:param name="DescribeResultAccess_URL" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>The server returns a valid error report message with a value of InvalidParameterValue for the exceptionCode parameter when invalid target value (not element procedure or task) is supplied in the request.</ctl:assertion>
			<ctl:comment>Pass if the server return a valid Exception response; fail otherwise.</ctl:comment>
			<ctl:code>
				<!-- 1.create DescribeResultAccess request with invalid procedure in the target -->
				<xsl:variable name="DescribeResultAccessResponse_1">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$DescribeResultAccess_URL"/>
							</ctl:url> 
							<ctl:body>
								<sps:DescribeResultAccess service="SPS" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:target>
										<sps:procedure><xsl:value-of select="string('')" /></sps:procedure> 
									</sps:target>
								</sps:DescribeResultAccess>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateDescribeResultAccessResponseSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$DescribeResultAccess_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:DescribeResultAccess service="SPS" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:target>
										<sps:procedure><xsl:value-of select="string('')" /></sps:procedure> 
									</sps:target>
								</sps:DescribeResultAccess>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateDescribeResultAccessResponse" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<!-- 2.create DescribeResultAccess request with invalid task in the target -->
				<xsl:variable name="DescribeResultAccessResponse_2">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$DescribeResultAccess_URL"/>
							</ctl:url> 
							<ctl:body>
								<sps:DescribeResultAccess service="SPS" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:target>
										<sps:task><xsl:value-of select="string('')" /></sps:task> 
									</sps:target>
								</sps:DescribeResultAccess>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateDescribeResultAccessResponseSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$DescribeResultAccess_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:DescribeResultAccess service="SPS" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:target>
										<sps:task><xsl:value-of select="string('')" /></sps:task> 
									</sps:target>
								</sps:DescribeResultAccess>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateDescribeResultAccessResponse" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<!-- 3.Check Response for invalid procedure -->
				<xsl:choose>
					<xsl:when test="not($DescribeResultAccessResponse_1/*)">
						<ctl:message>FAILURE:  The server did not return a response to an invalid DescribeResultAccess request or the response was not a valid exception.</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$PostEncodingIsSOAP=string('true')">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($DescribeResultAccessResponse_1)" /></ctl:message>
						</xsl:if>
						<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($DescribeResultAccessResponse_1)" /></ctl:message>
						</xsl:if>
						<ctl:message>Checking the response for validity...</ctl:message>
						<xsl:variable name="isCorrect_1">
							<ctl:call-function name="spsFunctions:checkExceptionReport">
								<ctl:with-param name="exceptionReport" select="$DescribeResultAccessResponse_1" />
								<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
								<ctl:with-param name="locatorToCheck" select="string('target')" />
								<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
							</ctl:call-function>
						</xsl:variable>
						<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect_1" /></ctl:message>
						<xsl:if test="not(xsd:boolean($isCorrect_1))">
							<ctl:message>FAILURE:  The returned exception report was expected to contain an exceptionCode of InvalidParameterValue and a locator of target (invalid procedure).</ctl:message>
							<ctl:fail />
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
				<!-- 4.Check Response for invalid task -->
				<xsl:choose>
					<xsl:when test="not($DescribeResultAccessResponse_2/*)">
						<ctl:message>FAILURE:  The server did not return a response to an invalid DescribeResultAccess request or the response was not a valid exception.</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$PostEncodingIsSOAP=string('true')">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($DescribeResultAccessResponse_2)" /></ctl:message>
						</xsl:if>
						<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($DescribeResultAccessResponse_2)" /></ctl:message>
						</xsl:if>
						<ctl:message>Checking the response for validity...</ctl:message>
						<xsl:variable name="isCorrect_2">
							<ctl:call-function name="spsFunctions:checkExceptionReport">
								<ctl:with-param name="exceptionReport" select="$DescribeResultAccessResponse_2" />
								<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
								<ctl:with-param name="locatorToCheck" select="string('target')" />
								<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
							</ctl:call-function>
						</xsl:variable>
						<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect_2" /></ctl:message>
						<xsl:if test="not(xsd:boolean($isCorrect_2))">
							<ctl:message>FAILURE:  The returned exception report was expected to contain an exceptionCode of InvalidParameterValue and a locator of target (invalid task).</ctl:message>
							<ctl:fail />
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.DescribeResultAccess-RequestInvalidTarget.4">
			<ctl:param name="DescribeResultAccess_URL" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>The server returns a valid error report message with a value of InvalidParameterValue for the exceptionCode parameter when invalid target value (not element procedure or task) is supplied in the request.</ctl:assertion>
			<ctl:comment>Pass if the server return a valid Exception response; fail otherwise.</ctl:comment>
			<ctl:code>
				<!-- 1.create DescribeResultAccess request with invalid procedure in the target -->
				<xsl:variable name="DescribeResultAccessResponse_1">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$DescribeResultAccess_URL"/>
							</ctl:url> 
							<ctl:body>
								<sps:DescribeResultAccess service="SPS" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:target>
										<sps:procedure><xsl:value-of select="current-dateTime()" /></sps:procedure> 
									</sps:target>
								</sps:DescribeResultAccess>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateDescribeResultAccessResponseSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$DescribeResultAccess_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:DescribeResultAccess service="SPS" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:target>
										<sps:procedure><xsl:value-of select="current-dateTime()" /></sps:procedure> 
									</sps:target>
								</sps:DescribeResultAccess>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateDescribeResultAccessResponse" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<!-- 2.create DescribeResultAccess request with invalid task in the target -->
				<xsl:variable name="DescribeResultAccessResponse_2">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$DescribeResultAccess_URL"/>
							</ctl:url> 
							<ctl:body>
								<sps:DescribeResultAccess service="SPS" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:target>
										<sps:task><xsl:value-of select="current-dateTime()" /></sps:task> 
									</sps:target>
								</sps:DescribeResultAccess>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateDescribeResultAccessResponseSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$DescribeResultAccess_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:DescribeResultAccess service="SPS" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:target>
										<sps:task><xsl:value-of select="current-dateTime()" /></sps:task> 
									</sps:target>
								</sps:DescribeResultAccess>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateDescribeResultAccessResponse" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<!-- 3.Check Response for invalid procedure -->
				<xsl:choose>
					<xsl:when test="not($DescribeResultAccessResponse_1/*)">
						<ctl:message>FAILURE:  The server did not return a response to an invalid DescribeResultAccess request or the response was not a valid exception.</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$PostEncodingIsSOAP=string('true')">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($DescribeResultAccessResponse_1)" /></ctl:message>
						</xsl:if>
						<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($DescribeResultAccessResponse_1)" /></ctl:message>
						</xsl:if>
						<ctl:message>Checking the response for validity...</ctl:message>
						<xsl:variable name="isCorrect_1">
							<ctl:call-function name="spsFunctions:checkExceptionReport">
								<ctl:with-param name="exceptionReport" select="$DescribeResultAccessResponse_1" />
								<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
								<ctl:with-param name="locatorToCheck" select="string('procedure')" />
								<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
							</ctl:call-function>
						</xsl:variable>
						<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect_1" /></ctl:message>
						<xsl:if test="not(xsd:boolean($isCorrect_1))">
							<ctl:message>FAILURE:  The returned exception report was expected to contain an exceptionCode of InvalidParameterValue and a locator of procedure.</ctl:message>
							<ctl:fail />
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
				<!-- 4.Check Response for invalid task -->
				<xsl:choose>
					<xsl:when test="not($DescribeResultAccessResponse_2/*)">
						<ctl:message>FAILURE:  The server did not return a response to an invalid DescribeResultAccess request or the response was not a valid exception.</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$PostEncodingIsSOAP=string('true')">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfoSOAP($DescribeResultAccessResponse_2)" /></ctl:message>
						</xsl:if>
						<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
							<ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($DescribeResultAccessResponse_2)" /></ctl:message>
						</xsl:if>
						<ctl:message>Checking the response for validity...</ctl:message>
						<xsl:variable name="isCorrect_2">
							<ctl:call-function name="spsFunctions:checkExceptionReport">
								<ctl:with-param name="exceptionReport" select="$DescribeResultAccessResponse_2" />
								<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
								<ctl:with-param name="locatorToCheck" select="string('target')" />
								<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
							</ctl:call-function>
						</xsl:variable>
						<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect_2" /></ctl:message>
						<xsl:if test="not(xsd:boolean($isCorrect_2))">
							<ctl:message>FAILURE:  The returned exception report was expected to contain an exceptionCode of InvalidParameterValue and a locator of target (invalid task).</ctl:message>
							<ctl:fail />
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.DescribeResultAccess-RequestWithProcedure.1">
			<ctl:param name="getCapabilitiesResponse" />
			<ctl:param name="DescribeResultAccess_URL" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>All GetTask request with valid parameters (valid procedure in the target) have correct response.</ctl:assertion>
			<ctl:comment>Pass if the server return a valid response; fail otherwise.</ctl:comment>
			<ctl:code>
				<!-- 1.For each procedure in the response for the GetCapabilities operation ,create a DescribeResultAccess request. -->
				<xsl:for-each select="$getCapabilitiesResponse//sps:contents/sps:SPSContents/swes:offering">
					<xsl:variable name="procedure" select="./sps:SensorOffering/swes:procedure" />
					<xsl:variable name="DescribeResultAccessResponse">
						<xsl:if test="$PostEncodingIsSOAP=string('true')">
							<ctl:soap-request version="1.2" charset="UTF-8">
								<ctl:url>
									<xsl:value-of select="$DescribeResultAccess_URL"/>
								</ctl:url> 
								<ctl:body>
									<sps:DescribeResultAccess service="SPS" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
										<sps:target>
											<sps:procedure><xsl:value-of select="$procedure" /></sps:procedure> 
										</sps:target>
									</sps:DescribeResultAccess>
								</ctl:body>
								<ctl:call-function name="spsFunctions:validateDescribeResultAccessResponseSOAP" />
							</ctl:soap-request>
						</xsl:if>
						<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$DescribeResultAccess_URL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sps:DescribeResultAccess service="SPS" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
										<sps:target>
											<sps:procedure><xsl:value-of select="$procedure" /></sps:procedure> 
										</sps:target>
									</sps:DescribeResultAccess>
								</ctl:body>
								<ctl:call-function name="spsFunctions:validateDescribeResultAccessResponse" />
							</ctl:request>
						</xsl:if>
					</xsl:variable>
					<!-- 2.Check Response -->
					<xsl:choose>
						<xsl:when test="not($DescribeResultAccessResponse/*)">
							<ctl:message>FAILURE:  The server did not return a response to an invalid DescribeResultAccess request or the response was not a valid exception.[procedure=<xsl:value-of select="$procedure"/>]</ctl:message>
							<ctl:fail />
						</xsl:when>
						<xsl:otherwise>
							<ctl:message>root element:"<xsl:value-of select="node-name($DescribeResultAccessResponse/*[1])"/>"</ctl:message>
							<!--
							<ctl:message>node-name2:"<xsl:value-of select="node-name($DescribeResultAccessResponse/*/*[1])"/>"</ctl:message>
							<ctl:message>node-name3:"<xsl:value-of select="node-name($DescribeResultAccessResponse/*/*/*[1])"/>"</ctl:message>
							-->
							<!-- 呼叫 CheckResponse 檢查回應是否正確 -->
							<ctl:call-test name="sps:core-SPS.DescribeResultAccess-CheckResponse">
								<ctl:with-param name="DescribeResultAccessResponse">
									<Envelope>
										<xsl:copy-of select="$DescribeResultAccessResponse" />
									</Envelope>
								</ctl:with-param>
								<ctl:with-param name="ProcedureOrTask" select="string('procedure')" />
								<ctl:with-param name="ValueOfProcedureOrTask" select="$procedure" />
							</ctl:call-test>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:for-each>
				
			</ctl:code>
		</ctl:test>
		
		<ctl:test name="sps:core-SPS.DescribeResultAccess-RequestWithTask.1"><!-- Call by Submit -->
			<ctl:param name="DescribeResultAccess_URL" />
			<ctl:param name="task" />
			<ctl:param name="PostEncodingIsSOAP" />
			<ctl:assertion>All GetTask request with valid parameters (valid task in the target) have correct response.</ctl:assertion>
			<ctl:comment>Pass if the server return a valid response; fail otherwise.</ctl:comment>
			<ctl:code>
				<!-- 1.Create a DescribeResultAccess request by using task. -->
				<xsl:variable name="DescribeResultAccessResponse">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$DescribeResultAccess_URL"/>
							</ctl:url> 
							<ctl:body>
								<sps:DescribeResultAccess service="SPS" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:target>
										<sps:task><xsl:value-of select="$task" /></sps:task> 
									</sps:target>
								</sps:DescribeResultAccess>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateDescribeResultAccessResponseSOAP" />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$DescribeResultAccess_URL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:DescribeResultAccess service="SPS" version="2.0.0" xsi:schemaLocation="http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" xmlns:sps="http://www.opengis.net/sps/2.0" xmlns:swe="http://www.opengis.net/swe/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<sps:target>
										<sps:task><xsl:value-of select="$task" /></sps:task> 
									</sps:target>
								</sps:DescribeResultAccess>
							</ctl:body>
							<ctl:call-function name="spsFunctions:validateDescribeResultAccessResponse" />
						</ctl:request>
					</xsl:if>
				</xsl:variable>
				<!-- 2.Check Response -->
				<xsl:choose>
					<xsl:when test="not($DescribeResultAccessResponse/*)">
						<ctl:message>FAILURE:  The server did not return a response to an invalid DescribeResultAccess request or the response was not a valid exception.[task=<xsl:value-of select="$task"/>]</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<!-- 呼叫 CheckResponse 檢查回應是否正確 -->
						<ctl:call-test name="sps:core-SPS.DescribeResultAccess-CheckResponse">
							<ctl:with-param name="DescribeResultAccessResponse">
								<Envelope>
									<xsl:copy-of select="$DescribeResultAccessResponse" />
								</Envelope>
							</ctl:with-param>
							<ctl:with-param name="ProcedureOrTask" select="string('task')" />
							<ctl:with-param name="ValueOfProcedureOrTask" select="$task" />
						</ctl:call-test>	
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		
		<ctl:test name="sps:core-SPS.DescribeResultAccess-CheckResponse"><!-- Call by RequestWithProcedure or RequestWithTask -->
			<ctl:param name="DescribeResultAccessResponse" />
			<ctl:param name="ProcedureOrTask" />
			<ctl:param name="ValueOfProcedureOrTask" />
			<ctl:assertion>The response of DescribeResultAccess is valid.</ctl:assertion>
			<ctl:code>
				<!-- 檢查 DescribeResultAccess 的response , ReferenceGroup內容再丟給另外一個test檢查-->
				<!--
					sps:DescribeResultAccessResponse/sps:availability	*One*
						sps:available 或 sps:unavailable *One of them*
						sps:available:
							sps:DataAvailable/sps:dataReference		*One of more*
								~~~~~throw to another test~~~~~
								ows:ReferenceGroup	*One* 
									~~~
						sps:unavailable:
							sps:DataNotAvailable/
								sps:unavailableCode	*One* Code="DataNotAvailable" or "DataServiceUnavailable"
				-->
				<xsl:choose>
					<xsl:when test="not(count($DescribeResultAccessResponse//sps:DescribeResultAccessResponse/sps:availability)=1)">
						<ctl:message>FAILURE: There must be one and only one element:"sps:availability" in the response of the DescribeResultAccess.[<xsl:value-of select="$ProcedureOrTask"/>=<xsl:value-of select="$ValueOfProcedureOrTask"/>]</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:when test="not(count($DescribeResultAccessResponse//sps:DescribeResultAccessResponse/sps:availability/sps:available)+count($DescribeResultAccessResponse//sps:DescribeResultAccessResponse/sps:availability/sps:unavailable)=1)">
						<ctl:message>FAILURE: There must be one and only one element in sps:availability : "sps:available" or "sps:unavailable".[<xsl:value-of select="$ProcedureOrTask"/>=<xsl:value-of select="$ValueOfProcedureOrTask"/>]</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="count($DescribeResultAccessResponse//sps:DescribeResultAccessResponse/sps:availability/sps:available)=1">
							<xsl:choose>
								<xsl:when test="not(count($DescribeResultAccessResponse//sps:DescribeResultAccessResponse/sps:availability/sps:available/sps:DataAvailable/sps:dataReference)>0)">
									<ctl:message>FAILURE: There must be one or more "sps:dataReference" in the element:"sps:DataAvailable".[<xsl:value-of select="$ProcedureOrTask"/>=<xsl:value-of select="$ValueOfProcedureOrTask"/>]</ctl:message>
									<ctl:fail />
								</xsl:when>
								<xsl:otherwise>
									<xsl:for-each select="$DescribeResultAccessResponse//sps:DescribeResultAccessResponse/sps:availability/sps:available/sps:DataAvailable/sps:dataReference">
										<xsl:choose>
											<xsl:when test="not(count(./ows:ReferenceGroup)=1)">
												<ctl:message>FAILURE: There must be one and only one element:"sps:ReferenceGroup" in "sps:dataReference".[<xsl:value-of select="$ProcedureOrTask"/>=<xsl:value-of select="$ValueOfProcedureOrTask"/>]</ctl:message>
												<ctl:fail />
											</xsl:when>
											<xsl:otherwise>
												<!-- throw to another test to check ReferenceGroup -->
												<ctl:call-test name="sps:core-SPS.DescribeResultAccess-ReferenceGroup.1">
													<ctl:with-param name="ReferenceGroup" select="." />
													<ctl:with-param name="ProcedureOrTask" select="$ProcedureOrTask" />
													<ctl:with-param name="ValueOfProcedureOrTask" select="$ValueOfProcedureOrTask" />
												</ctl:call-test>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:for-each>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:if>
						<xsl:if test="count($DescribeResultAccessResponse//sps:DescribeResultAccessResponse/sps:availability/sps:unavailable)=1">
							<xsl:choose>
								<xsl:when test="not(count($DescribeResultAccessResponse//sps:DescribeResultAccessResponse/sps:availability/sps:unavailable/sps:DataNotAvailable/sps:unavailableCode)=1)">
									<ctl:message>FAILURE: There must be one and only one element:"sps:unavailableCode" in "sps:unavailable".[<xsl:value-of select="$ProcedureOrTask"/>=<xsl:value-of select="$ValueOfProcedureOrTask"/>]</ctl:message>
									<ctl:fail />
								</xsl:when>
								<xsl:when test="not($DescribeResultAccessResponse//sps:DescribeResultAccessResponse/sps:availability/sps:unavailable/sps:DataNotAvailable/sps:unavailableCode=string('DataNotAvailable')) or not($DescribeResultAccessResponse//sps:DescribeResultAccessResponse/sps:availability/sps:unavailable/sps:DataNotAvailable/sps:unavailableCode=string('DataServiceUnavailable'))">
									<ctl:message>FAILURE: The value of the element:"sps:UnavailableCode" shall be "DataNotAvailable" or "DataServiceUnavailable".[<xsl:value-of select="$ProcedureOrTask"/>=<xsl:value-of select="$ValueOfProcedureOrTask"/>]</ctl:message>
									<ctl:fail />
								</xsl:when>
								<xsl:otherwise>
									<ctl:message>Passed: the test of DescribeResultAccess Response with element:"sps:availability/sps:unavailable" is valid.[<xsl:value-of select="$ProcedureOrTask"/>=<xsl:value-of select="$ValueOfProcedureOrTask"/>]</ctl:message>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.DescribeResultAccess-ReferenceGroup.1"><!-- Call by CheckResponse -->
			<ctl:param name="ReferenceGroup" />
			<ctl:param name="ProcedureOrTask" />
			<ctl:param name="ValueOfProcedureOrTask" />
			<ctl:assertion>All ReferenceGroup is valid in DescribeResultAccess response for a DescribeResultAccess request with procedure or task.</ctl:assertion>
			<ctl:code>
				<!--
					$ReferenceGroup 有包含 ReferenceGroup tag
					Check SPS 2.0 09-000 Table 41. 1,2,3,4,5 整合測試
					v1.ows:Reference				1個 (2的話是ows:SystemReference)
					v2.屬性 role					1個 (五種可能性)
					v3.屬性 Title				0..1個
					v4.元素 ows:Identifier		1個
					5.元素 ows:Format 			0..1個(3,5)		其他不檢查
					6.元素 ows:Abstract			0..1個(3)		其他不檢查
					7.元素 ows:Metadata			1..*個(123)		其他不檢查
					8.requestMessage			只有2有,2選1			其他不檢查
						或
					  requestMessageReference"
				-->
				<xsl:choose>
					<xsl:when test="(count($ReferenceGroup/ows:ReferenceGroup/ows:Reference/@xlink:title)>1) or (count($ReferenceGroup/ows:ReferenceGroup/ows:ServiceReference/@xlink:title)>1)">
						<ctl:message>FAILURE: The number of attribute:Title in the Reference or ServiceReference is zero or one .[<xsl:value-of select="$ProcedureOrTask"/>=<xsl:value-of select="$ValueOfProcedureOrTask"/>]</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:when test="not(count($ReferenceGroup/ows:ReferenceGroup/ows:Reference/ows:Identifier)=1) and not(count($ReferenceGroup/ows:ReferenceGroup/ows:ServiceReference/ows:Identifier)=1)">
						<ctl:message>FAILURE: The number of attribute:Title in the Reference or ServiceReference is zero or one .[<xsl:value-of select="$ProcedureOrTask"/>=<xsl:value-of select="$ValueOfProcedureOrTask"/>]</ctl:message>
						<ctl:fail />
					</xsl:when>
					<!-- situaction 1 -->
					<xsl:when test="$ReferenceGroup/ows:ReferenceGroup/ows:Reference/@xlink:role=string('http://www.opengis.net/spec/SPS/2.0/referenceType/FullURLAccess')"><!-- situation 1 -->
						<ctl:message>situaction 1.[<xsl:value-of select="$ProcedureOrTask"/>=<xsl:value-of select="$ValueOfProcedureOrTask"/>]</ctl:message>
						<xsl:choose>
							<xsl:when test="count($ReferenceGroup/ows:ReferenceGroup/ows:Reference/ows:Metadata)=0">
								<ctl:message>FAILURE: The number of Metadata element in the Reference must be one or more.[<xsl:value-of select="$ProcedureOrTask"/>=<xsl:value-of select="$ValueOfProcedureOrTask"/>]</ctl:message>
								<ctl:fail />
							</xsl:when>
							<xsl:otherwise>
								<xsl:for-each select="$ReferenceGroup/ows:ReferenceGroup/ows:Reference/ows:Metadata">
									<!-- 呼叫 test 檢查Metadata格式 -->
									<ctl:call-test name="sps:core-SPS.DescribeResultAccess-Metadata">
										<ctl:with-param name="Metadata" select="." />
										<ctl:with-param name="ProcedureOrTask" select="$ProcedureOrTask" />
										<ctl:with-param name="ValueOfProcedureOrTask" select="$ValueOfProcedureOrTask" />
									</ctl:call-test>
								</xsl:for-each>
								<ctl:message>Check OK: This ReferenceGroup is valid .[<xsl:value-of select="$ProcedureOrTask"/>=<xsl:value-of select="$ValueOfProcedureOrTask"/>]</ctl:message>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:when>
					<!-- situaction 2 -->
					<xsl:when test="$ReferenceGroup/ows:ReferenceGroup/ows:ServiceReference/@xlink:role=string('http://www.opengis.net/spec/SPS/2.0/referenceType/FullServiceAccess')"><!-- situation 2 -->
						<ctl:message>situaction 2.[<xsl:value-of select="$ProcedureOrTask"/>=<xsl:value-of select="$ValueOfProcedureOrTask"/>]</ctl:message>
						<xsl:choose>
							<xsl:when test="count($ReferenceGroup/ows:ReferenceGroup/ows:ServiceReference/ows:Metadata)=0">
								<ctl:message>FAILURE: The number of Metadata element in the ServiceReference must be one or more.[<xsl:value-of select="$ProcedureOrTask"/>=<xsl:value-of select="$ValueOfProcedureOrTask"/>]</ctl:message>
								<ctl:fail />
							</xsl:when>
							<xsl:when test="not(count($ReferenceGroup/ows:ReferenceGroup/ows:ServiceReference/ows:RequestMessage)+count($ReferenceGroup/ows:ReferenceGroup/ows:ServiceReference/ows:RequestMessageReference)=1)">
								<ctl:message>FAILURE: The number of RequestMessage element or RequestMessageReference element in the ServiceReference must be one.[<xsl:value-of select="$ProcedureOrTask"/>=<xsl:value-of select="$ValueOfProcedureOrTask"/>]</ctl:message>
								<ctl:fail />
							</xsl:when>
							<xsl:otherwise>
								<xsl:for-each select="$ReferenceGroup/ows:ReferenceGroup/ows:ServiceReference/ows:Metadata">
									<!-- 呼叫 test 檢查Metadata格式 -->
									<ctl:call-test name="sps:core-SPS.DescribeResultAccess-Metadata">
										<ctl:with-param name="Metadata" select="." />
										<ctl:with-param name="ProcedureOrTask" select="$ProcedureOrTask" />
										<ctl:with-param name="ValueOfProcedureOrTask" select="$ValueOfProcedureOrTask" />
									</ctl:call-test>
								</xsl:for-each>
								<ctl:message>Check OK: This ReferenceGroup is valid .[<xsl:value-of select="$ProcedureOrTask"/>=<xsl:value-of select="$ValueOfProcedureOrTask"/>]</ctl:message>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:when>
					<!-- situaction 3 -->
					<xsl:when test="$ReferenceGroup/ows:ReferenceGroup/ows:Reference/@xlink:role=string('http://www.opengis.net/spec/SPS/2.0/referenceType/ServiceURL')"><!-- situation 3 -->
						<ctl:message>situaction 3.[<xsl:value-of select="$ProcedureOrTask"/>=<xsl:value-of select="$ValueOfProcedureOrTask"/>]</ctl:message>
						<xsl:choose>
							<xsl:when test="count($ReferenceGroup/ows:ReferenceGroup/ows:Reference/ows:Metadata)=0">
								<ctl:message>FAILURE: The number of Metadata element in the Reference must be one or more.[<xsl:value-of select="$ProcedureOrTask"/>=<xsl:value-of select="$ValueOfProcedureOrTask"/>]</ctl:message>
								<ctl:fail />
							</xsl:when>
							<xsl:when test="count($ReferenceGroup/ows:ReferenceGroup/ows:Reference/ows:Format)>1">
								<ctl:message>FAILURE: The number of Format element in the Reference must be zero or one.[<xsl:value-of select="$ProcedureOrTask"/>=<xsl:value-of select="$ValueOfProcedureOrTask"/>]</ctl:message>
								<ctl:fail />
							</xsl:when>
							<xsl:when test="count($ReferenceGroup/ows:ReferenceGroup/ows:Reference/ows:Abstract)>1">
								<ctl:message>FAILURE: The number of Abstract element in the Reference must be zero or one.[<xsl:value-of select="$ProcedureOrTask"/>=<xsl:value-of select="$ValueOfProcedureOrTask"/>]</ctl:message>
								<ctl:fail />
							</xsl:when>
							<xsl:otherwise>
								<xsl:for-each select="$ReferenceGroup/ows:ReferenceGroup/ows:Reference/ows:Metadata">
									<!-- 呼叫 test 檢查Metadata格式 -->
									<ctl:call-test name="sps:core-SPS.DescribeResultAccess-Metadata">
										<ctl:with-param name="Metadata" select="." />
										<ctl:with-param name="ProcedureOrTask" select="$ProcedureOrTask" />
										<ctl:with-param name="ValueOfProcedureOrTask" select="$ValueOfProcedureOrTask" />
									</ctl:call-test>
								</xsl:for-each>
								<ctl:message>Check OK: This ReferenceGroup is valid .[<xsl:value-of select="$ProcedureOrTask"/>=<xsl:value-of select="$ValueOfProcedureOrTask"/>]</ctl:message>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:when>
					<!-- situaction 4 -->
					<xsl:when test="$ReferenceGroup/ows:ReferenceGroup/ows:Reference/@xlink:role=string('http://www.opengis.net/spec/SPS/2.0/referenceType/Resource')"><!-- situation 4 -->
						<ctl:message>situaction 4.[<xsl:value-of select="$ProcedureOrTask"/>=<xsl:value-of select="$ValueOfProcedureOrTask"/>]</ctl:message>
						<ctl:message>Check OK: This ReferenceGroup is valid .[<xsl:value-of select="$ProcedureOrTask"/>=<xsl:value-of select="$ValueOfProcedureOrTask"/>]</ctl:message>
					</xsl:when>
					<!-- situaction 5 -->
					<xsl:when test="$ReferenceGroup/ows:ReferenceGroup/ows:Reference/@xlink:role=string('http://www.opengis.net/spec/SPS/2.0/referenceType/Folder')"><!-- situation 5 -->
						<ctl:message>situaction 5.[<xsl:value-of select="$ProcedureOrTask"/>=<xsl:value-of select="$ValueOfProcedureOrTask"/>]</ctl:message>
						<xsl:choose>
							<xsl:when test="count($ReferenceGroup/ows:ReferenceGroup/ows:Reference/ows:Format)>1">
								<ctl:message>FAILURE: The number of Format element in the Reference must be zero or one.[<xsl:value-of select="$ProcedureOrTask"/>=<xsl:value-of select="$ValueOfProcedureOrTask"/>]</ctl:message>
								<ctl:fail />
							</xsl:when>
							<xsl:otherwise>
								<ctl:message>Check OK: This ReferenceGroup is valid .[<xsl:value-of select="$ProcedureOrTask"/>=<xsl:value-of select="$ValueOfProcedureOrTask"/>]</ctl:message>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:when>
					<xsl:otherwise><!-- others fail -->
						<ctl:message>FAILURE: The data in the ReferenceGroup is not valid.[<xsl:value-of select="$ProcedureOrTask"/>=<xsl:value-of select="$ValueOfProcedureOrTask"/>]</ctl:message>
						<ctl:fail />
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sps:core-SPS.DescribeResultAccess-Metadata"><!-- Call by ReferenceGroup.1 -->
			<ctl:param name="Metadata" /><!-- 不包含 Metadata -->
			<ctl:param name="ProcedureOrTask" />
			<ctl:param name="ValueOfProcedureOrTask" />
			<ctl:assertion>All ReferenceGroup is valid in DescribeResultAccess response for a DescribeResultAccess request with procedure or task.</ctl:assertion>
			<ctl:code>
				<!-- 					
					ows:Metadata	1..*
						SPSMetadata 	*One or more*
							dataAccessType *One*
				-->
				<xsl:choose>
					<xsl:when test="count($Metadata/sps:SPSMetadata)=0">
						<ctl:message>FAILURE: The number of SPSMetadata element in the Metadata must be one or more.[<xsl:value-of select="$ProcedureOrTask"/>=<xsl:value-of select="$ValueOfProcedureOrTask"/>]</ctl:message>
						<ctl:fail />
					</xsl:when>
					<xsl:otherwise>
						<xsl:for-each select="$Metadata/sps:SPSMetadata">
							<xsl:choose>
								<xsl:when test="not(count(./sps:dataAccessType)=1)">
									<ctl:message>FAILURE: The number of dataAccessType element in the SPSMetadata must be one.[<xsl:value-of select="$ProcedureOrTask"/>=<xsl:value-of select="$ValueOfProcedureOrTask"/>]</ctl:message>
									<ctl:fail />
								</xsl:when>
								<xsl:otherwise>
									<ctl:message>Check OK: This SPSMetadata is valid.[<xsl:value-of select="$ProcedureOrTask"/>=<xsl:value-of select="$ValueOfProcedureOrTask"/>]</ctl:message>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:for-each>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
	</ctl:package>
</ctl:package>
