<?xml version="1.0" encoding="UTF-8"?>
<ctl:package
	xmlns="http://www.occamlab.com/ctl"
	xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
	xmlns:ctl="http://www.occamlab.com/ctl"
	xmlns:parsers="http://www.occamlab.com/te/parsers"
	xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	xmlns:owsTests="https://www.cite.opengeospatial.org/ows-1.0/tests"
	xmlns:owsFunctions="https://www.cite.opengeospatial.org/ows-1.0/functions"
	xmlns:ows="http://www.opengis.net/ows/1.1"
	xmlns:soap12="http://www.w3.org/2003/05/soap-envelope"
	xmlns:sps="http://www.opengis.net/sps/2.0"
>
	<!-- 未使用的命名空間 Those namespaces whick are not used in this document
		xmlns:p="http://teamengine.sourceforge.net/parsers"
		xmlns:saxon="http://saxon.sf.net/"
		xmlns:xlink="http://www.w3.org/1999/xlink" 
		xmlns:xi="http://www.w3.org/2001/XInclude"
	-->
	<!-- 一些命名空間升級由SPS 1.0到SPS 2.0   Some xml namespace changed from SPS 1.0 to SPS 2.0
		xmlns:sps="http://www.opengis.net/sps/1.0"  =>	xmlns:sps="http://www.opengis.net/sps/2.0"
		xmlns:swe="http://www.opengis.net/swe/1.0"	=>	http://www.opengis.net/swe/2.0
		xmlns:gml="http://www.opengis.net/gml" 		=>	http://www.opengis.net/gml/3.2
		xmlns:ows="http://www.opengis.net/ows"		=>	http://www.opengis.net/ows/1.1
	-->

    <!--The main test that should be called by your ETS in order to execute the OWS Common tests.-->
    <ctl:test name="owsTests:ows-main"><!-- CHECK OK -->
      <ctl:param name="serviceURL">The URL of the service being tested</ctl:param>
      <ctl:param name="serviceType">The OGC identifier for the type of service being tested (i.e. SPS)</ctl:param>
      <ctl:param name="serviceVersion">The version of the service being tested</ctl:param>
      <ctl:param name="capabilitiesRootElementName">The name of the root element of a Capabilities document returned by this service (i.e. Capabilities, WFS_Capabilities, etc.)</ctl:param>
      <ctl:param name="capabilitiesResponseSchemaLocation">The location of the Capabilities schema for the service being tested</ctl:param>
      <ctl:param name="capabilitiesResponseSchemaType">The type of resource specified in the capabilitiesResponseSchemaLocation above (i.e. url, file, resource).  Corresponds with the CTL XMLValidatingParser schema type attribute.</ctl:param>
      <ctl:param name="capabilitiesResponseContentType">The expected HTTP header content type of the GetCapabilities response (i.e. text/xml)</ctl:param>
      <ctl:param name="exceptionReportSchemaLocation">The location of the ExceptionReport schema for the version of OWS Common being tested</ctl:param>
      <ctl:param name="exceptionReportSchemaType">The type of resource specified in the exceptionReportSchemaLocation above (i.e. url, file, resource).  Corresponds with the CTL XMLValidatingParser schema type attribute.</ctl:param>
	  <ctl:param name="PostEncodingIsSOAP" />
	  <ctl:param name="GetCapabilities_GET" />
      <ctl:assertion>Run test group for GetCapabilities requests using the GET method.</ctl:assertion>
      <ctl:code>
        <ctl:message>**********************************************************************</ctl:message>
        <ctl:call-test name="owsTests:ows-OWS.GetCapabilities.1">
            <ctl:with-param name="serviceURL" select="$serviceURL"/>
            <ctl:with-param name="serviceType" select="$serviceType" />
            <ctl:with-param name="serviceVersion" select="$serviceVersion" />
            <ctl:with-param name="capabilitiesResponseSchemaLocation" select="$capabilitiesResponseSchemaLocation" />
            <ctl:with-param name="capabilitiesResponseSchemaType" select="$capabilitiesResponseSchemaType" />
            <ctl:with-param name="capabilitiesResponseContentType" select="$capabilitiesResponseContentType" />
            <ctl:with-param name="exceptionReportSchemaLocation" select="$exceptionReportSchemaLocation" />
            <ctl:with-param name="exceptionReportSchemaType" select="$exceptionReportSchemaType" />
            <ctl:with-param name="capabilitiesRootElementName" select="$capabilitiesRootElementName" />
			<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
			<ctl:with-param name="GetCapabilities_GET" select="$GetCapabilities_GET" />
        </ctl:call-test>
      </ctl:code>
    </ctl:test>
    
    <!--GetCapabilities request-->
    <test name="owsTests:ows-OWS.GetCapabilities.1"><!-- CHECK OK -->
      <ctl:param name="serviceURL"/>
      <ctl:param name="serviceType" />
      <ctl:param name="serviceVersion" />
      <ctl:param name="capabilitiesResponseSchemaLocation" />
      <ctl:param name="capabilitiesResponseSchemaType" />
      <ctl:param name="capabilitiesResponseContentType" />
      <ctl:param name="exceptionReportSchemaLocation" />
      <ctl:param name="exceptionReportSchemaType" />
      <ctl:param name="capabilitiesRootElementName" />
	  <ctl:param name="PostEncodingIsSOAP" />
	  <ctl:param name="GetCapabilities_GET" />
      <assertion>The GET method request must be supported (using HTTP GET).</assertion>
      <comment>GetCapabilities by GET.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root element matches the provided root element.</comment>
	  <link>OWS.GetCapabilities</link>
      <link>OGC 05-008: cl. 7.1, p. 10, cl. 7.2.2; cl. 7.2.3</link>
		<code>
            <ctl:message>Executing a valid GetCapabilities request...</ctl:message>
			<xsl:variable name="request1">
				<xsl:if test="$PostEncodingIsSOAP=string('true')">
					<ctl:soap-request version="1.2" charset="UTF-8">
						<ctl:url>
							<xsl:value-of select="$serviceURL"/>
						</ctl:url>
						<ctl:body>
							<sps:GetCapabilities service="SPS" acceptVersions="2.0.0"
								xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" 
								xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" 
								xmlns:sps="http://www.opengis.net/sps/2.0" 
								xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"></sps:GetCapabilities>
						</ctl:body>
						<parsers:SOAPParser return="content">
							<parsers:XMLValidatingParser>
								<parsers:schemas>
									<parsers:schema>
										<xsl:attribute name="type"><xsl:value-of select="$capabilitiesResponseSchemaType" /></xsl:attribute>
										<xsl:value-of select="$capabilitiesResponseSchemaLocation" />
									</parsers:schema>
								</parsers:schemas>
							</parsers:XMLValidatingParser>
						</parsers:SOAPParser>
					</ctl:soap-request>
				</xsl:if>
				<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
					<xsl:if test="$GetCapabilities_GET">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$serviceURL"/>
							</ctl:url>
							<ctl:method>get</ctl:method>
							<ctl:param name="service"><xsl:value-of select="$serviceType" /></ctl:param>
							<ctl:param name="acceptVersions"><xsl:value-of select="$serviceVersion" /></ctl:param>
							<ctl:param name="request">GetCapabilities</ctl:param>
							<parsers:XMLValidatingParser>
								<parsers:schemas>
									<parsers:schema>
										<xsl:attribute name="type"><xsl:value-of select="$capabilitiesResponseSchemaType" /></xsl:attribute>
										<xsl:value-of select="$capabilitiesResponseSchemaLocation" />
									</parsers:schema>
								</parsers:schemas>
							</parsers:XMLValidatingParser>
						</ctl:request>
					</xsl:if>
					<xsl:if test="not($GetCapabilities_GET)">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$serviceURL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:GetCapabilities  service="SPS" acceptVersions="2.0.0"
									xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" 
									xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" 
									xmlns:sps="http://www.opengis.net/sps/2.0" 
									xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"></sps:GetCapabilities>
							</ctl:body>
							<parsers:XMLValidatingParser>
								<parsers:schemas>
									<parsers:schema>
										<xsl:attribute name="type"><xsl:value-of select="$capabilitiesResponseSchemaType" /></xsl:attribute>
										<xsl:value-of select="$capabilitiesResponseSchemaLocation" />
									</parsers:schema>
								</parsers:schemas>
							</parsers:XMLValidatingParser>
						</ctl:request>
					</xsl:if>
				</xsl:if>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="not($request1/*)">
			       	<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetCapabilities response schema for <xsl:value-of select="$serviceType" />.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
			    <xsl:otherwise>
					<xsl:variable name="request1Root" select="local-name-from-QName(node-name($request1/*[1]))" />
                    <xsl:choose>
                        <xsl:when test="not($request1Root=$capabilitiesRootElementName)">
                            <ctl:message>The root element from the response to a GetCapabilities request "<xsl:value-of select="$request1Root" />" does not match the expected root element of "<xsl:value-of select="$capabilitiesRootElementName" />"</ctl:message>
                            <ctl:fail />
                        </xsl:when>
                        <xsl:otherwise>
                            <ctl:message>A valid GetCapabilities response was returned.  This response will be used as appropriate in the remaining OWS Common tests.  Executing the remaining OWS Common tests...</ctl:message>
                            <xsl:variable name="capabilitiesDocument">
                                <xsl:copy-of select="$request1" />
                            </xsl:variable>
							<!--Content-type-->
                            <ctl:message>**********************************************************************</ctl:message>
                            <ctl:call-test name="owsTests:ows-OWS.ContentType.1">
                                <ctl:with-param name="serviceURL" select="$serviceURL"/>
                                <ctl:with-param name="serviceType" select="$serviceType"/>
                                <ctl:with-param name="serviceVersion" select="$serviceVersion"/>
                                <ctl:with-param name="rootElementName" select="$capabilitiesRootElementName" />
                                <ctl:with-param name="expectedContentType" select="$capabilitiesResponseContentType" />
								<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP"/>
								<ctl:with-param name="GetCapabilities_GET" select="$GetCapabilities_GET" />
                            </ctl:call-test>
							<!--Exceptions-->
                            <!--Missing required request parameter-->
                            <ctl:message>**********************************************************************</ctl:message>
                            <ctl:call-test name="owsTests:ows-OWS.GetCapabilities-NoService.1">
                                <ctl:with-param name="serviceURL" select="$serviceURL"/>
                                <ctl:with-param name="serviceVersion" select="$serviceVersion" />
                                <ctl:with-param name="capabilitiesResponseSchemaLocation" select="$capabilitiesResponseSchemaLocation" />
                                <ctl:with-param name="capabilitiesResponseSchemaType" select="$capabilitiesResponseSchemaType" />
								<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP"/>
								<ctl:with-param name="GetCapabilities_GET" select="$GetCapabilities_GET" />
                            </ctl:call-test>
                            <!--Invalid request parameter value-->
                            <ctl:message>**********************************************************************</ctl:message>
                            <ctl:call-test name="owsTests:ows-OWS.GetCapabilities-Exceptions.2">
                                <ctl:with-param name="serviceURL" select="$serviceURL"/>
                                <ctl:with-param name="serviceVersion" select="$serviceVersion" />
                                <ctl:with-param name="exceptionReportSchemaLocation" select="$exceptionReportSchemaLocation" />
                                <ctl:with-param name="exceptionReportSchemaType" select="$exceptionReportSchemaType" />
								<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP"/>
								<ctl:with-param name="GetCapabilities_GET" select="$GetCapabilities_GET" />
                            </ctl:call-test>
                            <!--Version negotiation failed  !!!Same to acceptVersions.3 so Skip this test!!!
                            <ctl:message>**********************************************************************</ctl:message>
                            <ctl:call-test name="owsTests:ows-OWS.GetCapabilities-Exceptions.3">
                                <ctl:with-param name="serviceURL" select="$serviceURL"/>
                                <ctl:with-param name="serviceType" select="$serviceType" />
                                <ctl:with-param name="serviceVersion" select="$serviceVersion" />
                                <ctl:with-param name="exceptionReportSchemaLocation" select="$exceptionReportSchemaLocation" />
                                <ctl:with-param name="exceptionReportSchemaType" select="$exceptionReportSchemaType" />
								<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP"/>
								<ctl:with-param name="GetCapabilities_GET" select="$GetCapabilities_GET" />
                            </ctl:call-test>-->
                            <!--Invalid update sequence-->
                            <xsl:if test="not(string($capabilitiesDocument//@updateSequence)='')">
                                <ctl:message>**********************************************************************</ctl:message>
                                <ctl:message>updateSequence is supported for GetCapabilities requests.  Running updateSequence tests...</ctl:message>
                    			<ctl:call-test name="owsTests:ows-OWS.GetCapabilities-UpdateSequence.1">
                    				<ctl:with-param name="serviceURL" select="$serviceURL"/>
                                    <ctl:with-param name="exceptionReportSchemaLocation" select="$exceptionReportSchemaLocation" />
                                    <ctl:with-param name="exceptionReportSchemaType" select="$exceptionReportSchemaType" />
									<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP"/>
									<ctl:with-param name="GetCapabilities_GET" select="$GetCapabilities_GET" />
                    			</ctl:call-test>
                    		</xsl:if>		
                            <!--An error occurs that prevents successful request processing-->
                            <ctl:message>**********************************************************************</ctl:message>
                            <ctl:call-test name="owsTests:ows-OWS.GetCapabilities-Exceptions.5">
                                <ctl:with-param name="serviceURL" select="$serviceURL"/>
                                <ctl:with-param name="serviceType" select="$serviceType" />
                                <ctl:with-param name="serviceVersion" select="$serviceVersion" />
                                <ctl:with-param name="exceptionReportSchemaLocation" select="$exceptionReportSchemaLocation" />
                                <ctl:with-param name="exceptionReportSchemaType" select="$exceptionReportSchemaType" />
								<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP"/>
								<ctl:with-param name="GetCapabilities_GET" select="$GetCapabilities_GET" />
                            </ctl:call-test>
                            <!--Case insensitive KVP names-->
                            <ctl:message>**********************************************************************</ctl:message>
                            <ctl:call-test name="owsTests:ows-OWS.CaseInsensitiveKvpNames.1">
                                <ctl:with-param name="serviceURL" select="$serviceURL"/>
                                <ctl:with-param name="serviceType" select="$serviceType" />
                                <ctl:with-param name="serviceVersion" select="$serviceVersion" />
                                <ctl:with-param name="responseSchemaLocation" select="$capabilitiesResponseSchemaLocation" />
                                <ctl:with-param name="responseSchemaType" select="$capabilitiesResponseSchemaType" />
                                <ctl:with-param name="rootElementName" select="$capabilitiesRootElementName" />
								<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP"/>
								<ctl:with-param name="GetCapabilities_GET" select="$GetCapabilities_GET" />
                            </ctl:call-test>
                            <!--acceptVersions tests-->
                            <ctl:message>**********************************************************************</ctl:message>
                    		<ctl:call-test name="owsTests:ows-OWS.GetCapabilities-acceptVersions.1">
                                <ctl:with-param name="serviceURL" select="$serviceURL"/>
                                <ctl:with-param name="serviceType" select="$serviceType" />
                                <ctl:with-param name="serviceVersion" select="$serviceVersion" />
                                <ctl:with-param name="responseSchemaLocation" select="$capabilitiesResponseSchemaLocation" />
                                <ctl:with-param name="responseSchemaType" select="$capabilitiesResponseSchemaType" />
                                <ctl:with-param name="rootElementName" select="$capabilitiesRootElementName"/>
								<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP"/>
								<ctl:with-param name="GetCapabilities_GET" select="$GetCapabilities_GET" />
                            </ctl:call-test>
                            <ctl:message>**********************************************************************</ctl:message>
                            <ctl:call-test name="owsTests:ows-OWS.GetCapabilities-acceptVersions.2">
                                <ctl:with-param name="serviceURL" select="$serviceURL"/>
                                <ctl:with-param name="serviceType" select="$serviceType"/>
                                <ctl:with-param name="serviceVersion" select="$serviceVersion"/>
                                <ctl:with-param name="acceptVersions" select="string('2.0.0,1.0.0')"/>
                                <ctl:with-param name="responseSchemaLocation" select="$capabilitiesResponseSchemaLocation"/>
                                <ctl:with-param name="responseSchemaType" select="$capabilitiesResponseSchemaType"/>
                                <ctl:with-param name="rootElementName" select="$capabilitiesRootElementName"/>
								<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP"/>
								<ctl:with-param name="GetCapabilities_GET" select="$GetCapabilities_GET" />
                            </ctl:call-test>
                            <ctl:message>**********************************************************************</ctl:message>
                            <ctl:call-test name="owsTests:ows-OWS.GetCapabilities-acceptVersions.3">
                                <ctl:with-param name="serviceURL" select="$serviceURL"/>
                                <ctl:with-param name="serviceType" select="$serviceType"/>
                                <ctl:with-param name="serviceVersion" select="$serviceVersion"/>
                                <ctl:with-param name="exceptionReportSchemaLocation" select="$exceptionReportSchemaLocation"/>
                                <ctl:with-param name="exceptionReportSchemaType" select="$exceptionReportSchemaType"/>
								<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP"/>
								<ctl:with-param name="GetCapabilities_GET" select="$GetCapabilities_GET" />
                            </ctl:call-test>
                            <!-- run tests for optional capabilities that are implemented -->           
                            <xsl:if test="$capabilitiesDocument//ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:Parameter[lower-case(@name)='sections']">
                              <ctl:message>**********************************************************************</ctl:message>
                              <ctl:message>Sections parameter is supported for GetCapabilities requests.  Running Sections tests...</ctl:message>
                              <ctl:call-test name="owsTests:ows-OWS.GetCapabilities-Sections.1">
                                <ctl:with-param name="serviceURL" select="$serviceURL"/>
                                <ctl:with-param name="serviceType" select="$serviceType" />
                                <ctl:with-param name="serviceVersion" select="$serviceVersion" />
                                <ctl:with-param name="responseSchemaLocation" select="$capabilitiesResponseSchemaLocation" />
                                <ctl:with-param name="responseSchemaType" select="$capabilitiesResponseSchemaType" />
								<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP"/>
								<ctl:with-param name="GetCapabilities_GET" select="$GetCapabilities_GET" />
                              </ctl:call-test>
                              <ctl:message>**********************************************************************</ctl:message>
                              <ctl:call-test name="owsTests:ows-OWS.GetCapabilities-Sections.2">
                                <ctl:with-param name="serviceURL" select="$serviceURL"/>
                                <ctl:with-param name="serviceType" select="$serviceType" />
                                <ctl:with-param name="serviceVersion" select="$serviceVersion" />
                                <ctl:with-param name="responseSchemaLocation" select="$capabilitiesResponseSchemaLocation" />
                                <ctl:with-param name="responseSchemaType" select="$capabilitiesResponseSchemaType" />
								<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP"/>
								<ctl:with-param name="GetCapabilities_GET" select="$GetCapabilities_GET" />
                              </ctl:call-test>
                            </xsl:if>
                            
							<xsl:if test="$capabilitiesDocument//ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']/ows:Parameter[lower-case(@name)='acceptformats']">
                              <ctl:message>**********************************************************************</ctl:message>
                              <ctl:message>AcceptFormats parameter is supported for GetCapabilities requests.  Running AcceptFormats tests...</ctl:message>
                              <ctl:call-test name="owsTests:ows-OWS.GetCapabilities-AcceptFormats.1">
                                <ctl:with-param name="serviceURL" select="$serviceURL"/>
                                <ctl:with-param name="serviceType" select="$serviceType" />
                                <ctl:with-param name="formats" select="$capabilitiesDocument//ows:Operation[@name='GetCapabilities']/ows:Parameter[lower-case(@name)='acceptformats']"/>
								<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP"/>
								<ctl:with-param name="GetCapabilities_GET" select="$GetCapabilities_GET" />
                              </ctl:call-test>
                            </xsl:if>
                        </xsl:otherwise>
                    </xsl:choose>
				</xsl:otherwise>
			</xsl:choose>
            
		</code>
	</test>

    <test name="owsTests:ows-OWS.ContentType.1"><!-- CHECK OK -->
      <ctl:param name="serviceURL"/>
      <ctl:param name="serviceType" />
      <ctl:param name="serviceVersion" />
      <ctl:param name="rootElementName" />
      <ctl:param name="expectedContentType" />
	  <ctl:param name="PostEncodingIsSOAP" />
	  <ctl:param name="GetCapabilities_GET" />
      <assertion>A response message containing an entity body must contain a Content-Type entity header field that correctly indicates the media type of the message body.</assertion>
      <comment>Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document matches the root element name; (3) the response Content-Type header must be $expectedContentType for XML entities.</comment>
      <link>ows-1.0.0-common-atc2</link>
      <link>OGC 05-008c1, 11.7, p.61</link>
		<code>		
            <ctl:message>Issuing a valid GetCapabilities request...</ctl:message>
			<xsl:variable name="request1">
				<xsl:if test="$PostEncodingIsSOAP=string('true')">
					<ctl:soap-request version="1.2" charset="UTF-8">
						<ctl:url>
							<xsl:value-of select="$serviceURL"/>
						</ctl:url>
						<ctl:body>
							<sps:GetCapabilities service="SPS" acceptVersions="2.0.0"
								xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" 
								xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" 
								xmlns:sps="http://www.opengis.net/sps/2.0" 
								xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"></sps:GetCapabilities>
						</ctl:body>
						<parsers:HTTPParser/>
					</ctl:soap-request>
				</xsl:if>
				<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
					<xsl:if test="$GetCapabilities_GET">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$serviceURL"/>
							</ctl:url>
							<ctl:method>get</ctl:method>
							<ctl:param name="service"><xsl:value-of select="$serviceType" /></ctl:param>
							<ctl:param name="acceptVersions"><xsl:value-of select="$serviceVersion" /></ctl:param>
							<ctl:param name="request">GetCapabilities</ctl:param>
							<parsers:HTTPParser/>
						</ctl:request>
					</xsl:if>
					<xsl:if test="not($GetCapabilities_GET)">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$serviceURL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:GetCapabilities  service="SPS" acceptVersions="2.0.0"
									xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" 
									xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" 
									xmlns:sps="http://www.opengis.net/sps/2.0" 
									xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"></sps:GetCapabilities>
							</ctl:body>
							<parsers:HTTPParser/>
						</ctl:request>
					</xsl:if>
				</xsl:if>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="not($request1/*)">
			       	<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetCapabilities response schema for <xsl:value-of select="$serviceType" />.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
			    <xsl:otherwise>
					<xsl:variable name="request1Root"><xsl:if test="$PostEncodingIsSOAP=string('true')"><xsl:value-of select="local-name-from-QName(node-name($request1/response/content/soap12:Envelope/soap12:Body/*[1]))" /></xsl:if><xsl:if test="not($PostEncodingIsSOAP=string('true'))"><xsl:value-of select="local-name-from-QName(node-name($request1/response/content/*[1]))" /></xsl:if></xsl:variable>
                    <xsl:choose>
                        <xsl:when test="not($request1Root=$rootElementName)">
                            <ctl:message>FAILURE:  The root element from the response to a GetCapabilities request "<xsl:value-of select="$request1Root" />" does not match the expected root element of "<xsl:value-of select="$rootElementName" />"</ctl:message>
                            <ctl:fail />
                        </xsl:when>
                        <xsl:otherwise>
                            <ctl:message>Checking the content type of the response.</ctl:message>
        					<xsl:variable name="content-type" select="$request1/response/headers/header[@name='Content-Type']"/>
                            <ctl:message>The response content type is:  <xsl:value-of select="$content-type" />.  Ensuring that this content type is a valid MIME type and that the returned content type matches the expected content type.</ctl:message>
                            <xsl:variable name="isValidMIMEType">
                                <ctl:call-function name="owsFunctions:isValidMIMETypeFormat">
                                    <ctl:with-param name="responseFormat" select="$content-type" />
                                </ctl:call-function>
                            </xsl:variable>
        					<xsl:if test="not(starts-with($content-type,$expectedContentType)) and not(xsd:boolean($isValidMIMEType))">
        						<ctl:message>FAILURE: Incorrect response encoding.  "<xsl:value-of select="$expectedContentType" />" was expected, but "<xsl:value-of select="$content-type" />" was returned instead.</ctl:message>
        						<ctl:fail/>
        					</xsl:if>
                        </xsl:otherwise>
                    </xsl:choose>
				</xsl:otherwise>
			</xsl:choose>			
				
		</code>
	</test>

    <test name="owsTests:ows-OWS.GetCapabilities-NoService.1"><!-- CHECK OK -->
      <ctl:param name="serviceURL"/>
      <ctl:param name="serviceVersion" />
      <ctl:param name="capabilitiesResponseSchemaLocation" />
      <ctl:param name="capabilitiesResponseSchemaType" />
	  <ctl:param name="PostEncodingIsSOAP" />
	  <ctl:param name="GetCapabilities_GET" />
      <assertion>A GetCapabilities request without service parameter should return valid GetCapabilities response .</assertion>
      <comment>GetCapabilities with no service parameter.  Pass if the response is GetCapabilities response schema valid; .</comment>
      <link></link>
		<code>
            <ctl:message>Issuing a GetCapabilities request with no service parameter...</ctl:message>
			<xsl:variable name="response">
				<xsl:if test="$PostEncodingIsSOAP=string('true')">
					<ctl:soap-request version="1.2" charset="UTF-8">
						<ctl:url>
							<xsl:value-of select="$serviceURL"/>
						</ctl:url>
						<ctl:body>
							<sps:GetCapabilities
								xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" 
								xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" 
								xmlns:sps="http://www.opengis.net/sps/2.0" 
								xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"></sps:GetCapabilities>
						</ctl:body>
						<parsers:SOAPParser return="content">
							<parsers:XMLValidatingParser>
								<parsers:schemas>
									<parsers:schema>
										<xsl:attribute name="type"><xsl:value-of select="$capabilitiesResponseSchemaType" /></xsl:attribute>
										<xsl:value-of select="$capabilitiesResponseSchemaLocation" />
									</parsers:schema>
								</parsers:schemas>
							</parsers:XMLValidatingParser>
						</parsers:SOAPParser>
					</ctl:soap-request>
				</xsl:if>
				<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
					<xsl:if test="$GetCapabilities_GET">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$serviceURL"/>
							</ctl:url>
							<ctl:method>get</ctl:method>
							<ctl:param name="request">GetCapabilities</ctl:param>
							<parsers:XMLValidatingParser>
								<parsers:schemas>
									<parsers:schema>
										<xsl:attribute name="type"><xsl:value-of select="$capabilitiesResponseSchemaType" /></xsl:attribute>
										<xsl:value-of select="$capabilitiesResponseSchemaLocation" />
									</parsers:schema>
								</parsers:schemas>
							</parsers:XMLValidatingParser>
						</ctl:request>
					</xsl:if>
					<xsl:if test="not($GetCapabilities_GET)">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$serviceURL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:GetCapabilities 
									xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" 
									xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" 
									xmlns:sps="http://www.opengis.net/sps/2.0" 
									xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"></sps:GetCapabilities>
							</ctl:body>
							<parsers:XMLValidatingParser>
								<parsers:schemas>
									<parsers:schema>
										<xsl:attribute name="type"><xsl:value-of select="$capabilitiesResponseSchemaType" /></xsl:attribute>
										<xsl:value-of select="$capabilitiesResponseSchemaLocation" />
									</parsers:schema>
								</parsers:schemas>
							</parsers:XMLValidatingParser>
						</ctl:request>
					</xsl:if>

				</xsl:if>
			</xsl:variable>		
			
			<xsl:choose>
				<xsl:when test="not($response/*)">
			       	<ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
			    <xsl:otherwise>
					<!-- request中只有request是必要的參數,其他像是service=SPS,acceptVersions=2.0.0都可以省略,伺服器要給預設值-->
					<xsl:if test="not($response/sps:Capabilities)">
                        <ctl:message>FAILURE:  The response to a GetCapabilities request is not a correct response.</ctl:message>
                        <ctl:fail />
					</xsl:if> 
					<!-- 預設service=SPS-->
					<xsl:if test="not(string($response/sps:Capabilities/ows:ServiceIdentification/ows:ServiceType)=string('SPS'))">
                        <ctl:message>FAILURE:  When request didn't give the parameter "service",the service didn't give the default value "SPS".</ctl:message>
                        <ctl:fail />
					</xsl:if> 
					<!-- 預設acceptVersions=2.0.0 -->
					<xsl:if test="not(string($response/sps:Capabilities/ows:ServiceIdentification/ows:ServiceTypeVersion)=string('2.0.0'))">
                        <ctl:message>FAILURE:  When request didn't give the parameter "acceptVersions",the service didn't give the default value "2.0.0".</ctl:message>
                        <ctl:fail />
					</xsl:if>
					<!-- 沒有給 sections 值，預設要把必有項目都列出來 ServiceIdentification,ServiceProvider,OperationsMetadata,contents -->
					<xsl:if test="not($response/sps:Capabilities/ows:ServiceIdentification)">
                        <ctl:message>FAILURE:  When request didn't give the parameter "sections",the service didn't give the section block "ows:ServiceIdentification".</ctl:message>
                        <ctl:fail />
					</xsl:if>
					<xsl:if test="not($response/sps:Capabilities/ows:ServiceProvider)">
                        <ctl:message>FAILURE:  When request didn't give the parameter "sections",the service didn't give the section block "ows:ServiceProvider".</ctl:message>
                        <ctl:fail />
					</xsl:if>
					<xsl:if test="not($response/sps:Capabilities/ows:OperationsMetadata)">
                        <ctl:message>FAILURE:  When request didn't give the parameter "sections",the service didn't give the section block "ows:OperationsMetadata".</ctl:message>
                        <ctl:fail />
					</xsl:if>
					<xsl:if test="not($response/sps:Capabilities/sps:contents)">
                        <ctl:message>FAILURE:  When request didn't give the parameter "sections",the service didn't give the section block "sps:contents".</ctl:message>
                        <ctl:fail />
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>		
		</code>
	</test>
	
	<test name="owsTests:ows-OWS.GetCapabilities-Exceptions.2"><!-- CHECK OK -->
      <ctl:param name="serviceURL"/>
      <ctl:param name="serviceVersion" />
      <ctl:param name="exceptionReportSchemaLocation" />
      <ctl:param name="exceptionReportSchemaType" />
      <ctl:param name="PostEncodingIsSOAP" />
      <ctl:param name="GetCapabilities_GET" />
      <assertion>In the event that a GetCapabilities request cannot be processed for any reason, the response entity shall include an exception report. The exception code must be one of those listed in Table 5.</assertion>
      <comment>GetCapabilities with a bogus service parameter value ('ADSF').  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ExceptionReport document; (3) the ExceptionReport shall have the 'InvalidParameterValue' exception code; (4) theExceptionReport @locator value shall be that of the invalid parameter.</comment>
      <link>ows-1.0.0-metadata-atc5</link>
      <link>OGC 05-008c1, 7.4.1, p.19</link>
		<code>
		
            <ctl:message>Issuing a GetCapabilities request with an invalid service parameter value of ASDF...</ctl:message>
			<xsl:variable name="response">
				<xsl:if test="$PostEncodingIsSOAP=string('true')">
					<ctl:soap-request version="1.2" charset="UTF-8">
						<ctl:url>
							<xsl:value-of select="$serviceURL"/>
						</ctl:url>
						<ctl:body>
							<sps:GetCapabilities service="ASDF" acceptVersions="2.0.0"
								xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" 
								xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" 
								xmlns:sps="http://www.opengis.net/sps/2.0" 
								xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"></sps:GetCapabilities>
						</ctl:body>
						<parsers:SOAPParser return="content">
							<parsers:XMLValidatingParser>
								<parsers:schemas>
									<parsers:schema>
										<xsl:attribute name="type"><xsl:value-of select="$exceptionReportSchemaType" /></xsl:attribute>
										<xsl:value-of select="$exceptionReportSchemaLocation" />
									</parsers:schema>
								</parsers:schemas>
							</parsers:XMLValidatingParser>
						</parsers:SOAPParser>
					</ctl:soap-request>
				</xsl:if>
				<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
					<xsl:if test="$GetCapabilities_GET">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$serviceURL"/>
							</ctl:url>
							<ctl:method>get</ctl:method>
							<ctl:param name="service">ASDF</ctl:param>
							<ctl:param name="acceptVersions"><xsl:value-of select="$serviceVersion" /></ctl:param>
							<ctl:param name="request">GetCapabilities</ctl:param>
							<parsers:XMLValidatingParser>
								<parsers:schemas>
									<parsers:schema>
										<xsl:attribute name="type"><xsl:value-of select="$exceptionReportSchemaType" /></xsl:attribute>
										<xsl:value-of select="$exceptionReportSchemaLocation" />
									</parsers:schema>
								</parsers:schemas>
							</parsers:XMLValidatingParser>
						</ctl:request>
					</xsl:if>
					<xsl:if test="not($GetCapabilities_GET)">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$serviceURL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:GetCapabilities service="ASDF" acceptVersions="2.0.0"
									xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" 
									xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" 
									xmlns:sps="http://www.opengis.net/sps/2.0" 
									xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"></sps:GetCapabilities>
							</ctl:body>
							<parsers:XMLValidatingParser>
								<parsers:schemas>
									<parsers:schema>
										<xsl:attribute name="type"><xsl:value-of select="$exceptionReportSchemaType" /></xsl:attribute>
										<xsl:value-of select="$exceptionReportSchemaLocation" />
									</parsers:schema>
								</parsers:schemas>
							</parsers:XMLValidatingParser>
						</ctl:request>
					</xsl:if>
				</xsl:if>
			</xsl:variable>			

			<xsl:choose>
				<xsl:when test="not($response/*)">
			       	<ctl:message>FAILURE: Missing or invalid response entity.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
			    <xsl:otherwise>
                    <ctl:message>The response was a valid ExceptionReport.  Checking the response elements for validity...</ctl:message>
					<xsl:variable name="isValid">
                        <ctl:call-function name="owsFunctions:checkExceptionReport">
                            <ctl:with-param name="exceptionReport" select="$response" />
                            <ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
                            <ctl:with-param name="locatorToCheck" select="string('service')" />
							<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
                        </ctl:call-function>
                    </xsl:variable>
                    <ctl:message>The validity check returned:  <xsl:value-of select="$isValid" /></ctl:message>
                    <xsl:if test="not(xsd:boolean($isValid))">
                        <ctl:message>FAILURE: The returned exception report was expected to contain an exceptionCode of "InvalidParameterValue" and a locator value of "service".</ctl:message>
                        <ctl:fail/>
                    </xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</code>
	</test>
	
	<test name="owsTests:ows-OWS.GetCapabilities-Exceptions.3"><!-- Same to acceptVersions.3 so Skip this test -->
      <ctl:param name="serviceURL"/>
      <ctl:param name="serviceType"/>
      <ctl:param name="serviceVersion" />
      <ctl:param name="exceptionReportSchemaLocation" />
      <ctl:param name="exceptionReportSchemaType" />
      <ctl:param name="PostEncodingIsSOAP" />
	  <ctl:param name="GetCapabilities_GET" />
      <assertion>In the event that a GetCapabilities request cannot be processed for any reason, the response entity shall include an exception report. The exception code must be one of those listed in Table 5.</assertion>
      <comment>GetCapabilities with an incorrect version parameter ('2000-01-01'), using acceptVersions.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ExceptionReport document; (3) the ExceptionReport shall have the 'VersionNegotiationFailed' exception code.</comment>
      <link>ows-1.0.0-metadata-atc5</link>
      <link>OGC 05-008c1, 7.4.1, p.19</link>
		<code>
            <ctl:message>Issuing a GetCapabilities request with an acceptVersions parameter of 2000-01-01...</ctl:message>
			<xsl:variable name="request1">
				<xsl:if test="$PostEncodingIsSOAP=string('true')">
					<ctl:soap-request version="1.2" charset="UTF-8">
						<ctl:url>
							<xsl:value-of select="$serviceURL"/>
						</ctl:url>
						<ctl:body>
							<sps:GetCapabilities service="SPS" acceptVersions="2000-01-01"
								xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" 
								xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" 
								xmlns:sps="http://www.opengis.net/sps/2.0" 
								xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"></sps:GetCapabilities>
						</ctl:body>
						<parsers:SOAPParser return="content">
							<parsers:XMLValidatingParser>
								<parsers:schemas>
									<parsers:schema>
										<xsl:attribute name="type"><xsl:value-of select="$exceptionReportSchemaType" /></xsl:attribute>
										<xsl:value-of select="$exceptionReportSchemaLocation" />
									</parsers:schema>
								</parsers:schemas>
							</parsers:XMLValidatingParser>
						</parsers:SOAPParser>
					</ctl:soap-request>
				</xsl:if>
				<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
					<xsl:if test="$GetCapabilities_GET">
						<ctl:url>
							<xsl:value-of select="$serviceURL"/>
						</ctl:url>
						<ctl:method>get</ctl:method>
						<ctl:param name="service"><xsl:value-of select="$serviceType" /></ctl:param>
						<ctl:param name="request">GetCapabilities</ctl:param>
						<ctl:param name="acceptVersions">2000-01-01</ctl:param>
						<parsers:XMLValidatingParser>
							<parsers:schemas>
								<parsers:schema>
									<xsl:attribute name="type"><xsl:value-of select="$exceptionReportSchemaType" /></xsl:attribute>
									<xsl:value-of select="$exceptionReportSchemaLocation" />
								</parsers:schema>
							</parsers:schemas>
						</parsers:XMLValidatingParser>
					</xsl:if>
					<xsl:if test="not($GetCapabilities_GET)">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$serviceURL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:GetCapabilities service="SPS" acceptVersions="2000-01-01"
									xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" 
									xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" 
									xmlns:sps="http://www.opengis.net/sps/2.0" 
									xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"></sps:GetCapabilities>
							</ctl:body>
							<parsers:XMLValidatingParser>
								<parsers:schemas>
									<parsers:schema>
										<xsl:attribute name="type"><xsl:value-of select="$exceptionReportSchemaType" /></xsl:attribute>
										<xsl:value-of select="$exceptionReportSchemaLocation" />
									</parsers:schema>
								</parsers:schemas>
							</parsers:XMLValidatingParser>
						</ctl:request>
					</xsl:if>
				</xsl:if>
			</xsl:variable>				

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			       	<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the ExceptionReport response schema.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
			    <xsl:otherwise>
                    <ctl:message>The response was a valid ExceptionReport.  Checking the response elements for validity...</ctl:message>
					<xsl:variable name="isValid">
                        <ctl:call-function name="owsFunctions:checkExceptionReport">
                            <ctl:with-param name="exceptionReport" select="$request1" />
                            <ctl:with-param name="exceptionCodeToCheck" select="string('VersionNegotiationFailed')" />
                            <ctl:with-param name="locatorToCheck" select="string('*')" />
							<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
                        </ctl:call-function>
                    </xsl:variable>
                    <ctl:message>The validity check returned:  <xsl:value-of select="$isValid" /></ctl:message>
                    <xsl:if test="not(xsd:boolean($isValid))">
                        <ctl:message>FAILURE: The returned exception report was expected to contain an exceptionCode of "VersionNegotiationFailed".</ctl:message>
                        <ctl:fail/>
                    </xsl:if>			
				</xsl:otherwise>
			</xsl:choose>		
				
		</code>
	</test>	
	
	<test name="owsTests:ows-OWS.GetCapabilities-UpdateSequence.1"><!-- CHECK OK -->
      <ctl:param name="serviceURL"/>
      <ctl:param name="exceptionReportSchemaLocation" />
      <ctl:param name="exceptionReportSchemaType" />
      <ctl:param name="PostEncodingIsSOAP" />
      <ctl:param name="GetCapabilities_GET" />
      <assertion>In the event that a GetCapabilities request cannot be processed for any reason, the response entity shall include an exception report. The exception code must be one of those listed in Table 5.</assertion>
      <comment>GetCapabilities with an incorrect updatesequence ('9999999999'), if higher than the update sequence on the current capabilities document give an exception.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ExceptionReport document; (3) the ExceptionReport shall have the 'InvalidUpdateSequence' exception code.</comment>
      <link>ows-1.0.0-metadata-atc5</link>
      <link>OGC 05-008c1, 7.4.1, p.19</link>
		<code>
            <ctl:message>Issuing a GetCapabilities request with an UpdateSequence parameter of <xsl:value-of select="$updateSequence" />...</ctl:message>
			<xsl:variable name="request1">
				<xsl:if test="$PostEncodingIsSOAP=string('true')">
					<ctl:soap-request version="1.2" charset="UTF-8">
						<ctl:url>
							<xsl:value-of select="$serviceURL"/>
						</ctl:url>
						<ctl:body>
							<sps:GetCapabilities service="SPS" updatesequence="9999999999"
								xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" 
								xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" 
								xmlns:sps="http://www.opengis.net/sps/2.0" 
								xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"></sps:GetCapabilities>
						</ctl:body>
						<parsers:SOAPParser return="content">
							<parsers:XMLValidatingParser>
								<parsers:schemas>
									<parsers:schema>
										<xsl:attribute name="type"><xsl:value-of select="$exceptionReportSchemaType" /></xsl:attribute>
										<xsl:value-of select="$exceptionReportSchemaLocation" />
									</parsers:schema>
								</parsers:schemas>
							</parsers:XMLValidatingParser>
						</parsers:SOAPParser>
					</ctl:soap-request>
				</xsl:if>
				<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
					<xsl:if test="$GetCapabilities_GET">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$serviceURL"/>
							</ctl:url>
							<ctl:method>get</ctl:method>
							<ctl:param name="request">GetCapabilities</ctl:param>
							<ctl:param name="updatesequence"><xsl:value-of select="$updateSequence" /></ctl:param>
							<parsers:XMLValidatingParser>
								<parsers:schemas>
									<parsers:schema>
										<xsl:attribute name="type"><xsl:value-of select="$exceptionReportSchemaType" /></xsl:attribute>
										<xsl:value-of select="$exceptionReportSchemaLocation" />
									</parsers:schema>
								</parsers:schemas>
							</parsers:XMLValidatingParser>
						</ctl:request>
					</xsl:if>
					<xsl:if test="not($GetCapabilities_GET)">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$serviceURL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:GetCapabilities service="SPS" updatesequence="9999999999"
									xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" 
									xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" 
									xmlns:sps="http://www.opengis.net/sps/2.0" 
									xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"></sps:GetCapabilities>
							</ctl:body>
							<parsers:XMLValidatingParser>
								<parsers:schemas>
									<parsers:schema>
										<xsl:attribute name="type"><xsl:value-of select="$exceptionReportSchemaType" /></xsl:attribute>
										<xsl:value-of select="$exceptionReportSchemaLocation" />
									</parsers:schema>
								</parsers:schemas>
							</parsers:XMLValidatingParser>
						</ctl:request>
					</xsl:if>
				</xsl:if>
			</xsl:variable>			

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			       	<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the ExceptionReport response schema.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
			    <xsl:otherwise>
                    <ctl:message>The response was a valid ExceptionReport.  Checking the response elements for validity...</ctl:message>
					<xsl:variable name="isValid">
                        <ctl:call-function name="owsFunctions:checkExceptionReport">
                            <ctl:with-param name="exceptionReport" select="$request1" />
                            <ctl:with-param name="exceptionCodeToCheck" select="string('InvalidUpdateSequence')" />
                            <ctl:with-param name="locatorToCheck" select="string('*')" />
							<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
                        </ctl:call-function>
                    </xsl:variable>
                    <ctl:message>The validity check returned:  <xsl:value-of select="$isValid" /></ctl:message>
                    <xsl:if test="not(xsd:boolean($isValid))">
                        <ctl:message>FAILURE: The returned exception report was expected to contain an exceptionCode of "InvalidUpdateSequence".</ctl:message>
                        <ctl:fail/>
                    </xsl:if>			
				</xsl:otherwise>
			</xsl:choose>		
				
		</code>
	</test>
	
	<test name="owsTests:ows-OWS.GetCapabilities-Exceptions.5"><!-- CHECK OK -->
      <ctl:param name="serviceURL"/>
      <ctl:param name="serviceType" />
      <ctl:param name="serviceVersion" />
      <ctl:param name="exceptionReportSchemaLocation" />
      <ctl:param name="exceptionReportSchemaType" />
      <ctl:param name="PostEncodingIsSOAP" />
      <ctl:param name="GetCapabilities_GET" />
      <assertion>In the event that a GetCapabilities request cannot be processed for any reason, the response entity shall include an exception report. The exception code must be one of those listed in Table 5.</assertion>
      <comment>GetCapabilities with an incorrect KVP query string, triggering the missing parameter value exception.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ExceptionReport document; (3) the ExceptionReport shall have the 'MissingParameterValue' exception code, for the request.</comment>
      <link>ows-1.0.0-metadata-atc5</link>
      <link>OGC 05-008c1, 7.4.1, p.19</link>
		<code>
			<ctl:message>GetCapabilities_GET:<xsl:value-of select="($GetCapabilities_GET  = string('true'))"/></ctl:message>
            <xsl:if test="$GetCapabilities_GET = string('true')">
				<ctl:message>Issuing a GetCapabilities request with with invalid query string data...</ctl:message>
				<xsl:variable name="request1">
					<ctl:request>
						<ctl:url>
							<xsl:value-of select="concat($serviceURL,'?request~GetCapabilities!service~',$serviceType,'!acceptVersions~',$serviceVersion)"/>
						</ctl:url>
						<ctl:method>get</ctl:method>
						<parsers:XMLValidatingParser>
							<parsers:schemas>
								<parsers:schema>
									<xsl:attribute name="type"><xsl:value-of select="$exceptionReportSchemaType" /></xsl:attribute>
									<xsl:value-of select="$exceptionReportSchemaLocation" />
								</parsers:schema>
							</parsers:schemas>
						</parsers:XMLValidatingParser>
					</ctl:request>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="not($request1/*)">
						<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the ExceptionReport response schema.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>The server returned the following response:  <xsl:value-of select="$request1" /></ctl:message>
						<ctl:message>Checking this response for validity...</ctl:message>
						<xsl:variable name="isValid">
							<ctl:call-function name="owsFunctions:checkExceptionReport">
								<ctl:with-param name="exceptionReport" select="$request1" />
								<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
								<ctl:with-param name="locatorToCheck" select="string('request')" />
								<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
							</ctl:call-function>
						</xsl:variable>
						<ctl:message>The validity check returned:  <xsl:value-of select="$isValid" /></ctl:message>
						<xsl:if test="not(xsd:boolean($isValid))">
							<ctl:message>FAILURE: The returned exception report was expected to contain an exceptionCode of "MissingParameterValue" and a locator value of "request".</ctl:message>
							<ctl:fail/>
						</xsl:if>							
					</xsl:otherwise>
				</xsl:choose>				
			</xsl:if>
			<xsl:if test="not($GetCapabilities_GET)">
				<ctl:message>Service doesn't support HTTP GET request,so skip this test.</ctl:message>
			</xsl:if>
		</code>
	</test>

    <!--Case Insensitive KVP Names-->
	<test name="owsTests:ows-OWS.CaseInsensitiveKvpNames.1"><!-- CHECK OK -->
      <ctl:param name="serviceURL"/>
      <ctl:param name="serviceType" />
      <ctl:param name="serviceVersion" />
      <ctl:param name="responseSchemaLocation" />
      <ctl:param name="responseSchemaType" />
      <ctl:param name="rootElementName" />
      <ctl:param name="PostEncodingIsSOAP" />
      <ctl:param name="GetCapabilities_GET" />
      <assertion>Parameter names in KVP strings shall be handled in a case-insensitive manner.</assertion>
      <comment>GetCapabilities with the KVP parameter names in all uppercase.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root element matches the provided root element.</comment>
      <link>ows-1.0.0-common-atc1</link>
      <link>OGC 05-008c1, 11.5.2, p.56</link>
		<code>		
            <!--Request with all caps parameter keys-->
            <ctl:message>Issuing a GetCapabilities request with upper-case parameter names...</ctl:message>
			<xsl:variable name="request1">
				<xsl:if test="$PostEncodingIsSOAP=string('true')">
					<ctl:soap-request version="1.2" charset="UTF-8">
						<ctl:url>
							<xsl:value-of select="$serviceURL"/>
						</ctl:url>
						<ctl:body>
							<sps:GetCapabilities SERVICE="SPS" acceptVersions="2.0.0"
								xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" 
								xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" 
								xmlns:sps="http://www.opengis.net/sps/2.0" 
								xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"></sps:GetCapabilities>
						</ctl:body>
						<parsers:SOAPParser return="content">
							<parsers:XMLValidatingParser>
								<parsers:schemas>
									<parsers:schema>
										<xsl:attribute name="type"><xsl:value-of select="$responseSchemaType" /></xsl:attribute>
										<xsl:value-of select="$responseSchemaLocation" />
									</parsers:schema>
								</parsers:schemas>
							</parsers:XMLValidatingParser>
						</parsers:SOAPParser>
					</ctl:soap-request>
				</xsl:if>
				<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
					<xsl:if test="$GetCapabilities_GET">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$serviceURL"/>
							</ctl:url>
							<ctl:method>get</ctl:method>
							<ctl:param name="SERVICE"><xsl:value-of select="$serviceType" /></ctl:param>
							<ctl:param name="acceptVersions"><xsl:value-of select="$serviceVersion" /></ctl:param>
							<ctl:param name="REQUEST">GetCapabilities</ctl:param>
							<parsers:XMLValidatingParser>
								<parsers:schemas>
									<parsers:schema>
										<xsl:attribute name="type"><xsl:value-of select="$responseSchemaType" /></xsl:attribute>
										<xsl:value-of select="$responseSchemaLocation" />
									</parsers:schema>
								</parsers:schemas>
							</parsers:XMLValidatingParser>
						</ctl:request>
					</xsl:if>
					<xsl:if test="not($GetCapabilities_GET)">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$serviceURL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:GetCapabilities SERVICE="SPS" acceptVersions="2.0.0"
									xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" 
									xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" 
									xmlns:sps="http://www.opengis.net/sps/2.0" 
									xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"></sps:GetCapabilities>
							</ctl:body>
							<parsers:XMLValidatingParser>
								<parsers:schemas>
									<parsers:schema>
										<xsl:attribute name="type"><xsl:value-of select="$responseSchemaType" /></xsl:attribute>
										<xsl:value-of select="$responseSchemaLocation" />
									</parsers:schema>
								</parsers:schemas>
							</parsers:XMLValidatingParser>
						</ctl:request>
					</xsl:if>
				</xsl:if>
			</xsl:variable>
			
            <!--Request with mixed case parameter keys-->
            <ctl:message>Issuing a GetCapabilities request with mixed-case parameter names...</ctl:message>
            <xsl:variable name="request2">
				<xsl:if test="$PostEncodingIsSOAP=string('true')">
					<ctl:soap-request version="1.2" charset="UTF-8">
						<ctl:url>
							<xsl:value-of select="$serviceURL"/>
						</ctl:url>
						<ctl:body>
							<sps:GetCapabilities SeRvIcE="SPS" acceptVersions="2.0.0"
								xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" 
								xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" 
								xmlns:sps="http://www.opengis.net/sps/2.0" 
								xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"></sps:GetCapabilities>
						</ctl:body>
						<parsers:SOAPParser return="content">
							<parsers:XMLValidatingParser>
								<parsers:schemas>
									<parsers:schema>
										<xsl:attribute name="type"><xsl:value-of select="$responseSchemaType" /></xsl:attribute>
										<xsl:value-of select="$responseSchemaLocation" />
									</parsers:schema>
								</parsers:schemas>
							</parsers:XMLValidatingParser>
						</parsers:SOAPParser>
					</ctl:soap-request>
				</xsl:if>
				<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
					<xsl:if test="$GetCapabilities_GET">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$serviceURL"/>
							</ctl:url>
							<ctl:method>get</ctl:method>
							<ctl:param name="SeRvIcE"><xsl:value-of select="$serviceType" /></ctl:param>
							<ctl:param name="acceptVersions"><xsl:value-of select="$serviceVersion" /></ctl:param>
							<ctl:param name="RequesT">GetCapabilities</ctl:param>
							<parsers:XMLValidatingParser>
								<parsers:schemas>
									<parsers:schema>
										<xsl:attribute name="type"><xsl:value-of select="$responseSchemaType" /></xsl:attribute>
										<xsl:value-of select="$responseSchemaLocation" />
									</parsers:schema>
								</parsers:schemas>
							</parsers:XMLValidatingParser>
						</ctl:request>
					</xsl:if>
					<xsl:if test="not($GetCapabilities_GET)">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$serviceURL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:GetCapabilities SeRvIcE="SPS" acceptVersions="2.0.0"
									xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" 
									xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" 
									xmlns:sps="http://www.opengis.net/sps/2.0" 
									xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"></sps:GetCapabilities>
							</ctl:body>
							<parsers:XMLValidatingParser>
								<parsers:schemas>
									<parsers:schema>
										<xsl:attribute name="type"><xsl:value-of select="$responseSchemaType" /></xsl:attribute>
										<xsl:value-of select="$responseSchemaLocation" />
									</parsers:schema>
								</parsers:schemas>
							</parsers:XMLValidatingParser>
						</ctl:request>
					</xsl:if>
				</xsl:if>
			</xsl:variable>
            
            <!--Request with lower case parameter keys-->
            <ctl:message>Issuing a GetCapabilities request with lower-case parameter names...</ctl:message>
            <xsl:variable name="request3">
				<xsl:if test="$PostEncodingIsSOAP=string('true')">
					<ctl:soap-request version="1.2" charset="UTF-8">
						<ctl:url>
							<xsl:value-of select="$serviceURL"/>
						</ctl:url>
						<ctl:body>
							<sps:GetCapabilities service="SPS" acceptVersions="2.0.0"
								xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" 
								xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" 
								xmlns:sps="http://www.opengis.net/sps/2.0" 
								xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"></sps:GetCapabilities>
						</ctl:body>
						<parsers:SOAPParser return="content">
							<parsers:XMLValidatingParser>
								<parsers:schemas>
									<parsers:schema>
										<xsl:attribute name="type"><xsl:value-of select="$responseSchemaType" /></xsl:attribute>
										<xsl:value-of select="$responseSchemaLocation" />
									</parsers:schema>
								</parsers:schemas>
							</parsers:XMLValidatingParser>
						</parsers:SOAPParser>
					</ctl:soap-request>
				</xsl:if>
				<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
					<xsl:if test="$GetCapabilities_GET">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$serviceURL"/>
							</ctl:url>
							<ctl:method>get</ctl:method>
							<ctl:param name="service"><xsl:value-of select="$serviceType" /></ctl:param>
							<ctl:param name="acceptVersions"><xsl:value-of select="$serviceVersion" /></ctl:param>
							<ctl:param name="request">GetCapabilities</ctl:param>
							<parsers:XMLValidatingParser>
								<parsers:schemas>
									<parsers:schema>
										<xsl:attribute name="type"><xsl:value-of select="$responseSchemaType" /></xsl:attribute>
										<xsl:value-of select="$responseSchemaLocation" />
									</parsers:schema>
								</parsers:schemas>
							</parsers:XMLValidatingParser>
						</ctl:request>
					</xsl:if>
					<xsl:if test="not($GetCapabilities_GET)">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$serviceURL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:GetCapabilities service="SPS" acceptVersions="2.0.0"
									xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" 
									xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" 
									xmlns:sps="http://www.opengis.net/sps/2.0" 
									xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"></sps:GetCapabilities>
							</ctl:body>
							<parsers:XMLValidatingParser>
								<parsers:schemas>
									<parsers:schema>
										<xsl:attribute name="type"><xsl:value-of select="$responseSchemaType" /></xsl:attribute>
										<xsl:value-of select="$responseSchemaLocation" />
									</parsers:schema>
								</parsers:schemas>
							</parsers:XMLValidatingParser>
						</ctl:request>
					</xsl:if>
				</xsl:if>
			</xsl:variable>
            
			<xsl:choose>
				<xsl:when test="not($request1/*) or not($request2/*) or not($request3/*)">
			       	<ctl:message>FAILURE: Missing or invalid response entity in one or more of the preceding GetCapabilities requests.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
			    <xsl:otherwise>
					<xsl:variable name="request1Root" select="local-name-from-QName(node-name($request1/*[1]))" />
                    <xsl:variable name="request2Root" select="local-name-from-QName(node-name($request2/*[1]))" />
                    <xsl:variable name="request3Root" select="local-name-from-QName(node-name($request3/*[1]))" />
                    <xsl:if test="not($request1Root=$rootElementName) or not($request2Root=$rootElementName) or not($request3Root=$rootElementName)">
                        <ctl:message>FAILURE:  The root element(s) from the responses to GetCapabilities requests with mixed-case parameters do not match the expected root element of "<xsl:value-of select="$rootElementName" />"</ctl:message>
                        <ctl:fail />
                    </xsl:if>
				</xsl:otherwise>
			</xsl:choose>			
            
		</code>
	</test>
    
	<test name="owsTests:ows-OWS.GetCapabilities-acceptVersions.1"><!-- CHECK OK -->
      <ctl:param name="serviceURL"/>
      <ctl:param name="serviceType" />
      <ctl:param name="serviceVersion" />
      <ctl:param name="responseSchemaLocation" />
      <ctl:param name="responseSchemaType" />
      <ctl:param name="rootElementName" />
      <ctl:param name="PostEncodingIsSOAP" />
      <ctl:param name="GetCapabilities_GET" />
      <assertion>If AcceptVersion is not specified, the service must respond with highest supported version.</assertion>
      <comment>GetCapabilities with no version and service of $serviceType.  Without AcceptVersion, using version negotiation, sends latest copy.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an wfs:WFS_Capabilities document; (3) the response version must be what was requested.</comment>
      <link>ows-1.0.0-metadata-atc3</link>
      <link>OGC 05-008c1, 7.3.2, p.16</link>
		<code>
			
            <ctl:message>Issuing a GetCapabilities request with no AcceptVersion parameter...</ctl:message>
			<xsl:variable name="request1">
				<xsl:if test="$PostEncodingIsSOAP=string('true')">
					<ctl:soap-request version="1.2" charset="UTF-8">
						<ctl:url>
							<xsl:value-of select="$serviceURL"/>
						</ctl:url>
						<ctl:body>
							<sps:GetCapabilities service="SPS"
								xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" 
								xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" 
								xmlns:sps="http://www.opengis.net/sps/2.0" 
								xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"></sps:GetCapabilities>
						</ctl:body>
						<parsers:SOAPParser return="content">
							<parsers:XMLValidatingParser>
								<parsers:schemas>
									<parsers:schema>
										<xsl:attribute name="type"><xsl:value-of select="$responseSchemaType" /></xsl:attribute>
										<xsl:value-of select="$responseSchemaLocation" />
									</parsers:schema>
								</parsers:schemas>
							</parsers:XMLValidatingParser>
						</parsers:SOAPParser>
					</ctl:soap-request>
				</xsl:if>
				<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
					<xsl:if test="$GetCapabilities_GET">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$serviceURL"/>
							</ctl:url>
							<ctl:method>get</ctl:method>
							<ctl:param name="request">GetCapabilities</ctl:param>				   
							<ctl:param name="service"><xsl:value-of select="$serviceType" /></ctl:param>
							<parsers:XMLValidatingParser>
								<parsers:schemas>
									<parsers:schema>
										<xsl:attribute name="type"><xsl:value-of select="$responseSchemaType" /></xsl:attribute>
										<xsl:value-of select="$responseSchemaLocation" />
									</parsers:schema>
								</parsers:schemas>
							</parsers:XMLValidatingParser>
						</ctl:request>
					</xsl:if>
					<xsl:if test="not($GetCapabilities_GET)">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$serviceURL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:GetCapabilities service="SPS"
									xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" 
									xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" 
									xmlns:sps="http://www.opengis.net/sps/2.0" 
									xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"></sps:GetCapabilities>
							</ctl:body>
							<parsers:XMLValidatingParser>
								<parsers:schemas>
									<parsers:schema>
										<xsl:attribute name="type"><xsl:value-of select="$responseSchemaType" /></xsl:attribute>
										<xsl:value-of select="$responseSchemaLocation" />
									</parsers:schema>
								</parsers:schemas>
							</parsers:XMLValidatingParser>
						</ctl:request>
					</xsl:if>
				</xsl:if>
			</xsl:variable>			

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			       	<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetCapabilities response schema for <xsl:value-of select="$serviceType" />.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
			    <xsl:otherwise>
					<xsl:variable name="request1Root" select="local-name-from-QName(node-name($request1/*[1]))" />
                    <xsl:variable name="version">
                        <xsl:value-of select="$request1/*[1]/@version" />
                    </xsl:variable>
                    <xsl:if test="not($request1Root=$rootElementName)">
                        <ctl:message>FAILURE:  The root element "<xsl:value-of select="$request1Root" />" from the response to a GetCapabilities request does not match the expected root element of "<xsl:value-of select="$rootElementName" />"</ctl:message>
                        <ctl:fail />
                    </xsl:if>
                    <ctl:message>Checking the version attribute (<xsl:value-of select="$version" />) of the root element of the response.</ctl:message>
                    <xsl:if test="not($version=$serviceVersion)">
                        <ctl:message>FAILURE:  The returned value in the version attribute "<xsl:value-of select="$version" />" does not match the expected version of "<xsl:value-of select="$serviceVersion" />"</ctl:message>
                        <ctl:fail />
                    </xsl:if>
				</xsl:otherwise>
			</xsl:choose>		
				
		</code>
	</test>
	
	<test name="owsTests:ows-OWS.GetCapabilities-acceptVersions.2"><!-- CHECK OK -->
      <ctl:param name="serviceURL"/>
      <ctl:param name="serviceType" />
      <ctl:param name="serviceVersion" />
      <ctl:param name="acceptVersions" />
      <ctl:param name="responseSchemaLocation" />
      <ctl:param name="responseSchemaType" />
      <ctl:param name="rootElementName" />
      <ctl:param name="PostEncodingIsSOAP" />
      <ctl:param name="GetCapabilities_GET" />
      <assertion>Version negotiation using acceptVersions parameter (preference ordering): Return service metadata corresponding to the most preferred version that is supported. If none of the requested versions are supported, the server must generate an exception with code 'VersionNegotiationFailed'.</assertion>
      <comment>GetCapabilities with no version and service of $serviceType.  With AcceptVersion, expecting one of the versions listed $acceptVersions.  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an Capabilities document; (3) the response version must be what was requested. The AcceptVersion element is used with a number of versions, one is expected to return ('1.1.0').</comment>
      <link>ows-1.0.0-metadata-atc4</link>
      <link>OGC 05-008c1, 7.3.2, p.16</link>
		<code>
		
            <ctl:message>Issuing a GetCapabilities request with an acceptVersions parameter of <xsl:value-of select="$acceptVersions"/>...</ctl:message>
			<xsl:variable name="request1">
				<xsl:if test="$PostEncodingIsSOAP=string('true')">
					<ctl:soap-request version="1.2" charset="UTF-8">
						<ctl:url>
							<xsl:value-of select="$serviceURL"/>
						</ctl:url>
						<ctl:body>
							<sps:GetCapabilities service="SPS"
								xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" 
								xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" 
								xmlns:sps="http://www.opengis.net/sps/2.0" 
								xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
								<ows:acceptVersions>
									<ows:Version><xsl:value-of select="$acceptVersions" /></ows:Version>
								</ows:acceptVersions>
							</sps:GetCapabilities>
						</ctl:body>
						<parsers:SOAPParser return="content">
							<parsers:XMLValidatingParser>
								<parsers:schemas>
									<parsers:schema>
										<xsl:attribute name="type"><xsl:value-of select="$responseSchemaType" /></xsl:attribute>
										<xsl:value-of select="$responseSchemaLocation" />
									</parsers:schema>
								</parsers:schemas>
							</parsers:XMLValidatingParser>
						</parsers:SOAPParser>
					</ctl:soap-request>
				</xsl:if>
				<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
					<xsl:if test="$GetCapabilities_GET">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$serviceURL"/>
							</ctl:url>
							<ctl:method>get</ctl:method>
							<ctl:param name="request">GetCapabilities</ctl:param>				   
							<ctl:param name="service"><xsl:value-of select="$serviceType" /></ctl:param>
							<ctl:param name="acceptVersions"><xsl:value-of select="$acceptVersions" /></ctl:param>
							<parsers:XMLValidatingParser>
								<parsers:schemas>
									<parsers:schema>
										<xsl:attribute name="type"><xsl:value-of select="$responseSchemaType" /></xsl:attribute>
										<xsl:value-of select="$responseSchemaLocation" />
									</parsers:schema>
								</parsers:schemas>
							</parsers:XMLValidatingParser>
						</ctl:request>
					</xsl:if>
					<xsl:if test="not($GetCapabilities_GET)">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$serviceURL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:GetCapabilities service="SPS"
									xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" 
									xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" 
									xmlns:sps="http://www.opengis.net/sps/2.0" 
									xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<ows:acceptVersions>
										<ows:Version><xsl:value-of select="$acceptVersions" /></ows:Version>
									</ows:acceptVersions>
								</sps:GetCapabilities>
							</ctl:body>
							<parsers:XMLValidatingParser>
								<parsers:schemas>
									<parsers:schema>
										<xsl:attribute name="type"><xsl:value-of select="$responseSchemaType" /></xsl:attribute>
										<xsl:value-of select="$responseSchemaLocation" />
									</parsers:schema>
								</parsers:schemas>
							</parsers:XMLValidatingParser>
						</ctl:request>
					</xsl:if>
				</xsl:if>
			</xsl:variable>			

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			       	<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetCapabilities response schema for <xsl:value-of select="$serviceType" />.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
			    <xsl:otherwise>
					<xsl:variable name="request1Root" select="local-name-from-QName(node-name($request1/*[1]))" />
                    <xsl:variable name="version">
                        <xsl:value-of select="$request1/*[1]/@version" />
                    </xsl:variable>
                    <xsl:if test="not($request1Root=$rootElementName)">
                        <ctl:message>FAILURE:  The root element "<xsl:value-of select="$request1Root" />" from the response to a GetCapabilities request does not match the expected root element of "<xsl:value-of select="$rootElementName" />"</ctl:message>
                        <ctl:fail />
                    </xsl:if>
                    <ctl:message>Checking the version attribute (<xsl:value-of select="$version" />) of the root element of the response.</ctl:message>
                    <xsl:if test="not($version=$serviceVersion)">
                        <ctl:message>FAILURE:  The returned value in the version attribute "<xsl:value-of select="$version" />" does not match the expected version of "<xsl:value-of select="$serviceVersion" />"</ctl:message>
                        <ctl:fail />
                    </xsl:if>
				</xsl:otherwise>
			</xsl:choose>		
			
		</code>
	</test>
	
	<test name="owsTests:ows-OWS.GetCapabilities-acceptVersions.3"><!-- CHECK OK -->
      <ctl:param name="serviceURL"/>
      <ctl:param name="serviceType" />
      <ctl:param name="serviceVersion" />
      <ctl:param name="exceptionReportSchemaLocation" />
      <ctl:param name="exceptionReportSchemaType" />
      <ctl:param name="PostEncodingIsSOAP" />
      <ctl:param name="GetCapabilities_GET" />
      <assertion>Version negotiation using acceptVersions parameter (preference ordering): Return service metadata corresponding to the most preferred version that is supported. If none of the requested versions are supported, the server must generate an exception with code 'VersionNegotiationFailed'.</assertion>
      <comment>GetCapabilities with no version and service of $serviceType.  With AcceptVersion, using a bogus version number ('2000-01-01').  Pass if all of the following conditions are true: (1) the response is schema valid; (2) the root document is an ows:ExceptionReport document; (3) the ExceptionReport shall have the 'VersionNegotiationFailed' exception code.</comment>
      <link>ows-1.0.0-metadata-atc4</link>
      <link>OGC 05-008c1, 7.3.2, p.16</link>
		<code>
            <ctl:message>Issuing a GetCapabilities request with an acceptVersions parameter of 2000-01-01...</ctl:message>
			<xsl:variable name="request1">
				<xsl:if test="$PostEncodingIsSOAP=string('true')">
					<ctl:soap-request version="1.2" charset="UTF-8">
						<ctl:url>
							<xsl:value-of select="$serviceURL"/>
						</ctl:url>
						<ctl:body>
							<sps:GetCapabilities service="SPS"
								xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" 
								xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" 
								xmlns:sps="http://www.opengis.net/sps/2.0" 
								xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
								<ows:acceptVersions>
									<ows:Version>2000-01-01</ows:Version>
								</ows:acceptVersions>
							</sps:GetCapabilities>
						</ctl:body>
						<parsers:SOAPParser return="content">
							<parsers:XMLValidatingParser>
								<parsers:schemas>
									<parsers:schema>
										<xsl:attribute name="type"><xsl:value-of select="$exceptionReportSchemaType" /></xsl:attribute>
										<xsl:value-of select="$exceptionReportSchemaLocation" />
									</parsers:schema>
								</parsers:schemas>
							</parsers:XMLValidatingParser>
						</parsers:SOAPParser>
					</ctl:soap-request>
				</xsl:if>
				<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
					<xsl:if test="$GetCapabilities_GET">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$serviceURL"/>
							</ctl:url>
							<ctl:method>get</ctl:method>
							<ctl:param name="request">GetCapabilities</ctl:param>				   
							<ctl:param name="service"><xsl:value-of select="$serviceType" /></ctl:param>
							<ctl:param name="acceptVersions">2000-01-01</ctl:param>
							<parsers:XMLValidatingParser>
								<parsers:schemas>
									<parsers:schema>
										<xsl:attribute name="type"><xsl:value-of select="$exceptionReportSchemaType" /></xsl:attribute>
										<xsl:value-of select="$exceptionReportSchemaLocation" />
									</parsers:schema>
								</parsers:schemas>
							</parsers:XMLValidatingParser>
						</ctl:request>
					</xsl:if>
					<xsl:if test="not($GetCapabilities_GET)">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$serviceURL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:GetCapabilities service="SPS"
									xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" 
									xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" 
									xmlns:sps="http://www.opengis.net/sps/2.0" 
									xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<ows:acceptVersions>
										<ows:Version>2000-01-01</ows:Version>
									</ows:acceptVersions>
								</sps:GetCapabilities>
							</ctl:body>
							<parsers:XMLValidatingParser>
								<parsers:schemas>
									<parsers:schema>
										<xsl:attribute name="type"><xsl:value-of select="$exceptionReportSchemaType" /></xsl:attribute>
										<xsl:value-of select="$exceptionReportSchemaLocation" />
									</parsers:schema>
								</parsers:schemas>
							</parsers:XMLValidatingParser>
						</ctl:request>
					</xsl:if>
				</xsl:if>
			</xsl:variable>			

			<xsl:choose>
				<xsl:when test="not($request1/*)">
			       	<ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the ExceptionReport response schema.</ctl:message>
					<ctl:fail/>
			    </xsl:when>
			    <xsl:otherwise>
                    <ctl:message>The response was a valid ExceptionReport.  Checking the response elements for validity...</ctl:message>
					<xsl:variable name="isValid">
                        <ctl:call-function name="owsFunctions:checkExceptionReport">
                            <ctl:with-param name="exceptionReport" select="$request1" />
                            <ctl:with-param name="exceptionCodeToCheck" select="string('VersionNegotiationFailed')" />
                            <ctl:with-param name="locatorToCheck" select="string('*')" />
							<ctl:with-param name="PostEncodingIsSOAP" select="$PostEncodingIsSOAP" />
                        </ctl:call-function>
                    </xsl:variable>
                    <ctl:message>The validity check returned:  <xsl:value-of select="$isValid" /></ctl:message>
                    <xsl:if test="not(xsd:boolean($isValid))">
                        <ctl:message>FAILURE: The returned exception report was expected to contain an exceptionCode of "VersionNegotiationFailed".</ctl:message>
                        <ctl:fail/>
                    </xsl:if>					
				</xsl:otherwise>
			</xsl:choose>						
		</code>
	</test>
    
    <test name="owsTests:ows-OWS.GetCapabilities-Sections.1"><!-- CHECK OK -->
      <ctl:param name="serviceURL"/>
      <ctl:param name="serviceType" />
      <ctl:param name="serviceVersion" />
      <ctl:param name="responseSchemaLocation" />
      <ctl:param name="responseSchemaType" />
      <ctl:param name="PostEncodingIsSOAP" />
      <ctl:param name="GetCapabilities_GET" />
      <assertion>
      The response to a GetCapabilities request that includes a sections parameter 
      with NO VALUE provided shall include an abbreviated capabilities document 
      that omits all optional sections.
      </assertion>
      <comment>Pass if the response is schema valid and omits all optional 
      top-level elements.</comment>
      <link>ows-1.0.0-metadata-atc9</link>
      <link>OGC 05-008c1, 7.3.3, p.17</link>
		<code>
            <ctl:message>Issuing a GetCapabilities request with an empty Sections parameter...</ctl:message>
			<xsl:variable name="response">
				<xsl:if test="$PostEncodingIsSOAP=string('true')">
					<ctl:soap-request version="1.2" charset="UTF-8">
						<ctl:url>
							<xsl:value-of select="$serviceURL"/>
						</ctl:url>
						<ctl:body>
							<sps:GetCapabilities service="SPS"
								xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" 
								xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" 
								xmlns:sps="http://www.opengis.net/sps/2.0" 
								xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
								<ows:Sections />
							</sps:GetCapabilities>
						</ctl:body>
						<parsers:SOAPParser return="content">
							<parsers:XMLValidatingParser>
								<parsers:schemas>
									<parsers:schema>
										<xsl:attribute name="type"><xsl:value-of select="$responseSchemaType" /></xsl:attribute>
										<xsl:value-of select="$responseSchemaLocation" />
									</parsers:schema>
								</parsers:schemas>
							</parsers:XMLValidatingParser>
						</parsers:SOAPParser>
					</ctl:soap-request>
				</xsl:if>
				<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
					<xsl:if test="$GetCapabilities_GET">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$serviceURL"/>
							</ctl:url>
							<ctl:method>get</ctl:method>
							<ctl:param name="service"><xsl:value-of select="$serviceType" /></ctl:param>
							<ctl:param name="request">GetCapabilities</ctl:param>
							<ctl:param name="sections"></ctl:param>
							<parsers:XMLValidatingParser>
								<parsers:schemas>
									<parsers:schema>
										<xsl:attribute name="type"><xsl:value-of select="$responseSchemaType" /></xsl:attribute>
										<xsl:value-of select="$responseSchemaLocation" />
									</parsers:schema>
								</parsers:schemas>
							</parsers:XMLValidatingParser>
						</ctl:request>
					</xsl:if>
					<xsl:if test="not($GetCapabilities_GET)">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$serviceURL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:GetCapabilities service="SPS"
									xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" 
									xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" 
									xmlns:sps="http://www.opengis.net/sps/2.0" 
									xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<ows:Sections />
								</sps:GetCapabilities>
							</ctl:body>
							<parsers:XMLValidatingParser>
								<parsers:schemas>
									<parsers:schema>
										<xsl:attribute name="type"><xsl:value-of select="$responseSchemaType" /></xsl:attribute>
										<xsl:value-of select="$responseSchemaLocation" />
									</parsers:schema>
								</parsers:schemas>
							</parsers:XMLValidatingParser>
						</ctl:request>
					</xsl:if>
				</xsl:if>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetCapabilities response schema for <xsl:value-of select="$serviceType" />.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
				<ctl:message>Getting the sections of the Capabilities document.</ctl:message>
				<xsl:variable name="sections" select="count($response//sps:Capabilities/*) > 0" />
				<xsl:if test="$sections">
					<ctl:message>FAILURE:  There should be no element in the returned Capabilities element of the response.</ctl:message>
                    <ctl:fail/>
				</xsl:if>

              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="owsTests:ows-OWS.GetCapabilities-Sections.2"><!-- CHECK OK -->
      <ctl:param name="serviceURL"/>
      <ctl:param name="serviceType" />
      <ctl:param name="serviceVersion" />
      <ctl:param name="responseSchemaLocation" />
      <ctl:param name="responseSchemaType" />
	  <ctl:param name="PostEncodingIsSOAP" />
      <ctl:param name="GetCapabilities_GET" />
      <assertion>
      The response to a GetCapabilities request that includes a sections parameter 
      listing optional elements shall include only the requested elements in the 
      response entity.
      </assertion>
      <comment>
      Pass if the response is schema valid and includes only the requested optional 
      elements.
      </comment>
      <link>ows-1.0.0-metadata-atc9</link>
      <link>OGC 05-008c1, 7.3.3, p.17</link>
		<code>
			<!-- 目前是固定式的用兩個檢查，有時間再改成隨機取得項目來測試 -->
            <ctl:message>Issuing a GetCapabilities request with a Sections parameter of ServiceIdentification,OperationsMetadata...</ctl:message>
			<xsl:variable name="response">
				<xsl:if test="$PostEncodingIsSOAP=string('true')">
					<ctl:soap-request version="1.2" charset="UTF-8">
						<ctl:url>
							<xsl:value-of select="$serviceURL"/>
						</ctl:url>
						<ctl:body>
							<sps:GetCapabilities service="SPS" acceptVersions="2.0.0"
								xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" 
								xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" 
								xmlns:sps="http://www.opengis.net/sps/2.0" 
								xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
								<ows:Sections>  
									<ows:Section>OperationsMetadata</ows:Section>  
									<ows:Section>ServiceIdentification</ows:Section>
								</ows:Sections>
							</sps:GetCapabilities>
						</ctl:body>
						<parsers:SOAPParser return="content">
							<parsers:XMLValidatingParser>
								<parsers:schemas>
									<parsers:schema>
										<xsl:attribute name="type"><xsl:value-of select="$responseSchemaType" /></xsl:attribute>
										<xsl:value-of select="$responseSchemaLocation" />
									</parsers:schema>
								</parsers:schemas>
							</parsers:XMLValidatingParser>
						</parsers:SOAPParser>
					</ctl:soap-request>
				</xsl:if>
				<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
					<xsl:if test="$GetCapabilities_GET">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$serviceURL"/>
							</ctl:url>
							<ctl:method>get</ctl:method>
							<ctl:param name="service"><xsl:value-of select="$serviceType" /></ctl:param>
							<ctl:param name="request">GetCapabilities</ctl:param>
							<ctl:param name="acceptVersions"><xsl:value-of select="$serviceVersion" /></ctl:param>
							<ctl:param name="sections">ServiceIdentification,OperationsMetadata</ctl:param>
							<parsers:XMLValidatingParser>
								<parsers:schemas>
									<parsers:schema>
										<xsl:attribute name="type"><xsl:value-of select="$responseSchemaType" /></xsl:attribute>
										<xsl:value-of select="$responseSchemaLocation" />
									</parsers:schema>
								</parsers:schemas>
							</parsers:XMLValidatingParser>
						</ctl:request>
					</xsl:if>
					<xsl:if test="not($GetCapabilities_GET)">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$serviceURL" />
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:body>
								<sps:GetCapabilities service="SPS" acceptVersions="2.0.0"
									xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" 
									xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" 
									xmlns:sps="http://www.opengis.net/sps/2.0" 
									xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<ows:Sections>  
										<ows:Section>OperationsMetadata</ows:Section>  
										<ows:Section>ServiceIdentification</ows:Section>
									</ows:Sections>
								</sps:GetCapabilities>
							</ctl:body>
							<parsers:XMLValidatingParser>
								<parsers:schemas>
									<parsers:schema>
										<xsl:attribute name="type"><xsl:value-of select="$responseSchemaType" /></xsl:attribute>
										<xsl:value-of select="$responseSchemaLocation" />
									</parsers:schema>
								</parsers:schemas>
							</parsers:XMLValidatingParser>
						</ctl:request>
					</xsl:if>
				</xsl:if>
			</xsl:variable>
			
            <xsl:choose>
              <xsl:when test="not($response/*)">
                  <ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the GetCapabilities response schema for <xsl:value-of select="$serviceType" />.</ctl:message>
                  <ctl:fail/>
              </xsl:when>
              <xsl:otherwise>
                <ctl:message>Checking that the OperationsMetadata section is included.</ctl:message>
                <xsl:if test="not($response//ows:OperationsMetadata)">
                    <ctl:message>FAILURE:  The ows:OperationsMetadata element is missing</ctl:message>
                    <ctl:fail/>
                </xsl:if>
                <ctl:message>Checking that the ServiceIdentification section is included.</ctl:message>
                <xsl:if test="not($response//ows:ServiceIdentification)">
                    <ctl:message>FAILURE:  The ows:ServiceIdentification element is missing</ctl:message>
                    <ctl:fail/>
                </xsl:if>
                <ctl:message>Checking that the ServiceProvider section is not included.</ctl:message>
                <xsl:if test="$response//ows:ServiceProvider">
                    <ctl:message>FAILURE:  The ows:ServiceProvider element is included</ctl:message>
                    <ctl:fail/>
                </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
		</code>
	</test>
    
    <test name="owsTests:ows-OWS.GetCapabilities-AcceptFormats.1"><!-- CHECK OK -->
		<ctl:param name="serviceURL"/>
		<ctl:param name="serviceType" />
		<ctl:param name="formats"/>
		<ctl:param name="PostEncodingIsSOAP" />
		<ctl:param name="GetCapabilities_GET" />
		<assertion>
		The response to a GetCapabilities request containing an acceptVersions 
		parameter specifying a supported format must include a response entity 
		that corresponds to the requested media type.
		</assertion>
		<link>OGC 05-008, 7.3.5</link>
		<code>
			<xsl:for-each select="$formats//ows:Value">
				<xsl:variable name="format" select="./text()" />
				<ctl:message>Issuing a GetCapabilities request with an AcceptFormats parameter of <xsl:value-of select="$format" />...</ctl:message>
				<xsl:variable name="response">
					<xsl:if test="$PostEncodingIsSOAP=string('true')">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$serviceURL"/>
							</ctl:url>
							<ctl:body>
								<sps:GetCapabilities service="SPS"
									xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" 
									xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" 
									xmlns:sps="http://www.opengis.net/sps/2.0" 
									xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<ows:AcceptFormats>
										<ows:OutputFormat><xsl:value-of select="$format"/></ows:OutputFormat> 
									</ows:AcceptFormats>
								</sps:GetCapabilities>
							</ctl:body>
							<parsers:HTTPParser />
						</ctl:soap-request>
					</xsl:if>
					<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
						<xsl:if test="$GetCapabilities_GET">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service"><xsl:value-of select="$serviceType" /></ctl:param>
								<ctl:param name="request">GetCapabilities</ctl:param>
								<ctl:param name="acceptformats"><xsl:value-of select="$format"/></ctl:param>
								<parsers:HTTPParser />
							</ctl:request>
						</xsl:if>
						<xsl:if test="not($GetCapabilities_GET)">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$serviceURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>
									<sps:GetCapabilities service="SPS"
										xmlns:soap12="http://www.w3.org/2003/05/soap-envelope" 
										xsi:schemaLocation="http://www.w3.org/2003/05/soap-envelope http://www.w3.org/2003/05/soap-envelope/soap-envelope.xsd http://www.opengis.net/sps/2.0 http://schemas.opengis.net/sps/2.0/sps.xsd" 
										xmlns:sps="http://www.opengis.net/sps/2.0" 
										xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
										<ows:AcceptFormats>
											<ows:OutputFormat><xsl:value-of select="$format"/></ows:OutputFormat> 
										</ows:AcceptFormats>
									</sps:GetCapabilities>
								</ctl:body>
								<parsers:HTTPParser />
							</ctl:request>
						</xsl:if>
					</xsl:if>

				</xsl:variable>
				<ctl:message>Checking the content type of the response...</ctl:message>
				<xsl:variable name="content-type" select="$response//headers/header[@name='Content-Type']"/>
				<ctl:message>The response content type is:  <xsl:value-of select="$content-type" />.  Comparing this value with the requested format:  <xsl:value-of select="$format" /></ctl:message>
				<xsl:if test="not(starts-with($content-type, $format))">
					<ctl:message>FAILURE: Unexpected content type for response entity (Request: <xsl:value-of select="$format"/>, Response: <xsl:value-of select="$content-type"/>).</ctl:message>
					<ctl:fail/>
				</xsl:if>
			</xsl:for-each>
		</code>
	</test>
    
    <!--===========-->
	<!-- FUNCTIONS -->
	<!--===========-->

    <!--Validates an ExceptionReport and checks for specific exceptionCode and locator values-->
    <ctl:function name="owsFunctions:checkExceptionReport"><!-- CHECK OK -->
        <ctl:param name="exceptionReport">The exception report to check</ctl:param><!-- 回應本身 -->
        <ctl:param name="exceptionCodeToCheck">The exceptionCode to check</ctl:param><!-- InvalidParameterValue -->
        <ctl:param name="locatorToCheck">The locator to check (a * can be provided to indicate that any locator value is allowed)</ctl:param><!-- service-->
		<ctl:param name="PostEncodingIsSOAP">The response encoding type</ctl:param><!-- SOAP -->
        <ctl:return>True/false depending on whether or not the exception report is valid</ctl:return>
        <ctl:description></ctl:description>
        <ctl:code>
			<xsl:if test="$PostEncodingIsSOAP=string('true')">
				<xsl:variable name="exceptionElement" select="$exceptionReport//soap12:Detail/ows:Exception" />
				<xsl:variable name="exceptionCodeValue" select="$exceptionElement/@exceptionCode" />
				<xsl:variable name="locatorValue" select="$exceptionElement/@locator" />
				<xsl:choose>
					<xsl:when test="$locatorToCheck='*'">
						<xsl:value-of select="$exceptionElement and ($exceptionCodeToCheck=$exceptionCodeValue) and (string-length(normalize-space($locatorValue))>=0)" />
					</xsl:when>
					<xsl:otherwise>
						<xsl:value-of select="$exceptionElement and ($exceptionCodeToCheck=$exceptionCodeValue) and (lower-case($locatorToCheck)=lower-case($locatorValue))" />
					</xsl:otherwise>
				</xsl:choose>
			</xsl:if>
			<xsl:if test="not($PostEncodingIsSOAP=string('true'))">
				<xsl:variable name="exceptionElement" select="$exceptionReport//ows:ExceptionReport/ows:Exception" />
				<xsl:variable name="exceptionCodeValue" select="$exceptionElement/@exceptionCode" />
				<xsl:variable name="locatorValue" select="$exceptionElement/@locator" />
				<xsl:choose>
					<xsl:when test="$locatorToCheck='*'">
						<xsl:value-of select="$exceptionElement and ($exceptionCodeToCheck=$exceptionCodeValue) and (string-length(normalize-space($locatorValue))>=0)" />
					</xsl:when>
					<xsl:otherwise>
						<xsl:value-of select="$exceptionElement and ($exceptionCodeToCheck=$exceptionCodeValue) and (lower-case($locatorToCheck)=lower-case($locatorValue))" />
					</xsl:otherwise>
				</xsl:choose>
			</xsl:if>
        </ctl:code>
    </ctl:function>	
    
    <!--Checks for a valid MIME type format-->
    <ctl:function name="owsFunctions:isValidMIMETypeFormat"><!-- CHECK OK -->
		<ctl:param name="responseFormat">The respsonseFormat to validate</ctl:param>
		<ctl:return>True/False depending on whether the input is a valid MIME type based on ows:owsCommon.xsd</ctl:return>
		<ctl:description>Determines if a definition URN is valid</ctl:description>
		<ctl:code>		
			<xsl:value-of select="(matches($responseFormat,'^(application|audio|image|text|video|message|multipart|model)/.+(;\s*.+=.+)*','i'))"/>
		</ctl:code>
	</ctl:function>	
</ctl:package>